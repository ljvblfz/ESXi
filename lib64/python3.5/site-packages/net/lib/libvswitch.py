# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libvswitch', [dirname(__file__)])
        except ImportError:
            import _libvswitch
            return _libvswitch
        if fp is not None:
            try:
                _mod = imp.load_module('_libvswitch', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libvswitch = swig_import_helper()
    del swig_import_helper
else:
    import _libvswitch
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


VMK_MODULE_NAME_MAX = _libvswitch.VMK_MODULE_NAME_MAX
vmkApiDebug = _libvswitch.vmkApiDebug
VMK_DEVICE_NAME_MAX_LENGTH = _libvswitch.VMK_DEVICE_NAME_MAX_LENGTH
VMK_FMT64 = _libvswitch.VMK_FMT64
VMK_FALSE = _libvswitch.VMK_FALSE
VMK_TRUE = _libvswitch.VMK_TRUE
VMK_KILOBYTE = _libvswitch.VMK_KILOBYTE
VMK_MEGABYTE = _libvswitch.VMK_MEGABYTE
VMK_GIGABYTE = _libvswitch.VMK_GIGABYTE
VMK_TERABYTE = _libvswitch.VMK_TERABYTE
VMK_PETABYTE = _libvswitch.VMK_PETABYTE
VMK_EXABYTE = _libvswitch.VMK_EXABYTE
VMK_BITS_PER_BYTE = _libvswitch.VMK_BITS_PER_BYTE
VMK_OK = _libvswitch.VMK_OK
VMK_FAILURE = _libvswitch.VMK_FAILURE
VMK_WOULD_BLOCK = _libvswitch.VMK_WOULD_BLOCK
VMK_NOT_FOUND = _libvswitch.VMK_NOT_FOUND
VMK_BUSY = _libvswitch.VMK_BUSY
VMK_EXISTS = _libvswitch.VMK_EXISTS
VMK_LIMIT_EXCEEDED = _libvswitch.VMK_LIMIT_EXCEEDED
VMK_BAD_PARAM = _libvswitch.VMK_BAD_PARAM
VMK_METADATA_READ_ERROR = _libvswitch.VMK_METADATA_READ_ERROR
VMK_METADATA_WRITE_ERROR = _libvswitch.VMK_METADATA_WRITE_ERROR
VMK_IO_ERROR = _libvswitch.VMK_IO_ERROR
VMK_READ_ERROR = _libvswitch.VMK_READ_ERROR
VMK_WRITE_ERROR = _libvswitch.VMK_WRITE_ERROR
VMK_INVALID_NAME = _libvswitch.VMK_INVALID_NAME
VMK_INVALID_HANDLE = _libvswitch.VMK_INVALID_HANDLE
VMK_INVALID_ADAPTER = _libvswitch.VMK_INVALID_ADAPTER
VMK_INVALID_TARGET = _libvswitch.VMK_INVALID_TARGET
VMK_INVALID_PARTITION = _libvswitch.VMK_INVALID_PARTITION
VMK_INVALID_FS = _libvswitch.VMK_INVALID_FS
VMK_INVALID_MEMMAP = _libvswitch.VMK_INVALID_MEMMAP
VMK_NO_MEMORY = _libvswitch.VMK_NO_MEMORY
VMK_NO_MEMORY_RETRY = _libvswitch.VMK_NO_MEMORY_RETRY
VMK_NO_LPAGE_MEMORY = _libvswitch.VMK_NO_LPAGE_MEMORY
VMK_NO_RESOURCES = _libvswitch.VMK_NO_RESOURCES
VMK_NO_FREE_HANDLES = _libvswitch.VMK_NO_FREE_HANDLES
VMK_NUM_HANDLES_EXCEEDED = _libvswitch.VMK_NUM_HANDLES_EXCEEDED
VMK_DEPRECATED_NO_FREE_PTR_BLOCKS = _libvswitch.VMK_DEPRECATED_NO_FREE_PTR_BLOCKS
VMK_DEPRECATED_NO_FREE_DATA_BLOCKS = _libvswitch.VMK_DEPRECATED_NO_FREE_DATA_BLOCKS
VMK_CORRUPT_REDOLOG = _libvswitch.VMK_CORRUPT_REDOLOG
VMK_STATUS_PENDING = _libvswitch.VMK_STATUS_PENDING
VMK_STATUS_FREE = _libvswitch.VMK_STATUS_FREE
VMK_UNSUPPORTED_CPU = _libvswitch.VMK_UNSUPPORTED_CPU
VMK_NOT_SUPPORTED = _libvswitch.VMK_NOT_SUPPORTED
VMK_TIMEOUT = _libvswitch.VMK_TIMEOUT
VMK_READ_ONLY = _libvswitch.VMK_READ_ONLY
VMK_RESERVATION_CONFLICT = _libvswitch.VMK_RESERVATION_CONFLICT
VMK_FS_LOCKED = _libvswitch.VMK_FS_LOCKED
VMK_NOT_ENOUGH_SLOTS = _libvswitch.VMK_NOT_ENOUGH_SLOTS
VMK_INVALID_ADDRESS = _libvswitch.VMK_INVALID_ADDRESS
VMK_NOT_SHARED = _libvswitch.VMK_NOT_SHARED
VMK_SHARED = _libvswitch.VMK_SHARED
VMK_KSEG_PAIR_FLUSHED = _libvswitch.VMK_KSEG_PAIR_FLUSHED
VMK_MAX_ASYNCIO_PENDING = _libvswitch.VMK_MAX_ASYNCIO_PENDING
VMK_VERSION_MISMATCH_MINOR = _libvswitch.VMK_VERSION_MISMATCH_MINOR
VMK_VERSION_MISMATCH_MAJOR = _libvswitch.VMK_VERSION_MISMATCH_MAJOR
VMK_IS_CONNECTED = _libvswitch.VMK_IS_CONNECTED
VMK_IS_DISCONNECTED = _libvswitch.VMK_IS_DISCONNECTED
VMK_IS_ENABLED = _libvswitch.VMK_IS_ENABLED
VMK_IS_DISABLED = _libvswitch.VMK_IS_DISABLED
VMK_NOT_INITIALIZED = _libvswitch.VMK_NOT_INITIALIZED
VMK_WAIT_INTERRUPTED = _libvswitch.VMK_WAIT_INTERRUPTED
VMK_NAME_TOO_LONG = _libvswitch.VMK_NAME_TOO_LONG
VMK_MISSING_FS_PES = _libvswitch.VMK_MISSING_FS_PES
VMK_NICTEAMING_VALID_MASTER = _libvswitch.VMK_NICTEAMING_VALID_MASTER
VMK_NICTEAMING_SLAVE = _libvswitch.VMK_NICTEAMING_SLAVE
VMK_NICTEAMING_REGULAR_VMNIC = _libvswitch.VMK_NICTEAMING_REGULAR_VMNIC
VMK_ABORT_NOT_RUNNING = _libvswitch.VMK_ABORT_NOT_RUNNING
VMK_NOT_READY = _libvswitch.VMK_NOT_READY
VMK_CHECKSUM_MISMATCH = _libvswitch.VMK_CHECKSUM_MISMATCH
VMK_VLAN_NO_HW_ACCEL = _libvswitch.VMK_VLAN_NO_HW_ACCEL
VMK_NO_VLAN_SUPPORT = _libvswitch.VMK_NO_VLAN_SUPPORT
VMK_NOT_VLAN_HANDLE = _libvswitch.VMK_NOT_VLAN_HANDLE
VMK_BAD_VLANID = _libvswitch.VMK_BAD_VLANID
VMK_MIG_CONN_CLOSED = _libvswitch.VMK_MIG_CONN_CLOSED
VMK_NO_CONNECT = _libvswitch.VMK_NO_CONNECT
VMK_SEGMENT_OVERLAP = _libvswitch.VMK_SEGMENT_OVERLAP
VMK_BAD_MPS = _libvswitch.VMK_BAD_MPS
VMK_BAD_ACPI = _libvswitch.VMK_BAD_ACPI
VMK_RESUME_ERROR = _libvswitch.VMK_RESUME_ERROR
VMK_NO_ADDRESS_SPACE = _libvswitch.VMK_NO_ADDRESS_SPACE
VMK_BAD_ADDR_RANGE = _libvswitch.VMK_BAD_ADDR_RANGE
VMK_ENETDOWN = _libvswitch.VMK_ENETDOWN
VMK_ENETUNREACH = _libvswitch.VMK_ENETUNREACH
VMK_ENETRESET = _libvswitch.VMK_ENETRESET
VMK_ECONNABORTED = _libvswitch.VMK_ECONNABORTED
VMK_ECONNRESET = _libvswitch.VMK_ECONNRESET
VMK_ENOTCONN = _libvswitch.VMK_ENOTCONN
VMK_ESHUTDOWN = _libvswitch.VMK_ESHUTDOWN
VMK_ETOOMANYREFS = _libvswitch.VMK_ETOOMANYREFS
VMK_ECONNREFUSED = _libvswitch.VMK_ECONNREFUSED
VMK_EHOSTDOWN = _libvswitch.VMK_EHOSTDOWN
VMK_EHOSTUNREACH = _libvswitch.VMK_EHOSTUNREACH
VMK_EADDRINUSE = _libvswitch.VMK_EADDRINUSE
VMK_BROKEN_PIPE = _libvswitch.VMK_BROKEN_PIPE
VMK_NOT_A_DIRECTORY = _libvswitch.VMK_NOT_A_DIRECTORY
VMK_IS_A_DIRECTORY = _libvswitch.VMK_IS_A_DIRECTORY
VMK_NOT_EMPTY = _libvswitch.VMK_NOT_EMPTY
VMK_NOT_IMPLEMENTED = _libvswitch.VMK_NOT_IMPLEMENTED
VMK_NO_SIGNAL_HANDLER = _libvswitch.VMK_NO_SIGNAL_HANDLER
VMK_FATAL_SIGNAL_BLOCKED = _libvswitch.VMK_FATAL_SIGNAL_BLOCKED
VMK_NO_ACCESS = _libvswitch.VMK_NO_ACCESS
VMK_NO_PERMISSION = _libvswitch.VMK_NO_PERMISSION
VMK_UNDEFINED_SYSCALL = _libvswitch.VMK_UNDEFINED_SYSCALL
VMK_RESULT_TOO_LARGE = _libvswitch.VMK_RESULT_TOO_LARGE
VMK_VLAN_FILTERED = _libvswitch.VMK_VLAN_FILTERED
VMK_BAD_EXCFRAME = _libvswitch.VMK_BAD_EXCFRAME
VMK_MODULE_NOT_LOADED = _libvswitch.VMK_MODULE_NOT_LOADED
VMK_NO_SUCH_ZOMBIE = _libvswitch.VMK_NO_SUCH_ZOMBIE
VMK_NO_SUCH_CARTEL = _libvswitch.VMK_NO_SUCH_CARTEL
VMK_IS_A_SYMLINK = _libvswitch.VMK_IS_A_SYMLINK
VMK_CROSS_DEVICE_LINK = _libvswitch.VMK_CROSS_DEVICE_LINK
VMK_NOT_A_SOCKET = _libvswitch.VMK_NOT_A_SOCKET
VMK_ILLEGAL_SEEK = _libvswitch.VMK_ILLEGAL_SEEK
VMK_ADDRFAM_UNSUPP = _libvswitch.VMK_ADDRFAM_UNSUPP
VMK_ALREADY_CONNECTED = _libvswitch.VMK_ALREADY_CONNECTED
VMK_DEATH_PENDING = _libvswitch.VMK_DEATH_PENDING
VMK_NO_CPU_ASSIGNMENT = _libvswitch.VMK_NO_CPU_ASSIGNMENT
VMK_CPU_MIN_INVALID = _libvswitch.VMK_CPU_MIN_INVALID
VMK_CPU_MINLIMIT_INVALID = _libvswitch.VMK_CPU_MINLIMIT_INVALID
VMK_CPU_MAX_INVALID = _libvswitch.VMK_CPU_MAX_INVALID
VMK_CPU_SHARES_INVALID = _libvswitch.VMK_CPU_SHARES_INVALID
VMK_CPU_MIN_OVERFLOW = _libvswitch.VMK_CPU_MIN_OVERFLOW
VMK_CPU_MINLIMIT_OVERFLOW = _libvswitch.VMK_CPU_MINLIMIT_OVERFLOW
VMK_CPU_MAX_OVERFLOW = _libvswitch.VMK_CPU_MAX_OVERFLOW
VMK_CPU_MIN_GT_MINLIMIT = _libvswitch.VMK_CPU_MIN_GT_MINLIMIT
VMK_CPU_MIN_GT_MAX = _libvswitch.VMK_CPU_MIN_GT_MAX
VMK_CPU_MINLIMIT_LT_RESERVED = _libvswitch.VMK_CPU_MINLIMIT_LT_RESERVED
VMK_CPU_MAX_LT_RESERVED = _libvswitch.VMK_CPU_MAX_LT_RESERVED
VMK_CPU_ADMIT_FAILED = _libvswitch.VMK_CPU_ADMIT_FAILED
VMK_MEM_MIN_INVALID = _libvswitch.VMK_MEM_MIN_INVALID
VMK_MEM_MINLIMIT_INVALID = _libvswitch.VMK_MEM_MINLIMIT_INVALID
VMK_MEM_MAX_INVALID = _libvswitch.VMK_MEM_MAX_INVALID
VMK_MEM_MIN_OVERFLOW = _libvswitch.VMK_MEM_MIN_OVERFLOW
VMK_MEM_MINLIMIT_OVERFLOW = _libvswitch.VMK_MEM_MINLIMIT_OVERFLOW
VMK_MEM_MAX_OVERFLOW = _libvswitch.VMK_MEM_MAX_OVERFLOW
VMK_MEM_MIN_GT_MINLIMIT = _libvswitch.VMK_MEM_MIN_GT_MINLIMIT
VMK_MEM_MIN_GT_MAX = _libvswitch.VMK_MEM_MIN_GT_MAX
VMK_MEM_MINLIMIT_LT_RESERVED = _libvswitch.VMK_MEM_MINLIMIT_LT_RESERVED
VMK_MEM_MAX_LT_RESERVED = _libvswitch.VMK_MEM_MAX_LT_RESERVED
VMK_MEM_ADMIT_FAILED = _libvswitch.VMK_MEM_ADMIT_FAILED
VMK_NO_SWAP_FILE = _libvswitch.VMK_NO_SWAP_FILE
VMK_BAD_PARAM_COUNT = _libvswitch.VMK_BAD_PARAM_COUNT
VMK_BAD_PARAM_TYPE = _libvswitch.VMK_BAD_PARAM_TYPE
VMK_UNMAP_RETRY = _libvswitch.VMK_UNMAP_RETRY
VMK_INVALID_IOCTL = _libvswitch.VMK_INVALID_IOCTL
VMK_MAPFAULT_RETRY = _libvswitch.VMK_MAPFAULT_RETRY
VMK_EINPROGRESS = _libvswitch.VMK_EINPROGRESS
VMK_ADDR_UNMAPPED = _libvswitch.VMK_ADDR_UNMAPPED
VMK_INVALID_BUDDY_TYPE = _libvswitch.VMK_INVALID_BUDDY_TYPE
VMK_LPAGE_INFO_NOT_FOUND = _libvswitch.VMK_LPAGE_INFO_NOT_FOUND
VMK_LPAGE_INFO_INVALID = _libvswitch.VMK_LPAGE_INFO_INVALID
VMK_SNAPSHOT_DEV = _libvswitch.VMK_SNAPSHOT_DEV
VMK_IN_TRANSITION = _libvswitch.VMK_IN_TRANSITION
VMK_TXN_FULL = _libvswitch.VMK_TXN_FULL
VMK_LOCK_NOT_FREE = _libvswitch.VMK_LOCK_NOT_FREE
VMK_NUM_FILES_EXCEEDED = _libvswitch.VMK_NUM_FILES_EXCEEDED
VMK_MIGRATE_VMX_FAILURE = _libvswitch.VMK_MIGRATE_VMX_FAILURE
VMK_VSI_LIST_OVERFLOW = _libvswitch.VMK_VSI_LIST_OVERFLOW
VMK_INVALID_WORLD = _libvswitch.VMK_INVALID_WORLD
VMK_INVALID_VMM = _libvswitch.VMK_INVALID_VMM
VMK_INVALID_TXN = _libvswitch.VMK_INVALID_TXN
VMK_FS_RETRY_OPERATION = _libvswitch.VMK_FS_RETRY_OPERATION
VMK_VCPU_LIMIT_EXCEEDED = _libvswitch.VMK_VCPU_LIMIT_EXCEEDED
VMK_INVALID_METADATA = _libvswitch.VMK_INVALID_METADATA
VMK_INVALID_PAGE_NUMBER = _libvswitch.VMK_INVALID_PAGE_NUMBER
VMK_NOT_EXEC = _libvswitch.VMK_NOT_EXEC
VMK_NFS_CONNECT_FAILURE = _libvswitch.VMK_NFS_CONNECT_FAILURE
VMK_NFS_MOUNT_NOT_SUPPORTED = _libvswitch.VMK_NFS_MOUNT_NOT_SUPPORTED
VMK_NFS_NFS_NOT_SUPPORTED = _libvswitch.VMK_NFS_NFS_NOT_SUPPORTED
VMK_NFS_MOUNT_DENIED = _libvswitch.VMK_NFS_MOUNT_DENIED
VMK_NFS_MOUNT_NOT_DIR = _libvswitch.VMK_NFS_MOUNT_NOT_DIR
VMK_NFS_BAD_FSINFO = _libvswitch.VMK_NFS_BAD_FSINFO
VMK_NFS_VOLUME_LIMIT_EXCEEDED = _libvswitch.VMK_NFS_VOLUME_LIMIT_EXCEEDED
VMK_NO_MEMORY_NICE = _libvswitch.VMK_NO_MEMORY_NICE
VMK_MIGRATE_PREEMPTIVE_FAIL = _libvswitch.VMK_MIGRATE_PREEMPTIVE_FAIL
VMK_CACHE_MISS = _libvswitch.VMK_CACHE_MISS
VMK_STRESS_INDUCED_ERROR = _libvswitch.VMK_STRESS_INDUCED_ERROR
VMK_TOO_MANY_LOCK_HOLDERS = _libvswitch.VMK_TOO_MANY_LOCK_HOLDERS
VMK_NO_JOURNAL = _libvswitch.VMK_NO_JOURNAL
VMK_RANK_VIOLATION = _libvswitch.VMK_RANK_VIOLATION
VMK_MODULE_FAILED = _libvswitch.VMK_MODULE_FAILED
VMK_NO_MASTER_PTY = _libvswitch.VMK_NO_MASTER_PTY
VMK_NOT_IOABLE = _libvswitch.VMK_NOT_IOABLE
VMK_NO_FREE_INODES = _libvswitch.VMK_NO_FREE_INODES
VMK_NO_MEMORY_FOR_FILEDATA = _libvswitch.VMK_NO_MEMORY_FOR_FILEDATA
VMK_NO_TAR_SPACE = _libvswitch.VMK_NO_TAR_SPACE
VMK_NO_FIFO_READER = _libvswitch.VMK_NO_FIFO_READER
VMK_NO_SUCH_DEVICE = _libvswitch.VMK_NO_SUCH_DEVICE
VMK_MEM_MIN_GT_MEMSIZE = _libvswitch.VMK_MEM_MIN_GT_MEMSIZE
VMK_NO_SUCH_VT = _libvswitch.VMK_NO_SUCH_VT
VMK_TOO_MANY_ELEMENTS = _libvswitch.VMK_TOO_MANY_ELEMENTS
VMK_SHAREDAREA_MISMATCH = _libvswitch.VMK_SHAREDAREA_MISMATCH
VMK_EXEC_FAILURE = _libvswitch.VMK_EXEC_FAILURE
VMK_INVALID_MODULE = _libvswitch.VMK_INVALID_MODULE
VMK_UNALIGNED_ADDRESS = _libvswitch.VMK_UNALIGNED_ADDRESS
VMK_NOT_MAPPED = _libvswitch.VMK_NOT_MAPPED
VMK_NO_MESSAGE_SPACE = _libvswitch.VMK_NO_MESSAGE_SPACE
VMK_EXCEPTION_HANDLER_INVALID = _libvswitch.VMK_EXCEPTION_HANDLER_INVALID
VMK_EXCEPTION_NOT_HANDLED = _libvswitch.VMK_EXCEPTION_NOT_HANDLED
VMK_INVALID_MULTIWRITER_OBJECT = _libvswitch.VMK_INVALID_MULTIWRITER_OBJECT
VMK_STORAGE_RETRY_OPERATION = _libvswitch.VMK_STORAGE_RETRY_OPERATION
VMK_HBA_ERROR = _libvswitch.VMK_HBA_ERROR
VMK_TIMER_INIT_FAILED = _libvswitch.VMK_TIMER_INIT_FAILED
VMK_MODULE_NOT_FOUND = _libvswitch.VMK_MODULE_NOT_FOUND
VMK_NOT_SOCKET_OWNER = _libvswitch.VMK_NOT_SOCKET_OWNER
VMK_VSI_HANDLER_NOT_FOUND = _libvswitch.VMK_VSI_HANDLER_NOT_FOUND
VMK_INVALID_MMAPPROTFLAGS = _libvswitch.VMK_INVALID_MMAPPROTFLAGS
VMK_INVALID_MAPCONTIG_SIZE = _libvswitch.VMK_INVALID_MAPCONTIG_SIZE
VMK_INVALID_MAPCONTIG_MAX = _libvswitch.VMK_INVALID_MAPCONTIG_MAX
VMK_INVALID_MAPCONTIG_FLAG = _libvswitch.VMK_INVALID_MAPCONTIG_FLAG
VMK_NOT_LAZY_MMINFO = _libvswitch.VMK_NOT_LAZY_MMINFO
VMK_MMINFO_WONT_SPLIT = _libvswitch.VMK_MMINFO_WONT_SPLIT
VMK_NO_CACHE_INFO = _libvswitch.VMK_NO_CACHE_INFO
VMK_CANNOT_REMAP_PINNED_MEMORY = _libvswitch.VMK_CANNOT_REMAP_PINNED_MEMORY
VMK_NO_SUCH_CARTELGROUP = _libvswitch.VMK_NO_SUCH_CARTELGROUP
VMK_SPLOCKSTATS_DISABLED = _libvswitch.VMK_SPLOCKSTATS_DISABLED
VMK_BAD_TAR_IMAGE = _libvswitch.VMK_BAD_TAR_IMAGE
VMK_BRANCHED_ALREADY = _libvswitch.VMK_BRANCHED_ALREADY
VMK_NAME_RESERVED_FOR_BRANCH = _libvswitch.VMK_NAME_RESERVED_FOR_BRANCH
VMK_CANNOT_BRANCH_UNLINKED = _libvswitch.VMK_CANNOT_BRANCH_UNLINKED
VMK_MAX_RETRIES_EXCEEDED = _libvswitch.VMK_MAX_RETRIES_EXCEEDED
VMK_OPTLOCK_STOLEN = _libvswitch.VMK_OPTLOCK_STOLEN
VMK_NOT_MMAPABLE = _libvswitch.VMK_NOT_MMAPABLE
VMK_INVALID_CPU_AFFINITY = _libvswitch.VMK_INVALID_CPU_AFFINITY
VMK_DEVICE_NOT_PARTOF_LV = _libvswitch.VMK_DEVICE_NOT_PARTOF_LV
VMK_NO_SPACE = _libvswitch.VMK_NO_SPACE
VMK_VSI_INVALID_NODE_ID = _libvswitch.VMK_VSI_INVALID_NODE_ID
VMK_TOO_MANY_USERS = _libvswitch.VMK_TOO_MANY_USERS
VMK_EALREADY = _libvswitch.VMK_EALREADY
VMK_BUF_TOO_SMALL = _libvswitch.VMK_BUF_TOO_SMALL
VMK_SNAPSHOT_DEV_DISALLOWED = _libvswitch.VMK_SNAPSHOT_DEV_DISALLOWED
VMK_LVM_DEVICE_UNREACHABLE = _libvswitch.VMK_LVM_DEVICE_UNREACHABLE
VMK_CPU_INVALID_RESOURCE_UNITS = _libvswitch.VMK_CPU_INVALID_RESOURCE_UNITS
VMK_MEM_INVALID_RESOURCE_UNITS = _libvswitch.VMK_MEM_INVALID_RESOURCE_UNITS
VMK_ABORTED = _libvswitch.VMK_ABORTED
VMK_MEM_MIN_LT_RESERVED = _libvswitch.VMK_MEM_MIN_LT_RESERVED
VMK_MEM_MIN_LT_CONSUMED = _libvswitch.VMK_MEM_MIN_LT_CONSUMED
VMK_MEM_MAX_LT_CONSUMED = _libvswitch.VMK_MEM_MAX_LT_CONSUMED
VMK_TIMEOUT_RETRY_DEPRECATED = _libvswitch.VMK_TIMEOUT_RETRY_DEPRECATED
VMK_RESERVATION_LOST = _libvswitch.VMK_RESERVATION_LOST
VMK_FS_STALE_METADATA = _libvswitch.VMK_FS_STALE_METADATA
VMK_NO_FCNTL_LOCK = _libvswitch.VMK_NO_FCNTL_LOCK
VMK_NO_FCNTL_LOCK_HOLDER = _libvswitch.VMK_NO_FCNTL_LOCK_HOLDER
VMK_NO_LICENSE = _libvswitch.VMK_NO_LICENSE
VMK_VSI_MODULE_NOT_FOUND = _libvswitch.VMK_VSI_MODULE_NOT_FOUND
VMK_LVM_RETRY_OPERATION = _libvswitch.VMK_LVM_RETRY_OPERATION
VMK_SNAPSHOT_LV_INCOMPLETE = _libvswitch.VMK_SNAPSHOT_LV_INCOMPLETE
VMK_MEDIUM_NOT_FOUND = _libvswitch.VMK_MEDIUM_NOT_FOUND
VMK_MAX_PATHS_CLAIMED = _libvswitch.VMK_MAX_PATHS_CLAIMED
VMK_NOT_MOUNTABLE = _libvswitch.VMK_NOT_MOUNTABLE
VMK_MEMSIZE_GT_MEMSIZELIMIT = _libvswitch.VMK_MEMSIZE_GT_MEMSIZELIMIT
VMK_RECORD_WRITE_ERROR = _libvswitch.VMK_RECORD_WRITE_ERROR
VMK_REPLAY_READ_ERROR = _libvswitch.VMK_REPLAY_READ_ERROR
VMK_REPLAY_TYPE_MISMATCH = _libvswitch.VMK_REPLAY_TYPE_MISMATCH
VMK_REPLAY_DIVERGENCE = _libvswitch.VMK_REPLAY_DIVERGENCE
VMK_FT_NOT_RESPONDING = _libvswitch.VMK_FT_NOT_RESPONDING
VMK_NET_REPLAY_ERROR = _libvswitch.VMK_NET_REPLAY_ERROR
VMK_VOBERR_INVALID_VOBID = _libvswitch.VMK_VOBERR_INVALID_VOBID
VMK_VOBERR_FMT_LIMIT_EXCEEDED = _libvswitch.VMK_VOBERR_FMT_LIMIT_EXCEEDED
VMK_VOBERR_INVALID_FMT_STRING = _libvswitch.VMK_VOBERR_INVALID_FMT_STRING
VMK_VOBERR_INVALID_ATTR = _libvswitch.VMK_VOBERR_INVALID_ATTR
VMK_ELF_CORRUPT = _libvswitch.VMK_ELF_CORRUPT
VMK_EADDRNOTAVAIL = _libvswitch.VMK_EADDRNOTAVAIL
VMK_EDESTADDRREQ = _libvswitch.VMK_EDESTADDRREQ
VMK_LVM_STALE_METADATA = _libvswitch.VMK_LVM_STALE_METADATA
VMK_NO_RPC_TABLE = _libvswitch.VMK_NO_RPC_TABLE
VMK_DUPLICATE_UID = _libvswitch.VMK_DUPLICATE_UID
VMK_UNRESOLVED_SYMBOL = _libvswitch.VMK_UNRESOLVED_SYMBOL
VMK_DEVICE_NOT_OWNED = _libvswitch.VMK_DEVICE_NOT_OWNED
VMK_DEVICE_NOT_NAMED = _libvswitch.VMK_DEVICE_NOT_NAMED
VMK_EPROTONOSUPPORT = _libvswitch.VMK_EPROTONOSUPPORT
VMK_EOPNOTSUPP = _libvswitch.VMK_EOPNOTSUPP
VMK_UNDEFINED_VMKCALL = _libvswitch.VMK_UNDEFINED_VMKCALL
VMK_MIGRATE_MAX_DOWNTIME_EXCEEDED = _libvswitch.VMK_MIGRATE_MAX_DOWNTIME_EXCEEDED
VMK_LOCK_EXISTS = _libvswitch.VMK_LOCK_EXISTS
VMK_MIGRATE_PRECOPY_NO_FORWARD_PROGRESS = _libvswitch.VMK_MIGRATE_PRECOPY_NO_FORWARD_PROGRESS
VMK_UID_CHANGED = _libvswitch.VMK_UID_CHANGED
VMK_VMOTION_CONNECT_FAILED = _libvswitch.VMK_VMOTION_CONNECT_FAILED
VMK_NO_MIGRATION_IN_PROGRESS = _libvswitch.VMK_NO_MIGRATION_IN_PROGRESS
VMK_EXEC_FILE_BUSY = _libvswitch.VMK_EXEC_FILE_BUSY
VMK_FS_TIMEOUT_RETRY = _libvswitch.VMK_FS_TIMEOUT_RETRY
VMK_COW_TIMEOUT_RETRY = _libvswitch.VMK_COW_TIMEOUT_RETRY
VMK_FS_LOCKSTATE_IN_TRANSITION_DEPRECATED = _libvswitch.VMK_FS_LOCKSTATE_IN_TRANSITION_DEPRECATED
VMK_FS_LOCK_LOST = _libvswitch.VMK_FS_LOCK_LOST
VMK_NO_SPACE_ON_DEVICE = _libvswitch.VMK_NO_SPACE_ON_DEVICE
VMK_EOVERFLOW = _libvswitch.VMK_EOVERFLOW
VMK_MEM_SHARES_INVALID = _libvswitch.VMK_MEM_SHARES_INVALID
VMK_LVM_INCONSISTENT_LOCKLESSOP = _libvswitch.VMK_LVM_INCONSISTENT_LOCKLESSOP
VMK_INVALID_SECURITY_LABEL = _libvswitch.VMK_INVALID_SECURITY_LABEL
VMK_ACCESS_DENIED = _libvswitch.VMK_ACCESS_DENIED
VMK_WORK_COMPLETED = _libvswitch.VMK_WORK_COMPLETED
VMK_WORK_RUNNING = _libvswitch.VMK_WORK_RUNNING
VMK_WORK_PENDING = _libvswitch.VMK_WORK_PENDING
VMK_WORK_INVALID = _libvswitch.VMK_WORK_INVALID
VMK_VOBERR_OVERFLOW = _libvswitch.VMK_VOBERR_OVERFLOW
VMK_VOBERR_INVALID_CONTEXT = _libvswitch.VMK_VOBERR_INVALID_CONTEXT
VMK_VOBERR_LOCK_CONFLICT = _libvswitch.VMK_VOBERR_LOCK_CONFLICT
VMK_RETRY = _libvswitch.VMK_RETRY
VMK_NO_MODULE_HEAP = _libvswitch.VMK_NO_MODULE_HEAP
VMK_REMOTE_PAGE_FAULT_FAILURE = _libvswitch.VMK_REMOTE_PAGE_FAULT_FAILURE
VMK_VSI_DATA_LENGTH_MISMATCH = _libvswitch.VMK_VSI_DATA_LENGTH_MISMATCH
VMK_MAPPING_FAILED = _libvswitch.VMK_MAPPING_FAILED
VMK_ATS_MISCOMPARE = _libvswitch.VMK_ATS_MISCOMPARE
VMK_NO_BUFFERSPACE = _libvswitch.VMK_NO_BUFFERSPACE
VMK_FT_NOT_RUNNING = _libvswitch.VMK_FT_NOT_RUNNING
VMK_LICENSE_MISMATCH = _libvswitch.VMK_LICENSE_MISMATCH
VMK_ELF_UNKNOWN_RELOCATIONS = _libvswitch.VMK_ELF_UNKNOWN_RELOCATIONS
VMK_MESSAGE_TOO_LONG = _libvswitch.VMK_MESSAGE_TOO_LONG
VMK_INVALID_NAMESPACE = _libvswitch.VMK_INVALID_NAMESPACE
VMK_SHUTTING_DOWN = _libvswitch.VMK_SHUTTING_DOWN
VMK_SKIPPED_FREE = _libvswitch.VMK_SKIPPED_FREE
VMK_VMFS_ABORTED = _libvswitch.VMK_VMFS_ABORTED
VMK_NO_WRITE_ON_TARDISKS = _libvswitch.VMK_NO_WRITE_ON_TARDISKS
VMK_SVM_IO_RETRY = _libvswitch.VMK_SVM_IO_RETRY
VMK_MODULE_NO_LICENSE = _libvswitch.VMK_MODULE_NO_LICENSE
VMK_MODULE_UNKNOWN_LICENSE = _libvswitch.VMK_MODULE_UNKNOWN_LICENSE
VMK_PERM_DEV_LOSS = _libvswitch.VMK_PERM_DEV_LOSS
VMK_SE_IO_RETRY = _libvswitch.VMK_SE_IO_RETRY
VMK_BAD_ADDR_SPACE = _libvswitch.VMK_BAD_ADDR_SPACE
VMK_DMA_MAPPING_FAILED = _libvswitch.VMK_DMA_MAPPING_FAILED
VMK_RESERVATION_GT_LIMIT = _libvswitch.VMK_RESERVATION_GT_LIMIT
VMK_MODULE_NONAMESPACE = _libvswitch.VMK_MODULE_NONAMESPACE
VMK_FS_OBJECT_UNLINKED = _libvswitch.VMK_FS_OBJECT_UNLINKED
VMK_HBR_WIRE_INSTANCE_ABORTED = _libvswitch.VMK_HBR_WIRE_INSTANCE_ABORTED
VMK_HBR_WIRE_NEED_FULL_SYNC = _libvswitch.VMK_HBR_WIRE_NEED_FULL_SYNC
VMK_HBR_WIRE_DISK_SET_MISMATCH = _libvswitch.VMK_HBR_WIRE_DISK_SET_MISMATCH
VMK_HBR_WIRE_REQUEST_CHECKSUM_MISMATCH = _libvswitch.VMK_HBR_WIRE_REQUEST_CHECKSUM_MISMATCH
VMK_HBR_WIRE_RESPONSE_CHECKSUM_MISMATCH = _libvswitch.VMK_HBR_WIRE_RESPONSE_CHECKSUM_MISMATCH
VMK_HBR_WIRE_GROUP_REMOVED = _libvswitch.VMK_HBR_WIRE_GROUP_REMOVED
VMK_HBR_WIRE_GROUP_SESSION_REVOKED = _libvswitch.VMK_HBR_WIRE_GROUP_SESSION_REVOKED
VMK_HBR_WIRE_PROTOCOL_CORRUPTED = _libvswitch.VMK_HBR_WIRE_PROTOCOL_CORRUPTED
VMK_PORTSET_HANDLE_NOT_MUTABLE = _libvswitch.VMK_PORTSET_HANDLE_NOT_MUTABLE
VMK_SUSPEND_IO = _libvswitch.VMK_SUSPEND_IO
VMK_NO_WORKING_PATHS = _libvswitch.VMK_NO_WORKING_PATHS
VMK_EPROTOTYPE = _libvswitch.VMK_EPROTOTYPE
VMK_MODULE_CONSUMED_RESOURCE_COUNT_NOT_ZERO = _libvswitch.VMK_MODULE_CONSUMED_RESOURCE_COUNT_NOT_ZERO
VMK_HBR_SERVER_DOES_NOT_SUPPORT_REQUEST = _libvswitch.VMK_HBR_SERVER_DOES_NOT_SUPPORT_REQUEST
VMK_STALE_FILEHANDLE = _libvswitch.VMK_STALE_FILEHANDLE
VMK_VVOL_UNBOUND = _libvswitch.VMK_VVOL_UNBOUND
VMK_DEVICE_NOT_READY_FAIL_OPEN = _libvswitch.VMK_DEVICE_NOT_READY_FAIL_OPEN
VMK_NOT_THIS_DEVICE = _libvswitch.VMK_NOT_THIS_DEVICE
VMK_IGNORE = _libvswitch.VMK_IGNORE
VMK_OBJECT_DESTROYED = _libvswitch.VMK_OBJECT_DESTROYED
VMK_VVOL_PE_NOT_READY = _libvswitch.VMK_VVOL_PE_NOT_READY
VMK_SCSI_PI_GUARD_ERROR = _libvswitch.VMK_SCSI_PI_GUARD_ERROR
VMK_SCSI_PI_REF_ERROR = _libvswitch.VMK_SCSI_PI_REF_ERROR
VMK_RES_META_STALE = _libvswitch.VMK_RES_META_STALE
VMK_NOT_PINNED = _libvswitch.VMK_NOT_PINNED
VMK_BAD_SWAP_SCOPE = _libvswitch.VMK_BAD_SWAP_SCOPE
VMK_CONSUMED_GT_ZERO = _libvswitch.VMK_CONSUMED_GT_ZERO
VMK_LOCK_HELD_BY_ZOMBIE_TXN = _libvswitch.VMK_LOCK_HELD_BY_ZOMBIE_TXN
VMK_HBR_WIRE_FILE_IDENTICAL = _libvswitch.VMK_HBR_WIRE_FILE_IDENTICAL
VMK_VOL_ALREADY_MOUNTED = _libvswitch.VMK_VOL_ALREADY_MOUNTED
VMK_NO_VOLUMES = _libvswitch.VMK_NO_VOLUMES
VMK_SB_NOT_FOUND = _libvswitch.VMK_SB_NOT_FOUND
VMK_NO_PMEM = _libvswitch.VMK_NO_PMEM
VMK_OTHER = _libvswitch.VMK_OTHER
VMK_CANNOT_SHRINK = _libvswitch.VMK_CANNOT_SHRINK
VMK_NOT_A_BASE = _libvswitch.VMK_NOT_A_BASE
VMK_HAS_SNAPSHOTS = _libvswitch.VMK_HAS_SNAPSHOTS
VMK_LOCK_DROPPED = _libvswitch.VMK_LOCK_DROPPED
VMK_PMEM_CORRUPTED = _libvswitch.VMK_PMEM_CORRUPTED
VMK_PMEM_DATA_CORRUPTED = _libvswitch.VMK_PMEM_DATA_CORRUPTED
VMK_LAST_ERR = _libvswitch.VMK_LAST_ERR
VMK_GENERIC_LINUX_ERROR = _libvswitch.VMK_GENERIC_LINUX_ERROR
class vmk_String(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_String, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_String, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bufferSize"] = _libvswitch.vmk_String_bufferSize_set
    __swig_getmethods__["bufferSize"] = _libvswitch.vmk_String_bufferSize_get
    if _newclass:bufferSize = _swig_property(_libvswitch.vmk_String_bufferSize_get, _libvswitch.vmk_String_bufferSize_set)
    __swig_setmethods__["stringLength"] = _libvswitch.vmk_String_stringLength_set
    __swig_getmethods__["stringLength"] = _libvswitch.vmk_String_stringLength_get
    if _newclass:stringLength = _swig_property(_libvswitch.vmk_String_stringLength_get, _libvswitch.vmk_String_stringLength_set)
    __swig_setmethods__["buffer"] = _libvswitch.vmk_String_buffer_set
    __swig_getmethods__["buffer"] = _libvswitch.vmk_String_buffer_get
    if _newclass:buffer = _swig_property(_libvswitch.vmk_String_buffer_get, _libvswitch.vmk_String_buffer_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_String()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_String
    __del__ = lambda self : None;
vmk_String_swigregister = _libvswitch.vmk_String_swigregister
vmk_String_swigregister(vmk_String)

VMK_IOCTL_CALLER_64 = _libvswitch.VMK_IOCTL_CALLER_64
VMK_IOCTL_CALLER_32 = _libvswitch.VMK_IOCTL_CALLER_32
VMK_WDT_OPT_FORCE_IPI_DISPATCH = _libvswitch.VMK_WDT_OPT_FORCE_IPI_DISPATCH
VMK_WDT_OPT_NON_INTERFERING = _libvswitch.VMK_WDT_OPT_NON_INTERFERING
VMK_WDT_OPT_ACTION_AFFINITY = _libvswitch.VMK_WDT_OPT_ACTION_AFFINITY
VMK_WDT_OPT_ENABLED_VMKSTATS = _libvswitch.VMK_WDT_OPT_ENABLED_VMKSTATS
VMK_WDT_RELEASE = _libvswitch.VMK_WDT_RELEASE
VMK_WDT_SUSPEND = _libvswitch.VMK_WDT_SUSPEND
VMK_WDT_READY = _libvswitch.VMK_WDT_READY
class vmk_WorldletRunData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_WorldletRunData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_WorldletRunData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _libvswitch.vmk_WorldletRunData_state_set
    __swig_getmethods__["state"] = _libvswitch.vmk_WorldletRunData_state_get
    if _newclass:state = _swig_property(_libvswitch.vmk_WorldletRunData_state_get, _libvswitch.vmk_WorldletRunData_state_set)
    __swig_setmethods__["userData1"] = _libvswitch.vmk_WorldletRunData_userData1_set
    __swig_getmethods__["userData1"] = _libvswitch.vmk_WorldletRunData_userData1_get
    if _newclass:userData1 = _swig_property(_libvswitch.vmk_WorldletRunData_userData1_get, _libvswitch.vmk_WorldletRunData_userData1_set)
    __swig_setmethods__["userData2"] = _libvswitch.vmk_WorldletRunData_userData2_set
    __swig_getmethods__["userData2"] = _libvswitch.vmk_WorldletRunData_userData2_get
    if _newclass:userData2 = _swig_property(_libvswitch.vmk_WorldletRunData_userData2_get, _libvswitch.vmk_WorldletRunData_userData2_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_WorldletRunData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_WorldletRunData
    __del__ = lambda self : None;
vmk_WorldletRunData_swigregister = _libvswitch.vmk_WorldletRunData_swigregister
vmk_WorldletRunData_swigregister(vmk_WorldletRunData)


def Panic(*args) -> "void" :
  return _libvswitch.Panic(*args)
Panic = _libvswitch.Panic
class vmk_ListLinks(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_ListLinks, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_ListLinks, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prevPtr"] = _libvswitch.vmk_ListLinks_prevPtr_set
    __swig_getmethods__["prevPtr"] = _libvswitch.vmk_ListLinks_prevPtr_get
    if _newclass:prevPtr = _swig_property(_libvswitch.vmk_ListLinks_prevPtr_get, _libvswitch.vmk_ListLinks_prevPtr_set)
    __swig_setmethods__["nextPtr"] = _libvswitch.vmk_ListLinks_nextPtr_set
    __swig_getmethods__["nextPtr"] = _libvswitch.vmk_ListLinks_nextPtr_get
    if _newclass:nextPtr = _swig_property(_libvswitch.vmk_ListLinks_nextPtr_get, _libvswitch.vmk_ListLinks_nextPtr_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_ListLinks()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_ListLinks
    __del__ = lambda self : None;
vmk_ListLinks_swigregister = _libvswitch.vmk_ListLinks_swigregister
vmk_ListLinks_swigregister(vmk_ListLinks)
cvar = _libvswitch.cvar
vmk_ModuleCurrentID = cvar.vmk_ModuleCurrentID

VMK_MISC_NAME_MAX = _libvswitch.VMK_MISC_NAME_MAX
class vmk_Name(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_Name, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_Name, name)
    __swig_setmethods__["string"] = _libvswitch.vmk_Name_string_set
    __swig_getmethods__["string"] = _libvswitch.vmk_Name_string_get
    if _newclass:string = _swig_property(_libvswitch.vmk_Name_string_get, _libvswitch.vmk_Name_string_set)
    def __repr__(self) -> "char const *" : return _libvswitch.vmk_Name___repr__(self)
    def __init__(self): 
        this = _libvswitch.new_vmk_Name()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_Name
    __del__ = lambda self : None;
vmk_Name_swigregister = _libvswitch.vmk_Name_swigregister
vmk_Name_swigregister(vmk_Name)

VMK_MGMT_MAX_CALLBACK_PARMS = _libvswitch.VMK_MGMT_MAX_CALLBACK_PARMS
VMK_MGMT_RESERVED_CALLBACKS = _libvswitch.VMK_MGMT_RESERVED_CALLBACKS
VMK_MGMT_KEY_TYPE_LONG = _libvswitch.VMK_MGMT_KEY_TYPE_LONG
VMK_MGMT_KEY_TYPE_STRING = _libvswitch.VMK_MGMT_KEY_TYPE_STRING
VMK_MGMT_KEY_STRING_MAXLEN = _libvswitch.VMK_MGMT_KEY_STRING_MAXLEN
VMK_MGMT_MAX_KEYS_PER_INSTANCE = _libvswitch.VMK_MGMT_MAX_KEYS_PER_INSTANCE
VMK_MGMT_MAX_INSTANCES = _libvswitch.VMK_MGMT_MAX_INSTANCES
VMK_MGMT_CALLBACK_KERNEL = _libvswitch.VMK_MGMT_CALLBACK_KERNEL
VMK_MGMT_CALLBACK_USER = _libvswitch.VMK_MGMT_CALLBACK_USER
VMK_MGMT_PARMTYPE_IN = _libvswitch.VMK_MGMT_PARMTYPE_IN
VMK_MGMT_PARMTYPE_OUT = _libvswitch.VMK_MGMT_PARMTYPE_OUT
VMK_MGMT_PARMTYPE_INOUT = _libvswitch.VMK_MGMT_PARMTYPE_INOUT
VMK_MGMT_PARMTYPE_VECTOR_IN = _libvswitch.VMK_MGMT_PARMTYPE_VECTOR_IN
VMK_MGMT_PARMTYPE_VECTOR_OUT = _libvswitch.VMK_MGMT_PARMTYPE_VECTOR_OUT
VMK_MGMT_PARMTYPE_VECTOR_INOUT = _libvswitch.VMK_MGMT_PARMTYPE_VECTOR_INOUT
class vmk_MgmtCallbackInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_MgmtCallbackInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_MgmtCallbackInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["location"] = _libvswitch.vmk_MgmtCallbackInfo_location_set
    __swig_getmethods__["location"] = _libvswitch.vmk_MgmtCallbackInfo_location_get
    if _newclass:location = _swig_property(_libvswitch.vmk_MgmtCallbackInfo_location_get, _libvswitch.vmk_MgmtCallbackInfo_location_set)
    __swig_setmethods__["callback"] = _libvswitch.vmk_MgmtCallbackInfo_callback_set
    __swig_getmethods__["callback"] = _libvswitch.vmk_MgmtCallbackInfo_callback_get
    if _newclass:callback = _swig_property(_libvswitch.vmk_MgmtCallbackInfo_callback_get, _libvswitch.vmk_MgmtCallbackInfo_callback_set)
    __swig_setmethods__["synchronous"] = _libvswitch.vmk_MgmtCallbackInfo_synchronous_set
    __swig_getmethods__["synchronous"] = _libvswitch.vmk_MgmtCallbackInfo_synchronous_get
    if _newclass:synchronous = _swig_property(_libvswitch.vmk_MgmtCallbackInfo_synchronous_get, _libvswitch.vmk_MgmtCallbackInfo_synchronous_set)
    __swig_setmethods__["numParms"] = _libvswitch.vmk_MgmtCallbackInfo_numParms_set
    __swig_getmethods__["numParms"] = _libvswitch.vmk_MgmtCallbackInfo_numParms_get
    if _newclass:numParms = _swig_property(_libvswitch.vmk_MgmtCallbackInfo_numParms_get, _libvswitch.vmk_MgmtCallbackInfo_numParms_set)
    __swig_setmethods__["parmSizes"] = _libvswitch.vmk_MgmtCallbackInfo_parmSizes_set
    __swig_getmethods__["parmSizes"] = _libvswitch.vmk_MgmtCallbackInfo_parmSizes_get
    if _newclass:parmSizes = _swig_property(_libvswitch.vmk_MgmtCallbackInfo_parmSizes_get, _libvswitch.vmk_MgmtCallbackInfo_parmSizes_set)
    __swig_setmethods__["parmTypes"] = _libvswitch.vmk_MgmtCallbackInfo_parmTypes_set
    __swig_getmethods__["parmTypes"] = _libvswitch.vmk_MgmtCallbackInfo_parmTypes_get
    if _newclass:parmTypes = _swig_property(_libvswitch.vmk_MgmtCallbackInfo_parmTypes_get, _libvswitch.vmk_MgmtCallbackInfo_parmTypes_set)
    __swig_setmethods__["callbackId"] = _libvswitch.vmk_MgmtCallbackInfo_callbackId_set
    __swig_getmethods__["callbackId"] = _libvswitch.vmk_MgmtCallbackInfo_callbackId_get
    if _newclass:callbackId = _swig_property(_libvswitch.vmk_MgmtCallbackInfo_callbackId_get, _libvswitch.vmk_MgmtCallbackInfo_callbackId_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_MgmtCallbackInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_MgmtCallbackInfo
    __del__ = lambda self : None;
vmk_MgmtCallbackInfo_swigregister = _libvswitch.vmk_MgmtCallbackInfo_swigregister
vmk_MgmtCallbackInfo_swigregister(vmk_MgmtCallbackInfo)

class vmk_MgmtApiSignature(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_MgmtApiSignature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_MgmtApiSignature, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _libvswitch.vmk_MgmtApiSignature_version_set
    __swig_getmethods__["version"] = _libvswitch.vmk_MgmtApiSignature_version_get
    if _newclass:version = _swig_property(_libvswitch.vmk_MgmtApiSignature_version_get, _libvswitch.vmk_MgmtApiSignature_version_set)
    __swig_setmethods__["name"] = _libvswitch.vmk_MgmtApiSignature_name_set
    __swig_getmethods__["name"] = _libvswitch.vmk_MgmtApiSignature_name_get
    if _newclass:name = _swig_property(_libvswitch.vmk_MgmtApiSignature_name_get, _libvswitch.vmk_MgmtApiSignature_name_set)
    __swig_setmethods__["vendor"] = _libvswitch.vmk_MgmtApiSignature_vendor_set
    __swig_getmethods__["vendor"] = _libvswitch.vmk_MgmtApiSignature_vendor_get
    if _newclass:vendor = _swig_property(_libvswitch.vmk_MgmtApiSignature_vendor_get, _libvswitch.vmk_MgmtApiSignature_vendor_set)
    __swig_setmethods__["numCallbacks"] = _libvswitch.vmk_MgmtApiSignature_numCallbacks_set
    __swig_getmethods__["numCallbacks"] = _libvswitch.vmk_MgmtApiSignature_numCallbacks_get
    if _newclass:numCallbacks = _swig_property(_libvswitch.vmk_MgmtApiSignature_numCallbacks_get, _libvswitch.vmk_MgmtApiSignature_numCallbacks_set)
    __swig_setmethods__["callbacks"] = _libvswitch.vmk_MgmtApiSignature_callbacks_set
    __swig_getmethods__["callbacks"] = _libvswitch.vmk_MgmtApiSignature_callbacks_get
    if _newclass:callbacks = _swig_property(_libvswitch.vmk_MgmtApiSignature_callbacks_get, _libvswitch.vmk_MgmtApiSignature_callbacks_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_MgmtApiSignature()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_MgmtApiSignature
    __del__ = lambda self : None;
vmk_MgmtApiSignature_swigregister = _libvswitch.vmk_MgmtApiSignature_swigregister
vmk_MgmtApiSignature_swigregister(vmk_MgmtApiSignature)

class vmk_MgmtVectorParm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_MgmtVectorParm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_MgmtVectorParm, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _libvswitch.vmk_MgmtVectorParm_length_set
    __swig_getmethods__["length"] = _libvswitch.vmk_MgmtVectorParm_length_get
    if _newclass:length = _swig_property(_libvswitch.vmk_MgmtVectorParm_length_get, _libvswitch.vmk_MgmtVectorParm_length_set)
    __swig_setmethods__["dataPtr"] = _libvswitch.vmk_MgmtVectorParm_dataPtr_set
    __swig_getmethods__["dataPtr"] = _libvswitch.vmk_MgmtVectorParm_dataPtr_get
    if _newclass:dataPtr = _swig_property(_libvswitch.vmk_MgmtVectorParm_dataPtr_get, _libvswitch.vmk_MgmtVectorParm_dataPtr_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_MgmtVectorParm()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_MgmtVectorParm
    __del__ = lambda self : None;
vmk_MgmtVectorParm_swigregister = _libvswitch.vmk_MgmtVectorParm_swigregister
vmk_MgmtVectorParm_swigregister(vmk_MgmtVectorParm)

class vmk_MgmtInstances(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_MgmtInstances, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_MgmtInstances, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numInstances"] = _libvswitch.vmk_MgmtInstances_numInstances_set
    __swig_getmethods__["numInstances"] = _libvswitch.vmk_MgmtInstances_numInstances_get
    if _newclass:numInstances = _swig_property(_libvswitch.vmk_MgmtInstances_numInstances_get, _libvswitch.vmk_MgmtInstances_numInstances_set)
    __swig_setmethods__["instanceIds"] = _libvswitch.vmk_MgmtInstances_instanceIds_set
    __swig_getmethods__["instanceIds"] = _libvswitch.vmk_MgmtInstances_instanceIds_get
    if _newclass:instanceIds = _swig_property(_libvswitch.vmk_MgmtInstances_instanceIds_get, _libvswitch.vmk_MgmtInstances_instanceIds_set)
    __swig_setmethods__["instanceNames"] = _libvswitch.vmk_MgmtInstances_instanceNames_set
    __swig_getmethods__["instanceNames"] = _libvswitch.vmk_MgmtInstances_instanceNames_get
    if _newclass:instanceNames = _swig_property(_libvswitch.vmk_MgmtInstances_instanceNames_get, _libvswitch.vmk_MgmtInstances_instanceNames_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_MgmtInstances()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_MgmtInstances
    __del__ = lambda self : None;
vmk_MgmtInstances_swigregister = _libvswitch.vmk_MgmtInstances_swigregister
vmk_MgmtInstances_swigregister(vmk_MgmtInstances)

VMK_INTR_TRIGGER_LEVEL = _libvswitch.VMK_INTR_TRIGGER_LEVEL
VMK_INTR_TRIGGER_EDGE = _libvswitch.VMK_INTR_TRIGGER_EDGE
VMK_INTR_POLARITY_LOW = _libvswitch.VMK_INTR_POLARITY_LOW
VMK_INTR_POLARITY_HIGH = _libvswitch.VMK_INTR_POLARITY_HIGH
class vmk_IntrInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_IntrInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_IntrInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["trigger"] = _libvswitch.vmk_IntrInfo_trigger_set
    __swig_getmethods__["trigger"] = _libvswitch.vmk_IntrInfo_trigger_get
    if _newclass:trigger = _swig_property(_libvswitch.vmk_IntrInfo_trigger_get, _libvswitch.vmk_IntrInfo_trigger_set)
    __swig_setmethods__["polarity"] = _libvswitch.vmk_IntrInfo_polarity_set
    __swig_getmethods__["polarity"] = _libvswitch.vmk_IntrInfo_polarity_get
    if _newclass:polarity = _swig_property(_libvswitch.vmk_IntrInfo_polarity_get, _libvswitch.vmk_IntrInfo_polarity_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_IntrInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_IntrInfo
    __del__ = lambda self : None;
vmk_IntrInfo_swigregister = _libvswitch.vmk_IntrInfo_swigregister
vmk_IntrInfo_swigregister(vmk_IntrInfo)

VMK_ETH_ADDR_FMT_STR = _libvswitch.VMK_ETH_ADDR_FMT_STR
VMK_IPV4_ADDR_FMT_STR = _libvswitch.VMK_IPV4_ADDR_FMT_STR
VMK_IPV6_ADDR_FMT_STR = _libvswitch.VMK_IPV6_ADDR_FMT_STR
VMK_ETH_TYPE_IPV4 = _libvswitch.VMK_ETH_TYPE_IPV4
VMK_ETH_TYPE_ARP = _libvswitch.VMK_ETH_TYPE_ARP
VMK_ETH_TYPE_CDP = _libvswitch.VMK_ETH_TYPE_CDP
VMK_ETH_TYPE_TRILL = _libvswitch.VMK_ETH_TYPE_TRILL
VMK_ETH_TYPE_TRANSPARENT_ETH = _libvswitch.VMK_ETH_TYPE_TRANSPARENT_ETH
VMK_ETH_TYPE_RARP = _libvswitch.VMK_ETH_TYPE_RARP
VMK_ETH_TYPE_ATALK = _libvswitch.VMK_ETH_TYPE_ATALK
VMK_ETH_TYPE_AARP = _libvswitch.VMK_ETH_TYPE_AARP
VMK_ETH_TYPE_VLAN = _libvswitch.VMK_ETH_TYPE_VLAN
VMK_ETH_TYPE_IPX_ALT = _libvswitch.VMK_ETH_TYPE_IPX_ALT
VMK_ETH_TYPE_IPX = _libvswitch.VMK_ETH_TYPE_IPX
VMK_ETH_TYPE_SNMP = _libvswitch.VMK_ETH_TYPE_SNMP
VMK_ETH_TYPE_IPV6 = _libvswitch.VMK_ETH_TYPE_IPV6
VMK_ETH_TYPE_SLOW = _libvswitch.VMK_ETH_TYPE_SLOW
VMK_ETH_TYPE_MPLS_UNICAST = _libvswitch.VMK_ETH_TYPE_MPLS_UNICAST
VMK_ETH_TYPE_MPLS_MULTICAST = _libvswitch.VMK_ETH_TYPE_MPLS_MULTICAST
VMK_ETH_TYPE_PPPOE_DISCOVERY = _libvswitch.VMK_ETH_TYPE_PPPOE_DISCOVERY
VMK_ETH_TYPE_PPPOE_SESSION = _libvswitch.VMK_ETH_TYPE_PPPOE_SESSION
VMK_ETH_TYPE_JUMBO = _libvswitch.VMK_ETH_TYPE_JUMBO
VMK_ETH_TYPE_PROVIDER_BRIDGING = _libvswitch.VMK_ETH_TYPE_PROVIDER_BRIDGING
VMK_ETH_TYPE_LLDP = _libvswitch.VMK_ETH_TYPE_LLDP
VMK_ETH_TYPE_AKIMBI = _libvswitch.VMK_ETH_TYPE_AKIMBI
VMK_ETH_TYPE_FCOE = _libvswitch.VMK_ETH_TYPE_FCOE
VMK_ETH_TYPE_FCOE_INIT = _libvswitch.VMK_ETH_TYPE_FCOE_INIT
VMK_ETH_TYPE_VMWARE = _libvswitch.VMK_ETH_TYPE_VMWARE
VMK_ETH_TYPE_QINQ = _libvswitch.VMK_ETH_TYPE_QINQ
VMK_ETH_TYPE_DVFILTER = _libvswitch.VMK_ETH_TYPE_DVFILTER
VMK_ETH_TYPE_IPV4_NBO = _libvswitch.VMK_ETH_TYPE_IPV4_NBO
VMK_ETH_TYPE_ARP_NBO = _libvswitch.VMK_ETH_TYPE_ARP_NBO
VMK_ETH_TYPE_CDP_NBO = _libvswitch.VMK_ETH_TYPE_CDP_NBO
VMK_ETH_TYPE_TRILL_NBO = _libvswitch.VMK_ETH_TYPE_TRILL_NBO
VMK_ETH_TYPE_TRANSPARENT_ETH_NBO = _libvswitch.VMK_ETH_TYPE_TRANSPARENT_ETH_NBO
VMK_ETH_TYPE_RARP_NBO = _libvswitch.VMK_ETH_TYPE_RARP_NBO
VMK_ETH_TYPE_ATALK_NBO = _libvswitch.VMK_ETH_TYPE_ATALK_NBO
VMK_ETH_TYPE_AARP_NBO = _libvswitch.VMK_ETH_TYPE_AARP_NBO
VMK_ETH_TYPE_VLAN_NBO = _libvswitch.VMK_ETH_TYPE_VLAN_NBO
VMK_ETH_TYPE_IPX_ALT_NBO = _libvswitch.VMK_ETH_TYPE_IPX_ALT_NBO
VMK_ETH_TYPE_IPX_NBO = _libvswitch.VMK_ETH_TYPE_IPX_NBO
VMK_ETH_TYPE_SNMP_NBO = _libvswitch.VMK_ETH_TYPE_SNMP_NBO
VMK_ETH_TYPE_IPV6_NBO = _libvswitch.VMK_ETH_TYPE_IPV6_NBO
VMK_ETH_TYPE_SLOW_NBO = _libvswitch.VMK_ETH_TYPE_SLOW_NBO
VMK_ETH_TYPE_MPLS_UNICAST_NBO = _libvswitch.VMK_ETH_TYPE_MPLS_UNICAST_NBO
VMK_ETH_TYPE_MPLS_MULTICAST_NBO = _libvswitch.VMK_ETH_TYPE_MPLS_MULTICAST_NBO
VMK_ETH_TYPE_PPPOE_DISCOVERY_NBO = _libvswitch.VMK_ETH_TYPE_PPPOE_DISCOVERY_NBO
VMK_ETH_TYPE_PPPOE_SESSION_NBO = _libvswitch.VMK_ETH_TYPE_PPPOE_SESSION_NBO
VMK_ETH_TYPE_JUMBO_NBO = _libvswitch.VMK_ETH_TYPE_JUMBO_NBO
VMK_ETH_TYPE_PROVIDER_BRIDGING_NBO = _libvswitch.VMK_ETH_TYPE_PROVIDER_BRIDGING_NBO
VMK_ETH_TYPE_LLDP_NBO = _libvswitch.VMK_ETH_TYPE_LLDP_NBO
VMK_ETH_TYPE_AKIMBI_NBO = _libvswitch.VMK_ETH_TYPE_AKIMBI_NBO
VMK_ETH_TYPE_FCOE_NBO = _libvswitch.VMK_ETH_TYPE_FCOE_NBO
VMK_ETH_TYPE_FCOE_INIT_NBO = _libvswitch.VMK_ETH_TYPE_FCOE_INIT_NBO
VMK_ETH_TYPE_VMWARE_NBO = _libvswitch.VMK_ETH_TYPE_VMWARE_NBO
VMK_ETH_TYPE_QINQ_NBO = _libvswitch.VMK_ETH_TYPE_QINQ_NBO
VMK_ETH_TYPE_DVFILTER_NBO = _libvswitch.VMK_ETH_TYPE_DVFILTER_NBO
VMK_VLAN_PRIORITY_MINIMUM = _libvswitch.VMK_VLAN_PRIORITY_MINIMUM
VMK_VLAN_PRIORITY_BE = _libvswitch.VMK_VLAN_PRIORITY_BE
VMK_VLAN_PRIORITY_BEST_EFFORT = _libvswitch.VMK_VLAN_PRIORITY_BEST_EFFORT
VMK_VLAN_PRIORITY_BK = _libvswitch.VMK_VLAN_PRIORITY_BK
VMK_VLAN_PRIORITY_BACKGROUND = _libvswitch.VMK_VLAN_PRIORITY_BACKGROUND
VMK_VLAN_PRIORITY_EE = _libvswitch.VMK_VLAN_PRIORITY_EE
VMK_VLAN_PRIORITY_EXCELLENT_EFFORT = _libvswitch.VMK_VLAN_PRIORITY_EXCELLENT_EFFORT
VMK_VLAN_PRIORITY_CA = _libvswitch.VMK_VLAN_PRIORITY_CA
VMK_VLAN_PRIORITY_CRITICAL_APPS = _libvswitch.VMK_VLAN_PRIORITY_CRITICAL_APPS
VMK_VLAN_PRIORITY_VI = _libvswitch.VMK_VLAN_PRIORITY_VI
VMK_VLAN_PRIORITY_VIDEO = _libvswitch.VMK_VLAN_PRIORITY_VIDEO
VMK_VLAN_PRIORITY_VO = _libvswitch.VMK_VLAN_PRIORITY_VO
VMK_VLAN_PRIORITY_VOICE = _libvswitch.VMK_VLAN_PRIORITY_VOICE
VMK_VLAN_PRIORITY_IC = _libvswitch.VMK_VLAN_PRIORITY_IC
VMK_VLAN_PRIORITY_INTERNETWORK_CONROL = _libvswitch.VMK_VLAN_PRIORITY_INTERNETWORK_CONROL
VMK_VLAN_PRIORITY_NC = _libvswitch.VMK_VLAN_PRIORITY_NC
VMK_VLAN_PRIORITY_NETWORK_CONROL = _libvswitch.VMK_VLAN_PRIORITY_NETWORK_CONROL
VMK_VLAN_PRIORITY_MAXIMUM = _libvswitch.VMK_VLAN_PRIORITY_MAXIMUM
VMK_VLAN_NUM_PRIORITIES = _libvswitch.VMK_VLAN_NUM_PRIORITIES
VMK_VLAN_PRIORITY_INVALID = _libvswitch.VMK_VLAN_PRIORITY_INVALID
VMK_IP_PROTO_IPV6_HOPOPT = _libvswitch.VMK_IP_PROTO_IPV6_HOPOPT
VMK_IP_PROTO_ICMPV4 = _libvswitch.VMK_IP_PROTO_ICMPV4
VMK_IP_PROTO_IGMP = _libvswitch.VMK_IP_PROTO_IGMP
VMK_IP_PROTO_IPV4 = _libvswitch.VMK_IP_PROTO_IPV4
VMK_IP_PROTO_TCP = _libvswitch.VMK_IP_PROTO_TCP
VMK_IP_PROTO_EGP = _libvswitch.VMK_IP_PROTO_EGP
VMK_IP_PROTO_IGP = _libvswitch.VMK_IP_PROTO_IGP
VMK_IP_PROTO_UDP = _libvswitch.VMK_IP_PROTO_UDP
VMK_IP_PROTO_IPV6 = _libvswitch.VMK_IP_PROTO_IPV6
VMK_IP_PROTO_IPV6_ROUTE = _libvswitch.VMK_IP_PROTO_IPV6_ROUTE
VMK_IP_PROTO_IPV6_FRAG = _libvswitch.VMK_IP_PROTO_IPV6_FRAG
VMK_IP_PROTO_GRE = _libvswitch.VMK_IP_PROTO_GRE
VMK_IP_PROTO_ESP = _libvswitch.VMK_IP_PROTO_ESP
VMK_IP_PROTO_AH = _libvswitch.VMK_IP_PROTO_AH
VMK_IP_PROTO_ICMPV6 = _libvswitch.VMK_IP_PROTO_ICMPV6
VMK_IP_PROTO_IPV6_NONXT = _libvswitch.VMK_IP_PROTO_IPV6_NONXT
VMK_IP_PROTO_IPV6_DSTOPTS = _libvswitch.VMK_IP_PROTO_IPV6_DSTOPTS
VMK_IP_PROTO_EIGRP = _libvswitch.VMK_IP_PROTO_EIGRP
VMK_IP_PROTO_OSPF = _libvswitch.VMK_IP_PROTO_OSPF
VMK_IP_PROTO_IPIP = _libvswitch.VMK_IP_PROTO_IPIP
VMK_IP_PROTO_PIM = _libvswitch.VMK_IP_PROTO_PIM
VMK_IP_PROTO_VRRP = _libvswitch.VMK_IP_PROTO_VRRP
VMK_IP_PROTO_L2TP = _libvswitch.VMK_IP_PROTO_L2TP
VMK_IP_PROTO_MOB = _libvswitch.VMK_IP_PROTO_MOB
VMK_IP_PROTO_HIP = _libvswitch.VMK_IP_PROTO_HIP
VMK_IGMP_QUERY = _libvswitch.VMK_IGMP_QUERY
VMK_IGMP_V1REPORT = _libvswitch.VMK_IGMP_V1REPORT
VMK_IGMP_V2REPORT = _libvswitch.VMK_IGMP_V2REPORT
VMK_IGMP_V3REPORT = _libvswitch.VMK_IGMP_V3REPORT
VMK_IGMP_V2LEAVE = _libvswitch.VMK_IGMP_V2LEAVE
VMK_IGMP_MRDADV = _libvswitch.VMK_IGMP_MRDADV
VMK_IGMP_MRDSOL = _libvswitch.VMK_IGMP_MRDSOL
VMK_IGMP_MRDTERM = _libvswitch.VMK_IGMP_MRDTERM
VMK_MLD_QUERY = _libvswitch.VMK_MLD_QUERY
VMK_MLD_V1REPORT = _libvswitch.VMK_MLD_V1REPORT
VMK_MLD_V2REPORT = _libvswitch.VMK_MLD_V2REPORT
VMK_MLD_DONE = _libvswitch.VMK_MLD_DONE
VMK_MLD_MRDADV = _libvswitch.VMK_MLD_MRDADV
VMK_MLD_MRDSOL = _libvswitch.VMK_MLD_MRDSOL
VMK_MLD_MRDTERM = _libvswitch.VMK_MLD_MRDTERM
VMK_ETH_ADDR_LENGTH = _libvswitch.VMK_ETH_ADDR_LENGTH
class vmk_EthHdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_EthHdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_EthHdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["daddr"] = _libvswitch.vmk_EthHdr_daddr_set
    __swig_getmethods__["daddr"] = _libvswitch.vmk_EthHdr_daddr_get
    if _newclass:daddr = _swig_property(_libvswitch.vmk_EthHdr_daddr_get, _libvswitch.vmk_EthHdr_daddr_set)
    __swig_setmethods__["saddr"] = _libvswitch.vmk_EthHdr_saddr_set
    __swig_getmethods__["saddr"] = _libvswitch.vmk_EthHdr_saddr_get
    if _newclass:saddr = _swig_property(_libvswitch.vmk_EthHdr_saddr_get, _libvswitch.vmk_EthHdr_saddr_set)
    __swig_setmethods__["type"] = _libvswitch.vmk_EthHdr_type_set
    __swig_getmethods__["type"] = _libvswitch.vmk_EthHdr_type_get
    if _newclass:type = _swig_property(_libvswitch.vmk_EthHdr_type_get, _libvswitch.vmk_EthHdr_type_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_EthHdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_EthHdr
    __del__ = lambda self : None;
vmk_EthHdr_swigregister = _libvswitch.vmk_EthHdr_swigregister
vmk_EthHdr_swigregister(vmk_EthHdr)

class vmk_VLANHdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_VLANHdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_VLANHdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vlanIDHigh"] = _libvswitch.vmk_VLANHdr_vlanIDHigh_set
    __swig_getmethods__["vlanIDHigh"] = _libvswitch.vmk_VLANHdr_vlanIDHigh_get
    if _newclass:vlanIDHigh = _swig_property(_libvswitch.vmk_VLANHdr_vlanIDHigh_get, _libvswitch.vmk_VLANHdr_vlanIDHigh_set)
    __swig_setmethods__["dropEligible"] = _libvswitch.vmk_VLANHdr_dropEligible_set
    __swig_getmethods__["dropEligible"] = _libvswitch.vmk_VLANHdr_dropEligible_get
    if _newclass:dropEligible = _swig_property(_libvswitch.vmk_VLANHdr_dropEligible_get, _libvswitch.vmk_VLANHdr_dropEligible_set)
    __swig_setmethods__["priority"] = _libvswitch.vmk_VLANHdr_priority_set
    __swig_getmethods__["priority"] = _libvswitch.vmk_VLANHdr_priority_get
    if _newclass:priority = _swig_property(_libvswitch.vmk_VLANHdr_priority_get, _libvswitch.vmk_VLANHdr_priority_set)
    __swig_setmethods__["vlanIDLow"] = _libvswitch.vmk_VLANHdr_vlanIDLow_set
    __swig_getmethods__["vlanIDLow"] = _libvswitch.vmk_VLANHdr_vlanIDLow_get
    if _newclass:vlanIDLow = _swig_property(_libvswitch.vmk_VLANHdr_vlanIDLow_get, _libvswitch.vmk_VLANHdr_vlanIDLow_set)
    __swig_setmethods__["type"] = _libvswitch.vmk_VLANHdr_type_set
    __swig_getmethods__["type"] = _libvswitch.vmk_VLANHdr_type_get
    if _newclass:type = _swig_property(_libvswitch.vmk_VLANHdr_type_get, _libvswitch.vmk_VLANHdr_type_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_VLANHdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_VLANHdr
    __del__ = lambda self : None;
vmk_VLANHdr_swigregister = _libvswitch.vmk_VLANHdr_swigregister
vmk_VLANHdr_swigregister(vmk_VLANHdr)

class vmk_ArpHdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_ArpHdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_ArpHdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["htype"] = _libvswitch.vmk_ArpHdr_htype_set
    __swig_getmethods__["htype"] = _libvswitch.vmk_ArpHdr_htype_get
    if _newclass:htype = _swig_property(_libvswitch.vmk_ArpHdr_htype_get, _libvswitch.vmk_ArpHdr_htype_set)
    __swig_setmethods__["ptype"] = _libvswitch.vmk_ArpHdr_ptype_set
    __swig_getmethods__["ptype"] = _libvswitch.vmk_ArpHdr_ptype_get
    if _newclass:ptype = _swig_property(_libvswitch.vmk_ArpHdr_ptype_get, _libvswitch.vmk_ArpHdr_ptype_set)
    __swig_setmethods__["hlen"] = _libvswitch.vmk_ArpHdr_hlen_set
    __swig_getmethods__["hlen"] = _libvswitch.vmk_ArpHdr_hlen_get
    if _newclass:hlen = _swig_property(_libvswitch.vmk_ArpHdr_hlen_get, _libvswitch.vmk_ArpHdr_hlen_set)
    __swig_setmethods__["plen"] = _libvswitch.vmk_ArpHdr_plen_set
    __swig_getmethods__["plen"] = _libvswitch.vmk_ArpHdr_plen_get
    if _newclass:plen = _swig_property(_libvswitch.vmk_ArpHdr_plen_get, _libvswitch.vmk_ArpHdr_plen_set)
    __swig_setmethods__["oper"] = _libvswitch.vmk_ArpHdr_oper_set
    __swig_getmethods__["oper"] = _libvswitch.vmk_ArpHdr_oper_get
    if _newclass:oper = _swig_property(_libvswitch.vmk_ArpHdr_oper_get, _libvswitch.vmk_ArpHdr_oper_set)
    __swig_setmethods__["sha"] = _libvswitch.vmk_ArpHdr_sha_set
    __swig_getmethods__["sha"] = _libvswitch.vmk_ArpHdr_sha_get
    if _newclass:sha = _swig_property(_libvswitch.vmk_ArpHdr_sha_get, _libvswitch.vmk_ArpHdr_sha_set)
    __swig_setmethods__["spa"] = _libvswitch.vmk_ArpHdr_spa_set
    __swig_getmethods__["spa"] = _libvswitch.vmk_ArpHdr_spa_get
    if _newclass:spa = _swig_property(_libvswitch.vmk_ArpHdr_spa_get, _libvswitch.vmk_ArpHdr_spa_set)
    __swig_setmethods__["tha"] = _libvswitch.vmk_ArpHdr_tha_set
    __swig_getmethods__["tha"] = _libvswitch.vmk_ArpHdr_tha_get
    if _newclass:tha = _swig_property(_libvswitch.vmk_ArpHdr_tha_get, _libvswitch.vmk_ArpHdr_tha_set)
    __swig_setmethods__["tpa"] = _libvswitch.vmk_ArpHdr_tpa_set
    __swig_getmethods__["tpa"] = _libvswitch.vmk_ArpHdr_tpa_get
    if _newclass:tpa = _swig_property(_libvswitch.vmk_ArpHdr_tpa_get, _libvswitch.vmk_ArpHdr_tpa_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_ArpHdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_ArpHdr
    __del__ = lambda self : None;
vmk_ArpHdr_swigregister = _libvswitch.vmk_ArpHdr_swigregister
vmk_ArpHdr_swigregister(vmk_ArpHdr)

class vmk_IPv4Hdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_IPv4Hdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_IPv4Hdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["headerLength"] = _libvswitch.vmk_IPv4Hdr_headerLength_set
    __swig_getmethods__["headerLength"] = _libvswitch.vmk_IPv4Hdr_headerLength_get
    if _newclass:headerLength = _swig_property(_libvswitch.vmk_IPv4Hdr_headerLength_get, _libvswitch.vmk_IPv4Hdr_headerLength_set)
    __swig_setmethods__["version"] = _libvswitch.vmk_IPv4Hdr_version_set
    __swig_getmethods__["version"] = _libvswitch.vmk_IPv4Hdr_version_get
    if _newclass:version = _swig_property(_libvswitch.vmk_IPv4Hdr_version_get, _libvswitch.vmk_IPv4Hdr_version_set)
    __swig_setmethods__["tos"] = _libvswitch.vmk_IPv4Hdr_tos_set
    __swig_getmethods__["tos"] = _libvswitch.vmk_IPv4Hdr_tos_get
    if _newclass:tos = _swig_property(_libvswitch.vmk_IPv4Hdr_tos_get, _libvswitch.vmk_IPv4Hdr_tos_set)
    __swig_setmethods__["precedence"] = _libvswitch.vmk_IPv4Hdr_precedence_set
    __swig_getmethods__["precedence"] = _libvswitch.vmk_IPv4Hdr_precedence_get
    if _newclass:precedence = _swig_property(_libvswitch.vmk_IPv4Hdr_precedence_get, _libvswitch.vmk_IPv4Hdr_precedence_set)
    __swig_setmethods__["ecn"] = _libvswitch.vmk_IPv4Hdr_ecn_set
    __swig_getmethods__["ecn"] = _libvswitch.vmk_IPv4Hdr_ecn_get
    if _newclass:ecn = _swig_property(_libvswitch.vmk_IPv4Hdr_ecn_get, _libvswitch.vmk_IPv4Hdr_ecn_set)
    __swig_setmethods__["dscp"] = _libvswitch.vmk_IPv4Hdr_dscp_set
    __swig_getmethods__["dscp"] = _libvswitch.vmk_IPv4Hdr_dscp_get
    if _newclass:dscp = _swig_property(_libvswitch.vmk_IPv4Hdr_dscp_get, _libvswitch.vmk_IPv4Hdr_dscp_set)
    __swig_setmethods__["qosFlags"] = _libvswitch.vmk_IPv4Hdr_qosFlags_set
    __swig_getmethods__["qosFlags"] = _libvswitch.vmk_IPv4Hdr_qosFlags_get
    if _newclass:qosFlags = _swig_property(_libvswitch.vmk_IPv4Hdr_qosFlags_get, _libvswitch.vmk_IPv4Hdr_qosFlags_set)
    __swig_setmethods__["totalLength"] = _libvswitch.vmk_IPv4Hdr_totalLength_set
    __swig_getmethods__["totalLength"] = _libvswitch.vmk_IPv4Hdr_totalLength_get
    if _newclass:totalLength = _swig_property(_libvswitch.vmk_IPv4Hdr_totalLength_get, _libvswitch.vmk_IPv4Hdr_totalLength_set)
    __swig_setmethods__["identification"] = _libvswitch.vmk_IPv4Hdr_identification_set
    __swig_getmethods__["identification"] = _libvswitch.vmk_IPv4Hdr_identification_get
    if _newclass:identification = _swig_property(_libvswitch.vmk_IPv4Hdr_identification_get, _libvswitch.vmk_IPv4Hdr_identification_set)
    __swig_setmethods__["fragmentOffsetHigh"] = _libvswitch.vmk_IPv4Hdr_fragmentOffsetHigh_set
    __swig_getmethods__["fragmentOffsetHigh"] = _libvswitch.vmk_IPv4Hdr_fragmentOffsetHigh_get
    if _newclass:fragmentOffsetHigh = _swig_property(_libvswitch.vmk_IPv4Hdr_fragmentOffsetHigh_get, _libvswitch.vmk_IPv4Hdr_fragmentOffsetHigh_set)
    __swig_setmethods__["moreFragments"] = _libvswitch.vmk_IPv4Hdr_moreFragments_set
    __swig_getmethods__["moreFragments"] = _libvswitch.vmk_IPv4Hdr_moreFragments_get
    if _newclass:moreFragments = _swig_property(_libvswitch.vmk_IPv4Hdr_moreFragments_get, _libvswitch.vmk_IPv4Hdr_moreFragments_set)
    __swig_setmethods__["dontFragment"] = _libvswitch.vmk_IPv4Hdr_dontFragment_set
    __swig_getmethods__["dontFragment"] = _libvswitch.vmk_IPv4Hdr_dontFragment_get
    if _newclass:dontFragment = _swig_property(_libvswitch.vmk_IPv4Hdr_dontFragment_get, _libvswitch.vmk_IPv4Hdr_dontFragment_set)
    __swig_setmethods__["zero"] = _libvswitch.vmk_IPv4Hdr_zero_set
    __swig_getmethods__["zero"] = _libvswitch.vmk_IPv4Hdr_zero_get
    if _newclass:zero = _swig_property(_libvswitch.vmk_IPv4Hdr_zero_get, _libvswitch.vmk_IPv4Hdr_zero_set)
    __swig_setmethods__["fragmentOffsetLow"] = _libvswitch.vmk_IPv4Hdr_fragmentOffsetLow_set
    __swig_getmethods__["fragmentOffsetLow"] = _libvswitch.vmk_IPv4Hdr_fragmentOffsetLow_get
    if _newclass:fragmentOffsetLow = _swig_property(_libvswitch.vmk_IPv4Hdr_fragmentOffsetLow_get, _libvswitch.vmk_IPv4Hdr_fragmentOffsetLow_set)
    __swig_setmethods__["fragmentInfo"] = _libvswitch.vmk_IPv4Hdr_fragmentInfo_set
    __swig_getmethods__["fragmentInfo"] = _libvswitch.vmk_IPv4Hdr_fragmentInfo_get
    if _newclass:fragmentInfo = _swig_property(_libvswitch.vmk_IPv4Hdr_fragmentInfo_get, _libvswitch.vmk_IPv4Hdr_fragmentInfo_set)
    __swig_setmethods__["ttl"] = _libvswitch.vmk_IPv4Hdr_ttl_set
    __swig_getmethods__["ttl"] = _libvswitch.vmk_IPv4Hdr_ttl_get
    if _newclass:ttl = _swig_property(_libvswitch.vmk_IPv4Hdr_ttl_get, _libvswitch.vmk_IPv4Hdr_ttl_set)
    __swig_setmethods__["protocol"] = _libvswitch.vmk_IPv4Hdr_protocol_set
    __swig_getmethods__["protocol"] = _libvswitch.vmk_IPv4Hdr_protocol_get
    if _newclass:protocol = _swig_property(_libvswitch.vmk_IPv4Hdr_protocol_get, _libvswitch.vmk_IPv4Hdr_protocol_set)
    __swig_setmethods__["checksum"] = _libvswitch.vmk_IPv4Hdr_checksum_set
    __swig_getmethods__["checksum"] = _libvswitch.vmk_IPv4Hdr_checksum_get
    if _newclass:checksum = _swig_property(_libvswitch.vmk_IPv4Hdr_checksum_get, _libvswitch.vmk_IPv4Hdr_checksum_set)
    __swig_setmethods__["saddr"] = _libvswitch.vmk_IPv4Hdr_saddr_set
    __swig_getmethods__["saddr"] = _libvswitch.vmk_IPv4Hdr_saddr_get
    if _newclass:saddr = _swig_property(_libvswitch.vmk_IPv4Hdr_saddr_get, _libvswitch.vmk_IPv4Hdr_saddr_set)
    __swig_setmethods__["daddr"] = _libvswitch.vmk_IPv4Hdr_daddr_set
    __swig_getmethods__["daddr"] = _libvswitch.vmk_IPv4Hdr_daddr_get
    if _newclass:daddr = _swig_property(_libvswitch.vmk_IPv4Hdr_daddr_get, _libvswitch.vmk_IPv4Hdr_daddr_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_IPv4Hdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_IPv4Hdr
    __del__ = lambda self : None;
vmk_IPv4Hdr_swigregister = _libvswitch.vmk_IPv4Hdr_swigregister
vmk_IPv4Hdr_swigregister(vmk_IPv4Hdr)

VMK_IPV6_ADDR_LENGTH = _libvswitch.VMK_IPV6_ADDR_LENGTH
class vmk_IPv6Hdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_IPv6Hdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_IPv6Hdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["trafficClassHigh"] = _libvswitch.vmk_IPv6Hdr_trafficClassHigh_set
    __swig_getmethods__["trafficClassHigh"] = _libvswitch.vmk_IPv6Hdr_trafficClassHigh_get
    if _newclass:trafficClassHigh = _swig_property(_libvswitch.vmk_IPv6Hdr_trafficClassHigh_get, _libvswitch.vmk_IPv6Hdr_trafficClassHigh_set)
    __swig_setmethods__["version"] = _libvswitch.vmk_IPv6Hdr_version_set
    __swig_getmethods__["version"] = _libvswitch.vmk_IPv6Hdr_version_get
    if _newclass:version = _swig_property(_libvswitch.vmk_IPv6Hdr_version_get, _libvswitch.vmk_IPv6Hdr_version_set)
    __swig_setmethods__["flowLabelHigh"] = _libvswitch.vmk_IPv6Hdr_flowLabelHigh_set
    __swig_getmethods__["flowLabelHigh"] = _libvswitch.vmk_IPv6Hdr_flowLabelHigh_get
    if _newclass:flowLabelHigh = _swig_property(_libvswitch.vmk_IPv6Hdr_flowLabelHigh_get, _libvswitch.vmk_IPv6Hdr_flowLabelHigh_set)
    __swig_setmethods__["trafficClassLow"] = _libvswitch.vmk_IPv6Hdr_trafficClassLow_set
    __swig_getmethods__["trafficClassLow"] = _libvswitch.vmk_IPv6Hdr_trafficClassLow_get
    if _newclass:trafficClassLow = _swig_property(_libvswitch.vmk_IPv6Hdr_trafficClassLow_get, _libvswitch.vmk_IPv6Hdr_trafficClassLow_set)
    __swig_setmethods__["flowLabelLow"] = _libvswitch.vmk_IPv6Hdr_flowLabelLow_set
    __swig_getmethods__["flowLabelLow"] = _libvswitch.vmk_IPv6Hdr_flowLabelLow_get
    if _newclass:flowLabelLow = _swig_property(_libvswitch.vmk_IPv6Hdr_flowLabelLow_get, _libvswitch.vmk_IPv6Hdr_flowLabelLow_set)
    __swig_setmethods__["payloadLength"] = _libvswitch.vmk_IPv6Hdr_payloadLength_set
    __swig_getmethods__["payloadLength"] = _libvswitch.vmk_IPv6Hdr_payloadLength_get
    if _newclass:payloadLength = _swig_property(_libvswitch.vmk_IPv6Hdr_payloadLength_get, _libvswitch.vmk_IPv6Hdr_payloadLength_set)
    __swig_setmethods__["nextHeader"] = _libvswitch.vmk_IPv6Hdr_nextHeader_set
    __swig_getmethods__["nextHeader"] = _libvswitch.vmk_IPv6Hdr_nextHeader_get
    if _newclass:nextHeader = _swig_property(_libvswitch.vmk_IPv6Hdr_nextHeader_get, _libvswitch.vmk_IPv6Hdr_nextHeader_set)
    __swig_setmethods__["hopLimit"] = _libvswitch.vmk_IPv6Hdr_hopLimit_set
    __swig_getmethods__["hopLimit"] = _libvswitch.vmk_IPv6Hdr_hopLimit_get
    if _newclass:hopLimit = _swig_property(_libvswitch.vmk_IPv6Hdr_hopLimit_get, _libvswitch.vmk_IPv6Hdr_hopLimit_set)
    __swig_setmethods__["saddr"] = _libvswitch.vmk_IPv6Hdr_saddr_set
    __swig_getmethods__["saddr"] = _libvswitch.vmk_IPv6Hdr_saddr_get
    if _newclass:saddr = _swig_property(_libvswitch.vmk_IPv6Hdr_saddr_get, _libvswitch.vmk_IPv6Hdr_saddr_set)
    __swig_setmethods__["daddr"] = _libvswitch.vmk_IPv6Hdr_daddr_set
    __swig_getmethods__["daddr"] = _libvswitch.vmk_IPv6Hdr_daddr_get
    if _newclass:daddr = _swig_property(_libvswitch.vmk_IPv6Hdr_daddr_get, _libvswitch.vmk_IPv6Hdr_daddr_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_IPv6Hdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_IPv6Hdr
    __del__ = lambda self : None;
vmk_IPv6Hdr_swigregister = _libvswitch.vmk_IPv6Hdr_swigregister
vmk_IPv6Hdr_swigregister(vmk_IPv6Hdr)

class vmk_IPv6ExtHdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_IPv6ExtHdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_IPv6ExtHdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nextHeader"] = _libvswitch.vmk_IPv6ExtHdr_nextHeader_set
    __swig_getmethods__["nextHeader"] = _libvswitch.vmk_IPv6ExtHdr_nextHeader_get
    if _newclass:nextHeader = _swig_property(_libvswitch.vmk_IPv6ExtHdr_nextHeader_get, _libvswitch.vmk_IPv6ExtHdr_nextHeader_set)
    __swig_setmethods__["hdrExtLength"] = _libvswitch.vmk_IPv6ExtHdr_hdrExtLength_set
    __swig_getmethods__["hdrExtLength"] = _libvswitch.vmk_IPv6ExtHdr_hdrExtLength_get
    if _newclass:hdrExtLength = _swig_property(_libvswitch.vmk_IPv6ExtHdr_hdrExtLength_get, _libvswitch.vmk_IPv6ExtHdr_hdrExtLength_set)
    __swig_setmethods__["optPad1"] = _libvswitch.vmk_IPv6ExtHdr_optPad1_set
    __swig_getmethods__["optPad1"] = _libvswitch.vmk_IPv6ExtHdr_optPad1_get
    if _newclass:optPad1 = _swig_property(_libvswitch.vmk_IPv6ExtHdr_optPad1_get, _libvswitch.vmk_IPv6ExtHdr_optPad1_set)
    __swig_setmethods__["optPad2"] = _libvswitch.vmk_IPv6ExtHdr_optPad2_set
    __swig_getmethods__["optPad2"] = _libvswitch.vmk_IPv6ExtHdr_optPad2_get
    if _newclass:optPad2 = _swig_property(_libvswitch.vmk_IPv6ExtHdr_optPad2_get, _libvswitch.vmk_IPv6ExtHdr_optPad2_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_IPv6ExtHdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_IPv6ExtHdr
    __del__ = lambda self : None;
vmk_IPv6ExtHdr_swigregister = _libvswitch.vmk_IPv6ExtHdr_swigregister
vmk_IPv6ExtHdr_swigregister(vmk_IPv6ExtHdr)

class vmk_ICMPHdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_ICMPHdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_ICMPHdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libvswitch.vmk_ICMPHdr_type_set
    __swig_getmethods__["type"] = _libvswitch.vmk_ICMPHdr_type_get
    if _newclass:type = _swig_property(_libvswitch.vmk_ICMPHdr_type_get, _libvswitch.vmk_ICMPHdr_type_set)
    __swig_setmethods__["code"] = _libvswitch.vmk_ICMPHdr_code_set
    __swig_getmethods__["code"] = _libvswitch.vmk_ICMPHdr_code_get
    if _newclass:code = _swig_property(_libvswitch.vmk_ICMPHdr_code_get, _libvswitch.vmk_ICMPHdr_code_set)
    __swig_setmethods__["checksum"] = _libvswitch.vmk_ICMPHdr_checksum_set
    __swig_getmethods__["checksum"] = _libvswitch.vmk_ICMPHdr_checksum_get
    if _newclass:checksum = _swig_property(_libvswitch.vmk_ICMPHdr_checksum_get, _libvswitch.vmk_ICMPHdr_checksum_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_ICMPHdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_ICMPHdr
    __del__ = lambda self : None;
vmk_ICMPHdr_swigregister = _libvswitch.vmk_ICMPHdr_swigregister
vmk_ICMPHdr_swigregister(vmk_ICMPHdr)

class vmk_IGMPHdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_IGMPHdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_IGMPHdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libvswitch.vmk_IGMPHdr_type_set
    __swig_getmethods__["type"] = _libvswitch.vmk_IGMPHdr_type_get
    if _newclass:type = _swig_property(_libvswitch.vmk_IGMPHdr_type_get, _libvswitch.vmk_IGMPHdr_type_set)
    __swig_setmethods__["maxResponseTime"] = _libvswitch.vmk_IGMPHdr_maxResponseTime_set
    __swig_getmethods__["maxResponseTime"] = _libvswitch.vmk_IGMPHdr_maxResponseTime_get
    if _newclass:maxResponseTime = _swig_property(_libvswitch.vmk_IGMPHdr_maxResponseTime_get, _libvswitch.vmk_IGMPHdr_maxResponseTime_set)
    __swig_setmethods__["checksum"] = _libvswitch.vmk_IGMPHdr_checksum_set
    __swig_getmethods__["checksum"] = _libvswitch.vmk_IGMPHdr_checksum_get
    if _newclass:checksum = _swig_property(_libvswitch.vmk_IGMPHdr_checksum_get, _libvswitch.vmk_IGMPHdr_checksum_set)
    __swig_setmethods__["groupAddr"] = _libvswitch.vmk_IGMPHdr_groupAddr_set
    __swig_getmethods__["groupAddr"] = _libvswitch.vmk_IGMPHdr_groupAddr_get
    if _newclass:groupAddr = _swig_property(_libvswitch.vmk_IGMPHdr_groupAddr_get, _libvswitch.vmk_IGMPHdr_groupAddr_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_IGMPHdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_IGMPHdr
    __del__ = lambda self : None;
vmk_IGMPHdr_swigregister = _libvswitch.vmk_IGMPHdr_swigregister
vmk_IGMPHdr_swigregister(vmk_IGMPHdr)

class vmk_IGMPv3QueryHdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_IGMPv3QueryHdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_IGMPv3QueryHdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libvswitch.vmk_IGMPv3QueryHdr_type_set
    __swig_getmethods__["type"] = _libvswitch.vmk_IGMPv3QueryHdr_type_get
    if _newclass:type = _swig_property(_libvswitch.vmk_IGMPv3QueryHdr_type_get, _libvswitch.vmk_IGMPv3QueryHdr_type_set)
    __swig_setmethods__["maxResponseCode"] = _libvswitch.vmk_IGMPv3QueryHdr_maxResponseCode_set
    __swig_getmethods__["maxResponseCode"] = _libvswitch.vmk_IGMPv3QueryHdr_maxResponseCode_get
    if _newclass:maxResponseCode = _swig_property(_libvswitch.vmk_IGMPv3QueryHdr_maxResponseCode_get, _libvswitch.vmk_IGMPv3QueryHdr_maxResponseCode_set)
    __swig_setmethods__["checksum"] = _libvswitch.vmk_IGMPv3QueryHdr_checksum_set
    __swig_getmethods__["checksum"] = _libvswitch.vmk_IGMPv3QueryHdr_checksum_get
    if _newclass:checksum = _swig_property(_libvswitch.vmk_IGMPv3QueryHdr_checksum_get, _libvswitch.vmk_IGMPv3QueryHdr_checksum_set)
    __swig_setmethods__["groupAddr"] = _libvswitch.vmk_IGMPv3QueryHdr_groupAddr_set
    __swig_getmethods__["groupAddr"] = _libvswitch.vmk_IGMPv3QueryHdr_groupAddr_get
    if _newclass:groupAddr = _swig_property(_libvswitch.vmk_IGMPv3QueryHdr_groupAddr_get, _libvswitch.vmk_IGMPv3QueryHdr_groupAddr_set)
    __swig_setmethods__["qrv"] = _libvswitch.vmk_IGMPv3QueryHdr_qrv_set
    __swig_getmethods__["qrv"] = _libvswitch.vmk_IGMPv3QueryHdr_qrv_get
    if _newclass:qrv = _swig_property(_libvswitch.vmk_IGMPv3QueryHdr_qrv_get, _libvswitch.vmk_IGMPv3QueryHdr_qrv_set)
    __swig_setmethods__["sFlag"] = _libvswitch.vmk_IGMPv3QueryHdr_sFlag_set
    __swig_getmethods__["sFlag"] = _libvswitch.vmk_IGMPv3QueryHdr_sFlag_get
    if _newclass:sFlag = _swig_property(_libvswitch.vmk_IGMPv3QueryHdr_sFlag_get, _libvswitch.vmk_IGMPv3QueryHdr_sFlag_set)
    __swig_setmethods__["reserved"] = _libvswitch.vmk_IGMPv3QueryHdr_reserved_set
    __swig_getmethods__["reserved"] = _libvswitch.vmk_IGMPv3QueryHdr_reserved_get
    if _newclass:reserved = _swig_property(_libvswitch.vmk_IGMPv3QueryHdr_reserved_get, _libvswitch.vmk_IGMPv3QueryHdr_reserved_set)
    __swig_setmethods__["qqic"] = _libvswitch.vmk_IGMPv3QueryHdr_qqic_set
    __swig_getmethods__["qqic"] = _libvswitch.vmk_IGMPv3QueryHdr_qqic_get
    if _newclass:qqic = _swig_property(_libvswitch.vmk_IGMPv3QueryHdr_qqic_get, _libvswitch.vmk_IGMPv3QueryHdr_qqic_set)
    __swig_setmethods__["numSources"] = _libvswitch.vmk_IGMPv3QueryHdr_numSources_set
    __swig_getmethods__["numSources"] = _libvswitch.vmk_IGMPv3QueryHdr_numSources_get
    if _newclass:numSources = _swig_property(_libvswitch.vmk_IGMPv3QueryHdr_numSources_get, _libvswitch.vmk_IGMPv3QueryHdr_numSources_set)
    __swig_getmethods__["sourcesIPv4"] = _libvswitch.vmk_IGMPv3QueryHdr_sourcesIPv4_get
    if _newclass:sourcesIPv4 = _swig_property(_libvswitch.vmk_IGMPv3QueryHdr_sourcesIPv4_get)
    def __init__(self): 
        this = _libvswitch.new_vmk_IGMPv3QueryHdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_IGMPv3QueryHdr
    __del__ = lambda self : None;
vmk_IGMPv3QueryHdr_swigregister = _libvswitch.vmk_IGMPv3QueryHdr_swigregister
vmk_IGMPv3QueryHdr_swigregister(vmk_IGMPv3QueryHdr)

class vmk_IGMPv3GrpRecord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_IGMPv3GrpRecord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_IGMPv3GrpRecord, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libvswitch.vmk_IGMPv3GrpRecord_type_set
    __swig_getmethods__["type"] = _libvswitch.vmk_IGMPv3GrpRecord_type_get
    if _newclass:type = _swig_property(_libvswitch.vmk_IGMPv3GrpRecord_type_get, _libvswitch.vmk_IGMPv3GrpRecord_type_set)
    __swig_setmethods__["dataLength"] = _libvswitch.vmk_IGMPv3GrpRecord_dataLength_set
    __swig_getmethods__["dataLength"] = _libvswitch.vmk_IGMPv3GrpRecord_dataLength_get
    if _newclass:dataLength = _swig_property(_libvswitch.vmk_IGMPv3GrpRecord_dataLength_get, _libvswitch.vmk_IGMPv3GrpRecord_dataLength_set)
    __swig_setmethods__["numSources"] = _libvswitch.vmk_IGMPv3GrpRecord_numSources_set
    __swig_getmethods__["numSources"] = _libvswitch.vmk_IGMPv3GrpRecord_numSources_get
    if _newclass:numSources = _swig_property(_libvswitch.vmk_IGMPv3GrpRecord_numSources_get, _libvswitch.vmk_IGMPv3GrpRecord_numSources_set)
    __swig_setmethods__["groupIPv4Addr"] = _libvswitch.vmk_IGMPv3GrpRecord_groupIPv4Addr_set
    __swig_getmethods__["groupIPv4Addr"] = _libvswitch.vmk_IGMPv3GrpRecord_groupIPv4Addr_get
    if _newclass:groupIPv4Addr = _swig_property(_libvswitch.vmk_IGMPv3GrpRecord_groupIPv4Addr_get, _libvswitch.vmk_IGMPv3GrpRecord_groupIPv4Addr_set)
    __swig_getmethods__["sourcesIPv4"] = _libvswitch.vmk_IGMPv3GrpRecord_sourcesIPv4_get
    if _newclass:sourcesIPv4 = _swig_property(_libvswitch.vmk_IGMPv3GrpRecord_sourcesIPv4_get)
    def __init__(self): 
        this = _libvswitch.new_vmk_IGMPv3GrpRecord()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_IGMPv3GrpRecord
    __del__ = lambda self : None;
vmk_IGMPv3GrpRecord_swigregister = _libvswitch.vmk_IGMPv3GrpRecord_swigregister
vmk_IGMPv3GrpRecord_swigregister(vmk_IGMPv3GrpRecord)

class vmk_IGMPv3ReportHdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_IGMPv3ReportHdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_IGMPv3ReportHdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libvswitch.vmk_IGMPv3ReportHdr_type_set
    __swig_getmethods__["type"] = _libvswitch.vmk_IGMPv3ReportHdr_type_get
    if _newclass:type = _swig_property(_libvswitch.vmk_IGMPv3ReportHdr_type_get, _libvswitch.vmk_IGMPv3ReportHdr_type_set)
    __swig_setmethods__["reserved1"] = _libvswitch.vmk_IGMPv3ReportHdr_reserved1_set
    __swig_getmethods__["reserved1"] = _libvswitch.vmk_IGMPv3ReportHdr_reserved1_get
    if _newclass:reserved1 = _swig_property(_libvswitch.vmk_IGMPv3ReportHdr_reserved1_get, _libvswitch.vmk_IGMPv3ReportHdr_reserved1_set)
    __swig_setmethods__["checksum"] = _libvswitch.vmk_IGMPv3ReportHdr_checksum_set
    __swig_getmethods__["checksum"] = _libvswitch.vmk_IGMPv3ReportHdr_checksum_get
    if _newclass:checksum = _swig_property(_libvswitch.vmk_IGMPv3ReportHdr_checksum_get, _libvswitch.vmk_IGMPv3ReportHdr_checksum_set)
    __swig_setmethods__["reserved2"] = _libvswitch.vmk_IGMPv3ReportHdr_reserved2_set
    __swig_getmethods__["reserved2"] = _libvswitch.vmk_IGMPv3ReportHdr_reserved2_get
    if _newclass:reserved2 = _swig_property(_libvswitch.vmk_IGMPv3ReportHdr_reserved2_get, _libvswitch.vmk_IGMPv3ReportHdr_reserved2_set)
    __swig_setmethods__["numGroups"] = _libvswitch.vmk_IGMPv3ReportHdr_numGroups_set
    __swig_getmethods__["numGroups"] = _libvswitch.vmk_IGMPv3ReportHdr_numGroups_get
    if _newclass:numGroups = _swig_property(_libvswitch.vmk_IGMPv3ReportHdr_numGroups_get, _libvswitch.vmk_IGMPv3ReportHdr_numGroups_set)
    __swig_getmethods__["record"] = _libvswitch.vmk_IGMPv3ReportHdr_record_get
    if _newclass:record = _swig_property(_libvswitch.vmk_IGMPv3ReportHdr_record_get)
    def __init__(self): 
        this = _libvswitch.new_vmk_IGMPv3ReportHdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_IGMPv3ReportHdr
    __del__ = lambda self : None;
vmk_IGMPv3ReportHdr_swigregister = _libvswitch.vmk_IGMPv3ReportHdr_swigregister
vmk_IGMPv3ReportHdr_swigregister(vmk_IGMPv3ReportHdr)

class vmk_MLDHdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_MLDHdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_MLDHdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libvswitch.vmk_MLDHdr_type_set
    __swig_getmethods__["type"] = _libvswitch.vmk_MLDHdr_type_get
    if _newclass:type = _swig_property(_libvswitch.vmk_MLDHdr_type_get, _libvswitch.vmk_MLDHdr_type_set)
    __swig_setmethods__["code"] = _libvswitch.vmk_MLDHdr_code_set
    __swig_getmethods__["code"] = _libvswitch.vmk_MLDHdr_code_get
    if _newclass:code = _swig_property(_libvswitch.vmk_MLDHdr_code_get, _libvswitch.vmk_MLDHdr_code_set)
    __swig_setmethods__["checksum"] = _libvswitch.vmk_MLDHdr_checksum_set
    __swig_getmethods__["checksum"] = _libvswitch.vmk_MLDHdr_checksum_get
    if _newclass:checksum = _swig_property(_libvswitch.vmk_MLDHdr_checksum_get, _libvswitch.vmk_MLDHdr_checksum_set)
    __swig_setmethods__["maxResponseTime"] = _libvswitch.vmk_MLDHdr_maxResponseTime_set
    __swig_getmethods__["maxResponseTime"] = _libvswitch.vmk_MLDHdr_maxResponseTime_get
    if _newclass:maxResponseTime = _swig_property(_libvswitch.vmk_MLDHdr_maxResponseTime_get, _libvswitch.vmk_MLDHdr_maxResponseTime_set)
    __swig_setmethods__["reserved"] = _libvswitch.vmk_MLDHdr_reserved_set
    __swig_getmethods__["reserved"] = _libvswitch.vmk_MLDHdr_reserved_get
    if _newclass:reserved = _swig_property(_libvswitch.vmk_MLDHdr_reserved_get, _libvswitch.vmk_MLDHdr_reserved_set)
    __swig_setmethods__["groupIPv6Addr"] = _libvswitch.vmk_MLDHdr_groupIPv6Addr_set
    __swig_getmethods__["groupIPv6Addr"] = _libvswitch.vmk_MLDHdr_groupIPv6Addr_get
    if _newclass:groupIPv6Addr = _swig_property(_libvswitch.vmk_MLDHdr_groupIPv6Addr_get, _libvswitch.vmk_MLDHdr_groupIPv6Addr_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_MLDHdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_MLDHdr
    __del__ = lambda self : None;
vmk_MLDHdr_swigregister = _libvswitch.vmk_MLDHdr_swigregister
vmk_MLDHdr_swigregister(vmk_MLDHdr)

class vmk_MLDv2QueryHdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_MLDv2QueryHdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_MLDv2QueryHdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libvswitch.vmk_MLDv2QueryHdr_type_set
    __swig_getmethods__["type"] = _libvswitch.vmk_MLDv2QueryHdr_type_get
    if _newclass:type = _swig_property(_libvswitch.vmk_MLDv2QueryHdr_type_get, _libvswitch.vmk_MLDv2QueryHdr_type_set)
    __swig_setmethods__["code"] = _libvswitch.vmk_MLDv2QueryHdr_code_set
    __swig_getmethods__["code"] = _libvswitch.vmk_MLDv2QueryHdr_code_get
    if _newclass:code = _swig_property(_libvswitch.vmk_MLDv2QueryHdr_code_get, _libvswitch.vmk_MLDv2QueryHdr_code_set)
    __swig_setmethods__["checksum"] = _libvswitch.vmk_MLDv2QueryHdr_checksum_set
    __swig_getmethods__["checksum"] = _libvswitch.vmk_MLDv2QueryHdr_checksum_get
    if _newclass:checksum = _swig_property(_libvswitch.vmk_MLDv2QueryHdr_checksum_get, _libvswitch.vmk_MLDv2QueryHdr_checksum_set)
    __swig_setmethods__["maxResponseCode"] = _libvswitch.vmk_MLDv2QueryHdr_maxResponseCode_set
    __swig_getmethods__["maxResponseCode"] = _libvswitch.vmk_MLDv2QueryHdr_maxResponseCode_get
    if _newclass:maxResponseCode = _swig_property(_libvswitch.vmk_MLDv2QueryHdr_maxResponseCode_get, _libvswitch.vmk_MLDv2QueryHdr_maxResponseCode_set)
    __swig_setmethods__["reserved1"] = _libvswitch.vmk_MLDv2QueryHdr_reserved1_set
    __swig_getmethods__["reserved1"] = _libvswitch.vmk_MLDv2QueryHdr_reserved1_get
    if _newclass:reserved1 = _swig_property(_libvswitch.vmk_MLDv2QueryHdr_reserved1_get, _libvswitch.vmk_MLDv2QueryHdr_reserved1_set)
    __swig_setmethods__["groupIPv6Addr"] = _libvswitch.vmk_MLDv2QueryHdr_groupIPv6Addr_set
    __swig_getmethods__["groupIPv6Addr"] = _libvswitch.vmk_MLDv2QueryHdr_groupIPv6Addr_get
    if _newclass:groupIPv6Addr = _swig_property(_libvswitch.vmk_MLDv2QueryHdr_groupIPv6Addr_get, _libvswitch.vmk_MLDv2QueryHdr_groupIPv6Addr_set)
    __swig_setmethods__["qrv"] = _libvswitch.vmk_MLDv2QueryHdr_qrv_set
    __swig_getmethods__["qrv"] = _libvswitch.vmk_MLDv2QueryHdr_qrv_get
    if _newclass:qrv = _swig_property(_libvswitch.vmk_MLDv2QueryHdr_qrv_get, _libvswitch.vmk_MLDv2QueryHdr_qrv_set)
    __swig_setmethods__["sFlag"] = _libvswitch.vmk_MLDv2QueryHdr_sFlag_set
    __swig_getmethods__["sFlag"] = _libvswitch.vmk_MLDv2QueryHdr_sFlag_get
    if _newclass:sFlag = _swig_property(_libvswitch.vmk_MLDv2QueryHdr_sFlag_get, _libvswitch.vmk_MLDv2QueryHdr_sFlag_set)
    __swig_setmethods__["reserved2"] = _libvswitch.vmk_MLDv2QueryHdr_reserved2_set
    __swig_getmethods__["reserved2"] = _libvswitch.vmk_MLDv2QueryHdr_reserved2_get
    if _newclass:reserved2 = _swig_property(_libvswitch.vmk_MLDv2QueryHdr_reserved2_get, _libvswitch.vmk_MLDv2QueryHdr_reserved2_set)
    __swig_setmethods__["qqic"] = _libvswitch.vmk_MLDv2QueryHdr_qqic_set
    __swig_getmethods__["qqic"] = _libvswitch.vmk_MLDv2QueryHdr_qqic_get
    if _newclass:qqic = _swig_property(_libvswitch.vmk_MLDv2QueryHdr_qqic_get, _libvswitch.vmk_MLDv2QueryHdr_qqic_set)
    __swig_setmethods__["numSources"] = _libvswitch.vmk_MLDv2QueryHdr_numSources_set
    __swig_getmethods__["numSources"] = _libvswitch.vmk_MLDv2QueryHdr_numSources_get
    if _newclass:numSources = _swig_property(_libvswitch.vmk_MLDv2QueryHdr_numSources_get, _libvswitch.vmk_MLDv2QueryHdr_numSources_set)
    __swig_getmethods__["sourcesIPv6"] = _libvswitch.vmk_MLDv2QueryHdr_sourcesIPv6_get
    if _newclass:sourcesIPv6 = _swig_property(_libvswitch.vmk_MLDv2QueryHdr_sourcesIPv6_get)
    def __init__(self): 
        this = _libvswitch.new_vmk_MLDv2QueryHdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_MLDv2QueryHdr
    __del__ = lambda self : None;
vmk_MLDv2QueryHdr_swigregister = _libvswitch.vmk_MLDv2QueryHdr_swigregister
vmk_MLDv2QueryHdr_swigregister(vmk_MLDv2QueryHdr)

class vmk_MLDv2GrpRecord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_MLDv2GrpRecord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_MLDv2GrpRecord, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libvswitch.vmk_MLDv2GrpRecord_type_set
    __swig_getmethods__["type"] = _libvswitch.vmk_MLDv2GrpRecord_type_get
    if _newclass:type = _swig_property(_libvswitch.vmk_MLDv2GrpRecord_type_get, _libvswitch.vmk_MLDv2GrpRecord_type_set)
    __swig_setmethods__["dataLength"] = _libvswitch.vmk_MLDv2GrpRecord_dataLength_set
    __swig_getmethods__["dataLength"] = _libvswitch.vmk_MLDv2GrpRecord_dataLength_get
    if _newclass:dataLength = _swig_property(_libvswitch.vmk_MLDv2GrpRecord_dataLength_get, _libvswitch.vmk_MLDv2GrpRecord_dataLength_set)
    __swig_setmethods__["numSources"] = _libvswitch.vmk_MLDv2GrpRecord_numSources_set
    __swig_getmethods__["numSources"] = _libvswitch.vmk_MLDv2GrpRecord_numSources_get
    if _newclass:numSources = _swig_property(_libvswitch.vmk_MLDv2GrpRecord_numSources_get, _libvswitch.vmk_MLDv2GrpRecord_numSources_set)
    __swig_setmethods__["groupIPv6Addr"] = _libvswitch.vmk_MLDv2GrpRecord_groupIPv6Addr_set
    __swig_getmethods__["groupIPv6Addr"] = _libvswitch.vmk_MLDv2GrpRecord_groupIPv6Addr_get
    if _newclass:groupIPv6Addr = _swig_property(_libvswitch.vmk_MLDv2GrpRecord_groupIPv6Addr_get, _libvswitch.vmk_MLDv2GrpRecord_groupIPv6Addr_set)
    __swig_getmethods__["sourcesIPv6"] = _libvswitch.vmk_MLDv2GrpRecord_sourcesIPv6_get
    if _newclass:sourcesIPv6 = _swig_property(_libvswitch.vmk_MLDv2GrpRecord_sourcesIPv6_get)
    def __init__(self): 
        this = _libvswitch.new_vmk_MLDv2GrpRecord()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_MLDv2GrpRecord
    __del__ = lambda self : None;
vmk_MLDv2GrpRecord_swigregister = _libvswitch.vmk_MLDv2GrpRecord_swigregister
vmk_MLDv2GrpRecord_swigregister(vmk_MLDv2GrpRecord)

class vmk_MLDv2ReportHdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_MLDv2ReportHdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_MLDv2ReportHdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libvswitch.vmk_MLDv2ReportHdr_type_set
    __swig_getmethods__["type"] = _libvswitch.vmk_MLDv2ReportHdr_type_get
    if _newclass:type = _swig_property(_libvswitch.vmk_MLDv2ReportHdr_type_get, _libvswitch.vmk_MLDv2ReportHdr_type_set)
    __swig_setmethods__["reserved1"] = _libvswitch.vmk_MLDv2ReportHdr_reserved1_set
    __swig_getmethods__["reserved1"] = _libvswitch.vmk_MLDv2ReportHdr_reserved1_get
    if _newclass:reserved1 = _swig_property(_libvswitch.vmk_MLDv2ReportHdr_reserved1_get, _libvswitch.vmk_MLDv2ReportHdr_reserved1_set)
    __swig_setmethods__["checksum"] = _libvswitch.vmk_MLDv2ReportHdr_checksum_set
    __swig_getmethods__["checksum"] = _libvswitch.vmk_MLDv2ReportHdr_checksum_get
    if _newclass:checksum = _swig_property(_libvswitch.vmk_MLDv2ReportHdr_checksum_get, _libvswitch.vmk_MLDv2ReportHdr_checksum_set)
    __swig_setmethods__["reserved2"] = _libvswitch.vmk_MLDv2ReportHdr_reserved2_set
    __swig_getmethods__["reserved2"] = _libvswitch.vmk_MLDv2ReportHdr_reserved2_get
    if _newclass:reserved2 = _swig_property(_libvswitch.vmk_MLDv2ReportHdr_reserved2_get, _libvswitch.vmk_MLDv2ReportHdr_reserved2_set)
    __swig_setmethods__["numGroups"] = _libvswitch.vmk_MLDv2ReportHdr_numGroups_set
    __swig_getmethods__["numGroups"] = _libvswitch.vmk_MLDv2ReportHdr_numGroups_get
    if _newclass:numGroups = _swig_property(_libvswitch.vmk_MLDv2ReportHdr_numGroups_get, _libvswitch.vmk_MLDv2ReportHdr_numGroups_set)
    __swig_getmethods__["record"] = _libvswitch.vmk_MLDv2ReportHdr_record_get
    if _newclass:record = _swig_property(_libvswitch.vmk_MLDv2ReportHdr_record_get)
    def __init__(self): 
        this = _libvswitch.new_vmk_MLDv2ReportHdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_MLDv2ReportHdr
    __del__ = lambda self : None;
vmk_MLDv2ReportHdr_swigregister = _libvswitch.vmk_MLDv2ReportHdr_swigregister
vmk_MLDv2ReportHdr_swigregister(vmk_MLDv2ReportHdr)

class vmk_UDPHdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_UDPHdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_UDPHdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["srcPort"] = _libvswitch.vmk_UDPHdr_srcPort_set
    __swig_getmethods__["srcPort"] = _libvswitch.vmk_UDPHdr_srcPort_get
    if _newclass:srcPort = _swig_property(_libvswitch.vmk_UDPHdr_srcPort_get, _libvswitch.vmk_UDPHdr_srcPort_set)
    __swig_setmethods__["dstPort"] = _libvswitch.vmk_UDPHdr_dstPort_set
    __swig_getmethods__["dstPort"] = _libvswitch.vmk_UDPHdr_dstPort_get
    if _newclass:dstPort = _swig_property(_libvswitch.vmk_UDPHdr_dstPort_get, _libvswitch.vmk_UDPHdr_dstPort_set)
    __swig_setmethods__["length"] = _libvswitch.vmk_UDPHdr_length_set
    __swig_getmethods__["length"] = _libvswitch.vmk_UDPHdr_length_get
    if _newclass:length = _swig_property(_libvswitch.vmk_UDPHdr_length_get, _libvswitch.vmk_UDPHdr_length_set)
    __swig_setmethods__["checksum"] = _libvswitch.vmk_UDPHdr_checksum_set
    __swig_getmethods__["checksum"] = _libvswitch.vmk_UDPHdr_checksum_get
    if _newclass:checksum = _swig_property(_libvswitch.vmk_UDPHdr_checksum_get, _libvswitch.vmk_UDPHdr_checksum_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_UDPHdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_UDPHdr
    __del__ = lambda self : None;
vmk_UDPHdr_swigregister = _libvswitch.vmk_UDPHdr_swigregister
vmk_UDPHdr_swigregister(vmk_UDPHdr)

class vmk_TCPHdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_TCPHdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_TCPHdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["srcPort"] = _libvswitch.vmk_TCPHdr_srcPort_set
    __swig_getmethods__["srcPort"] = _libvswitch.vmk_TCPHdr_srcPort_get
    if _newclass:srcPort = _swig_property(_libvswitch.vmk_TCPHdr_srcPort_get, _libvswitch.vmk_TCPHdr_srcPort_set)
    __swig_setmethods__["dstPort"] = _libvswitch.vmk_TCPHdr_dstPort_set
    __swig_getmethods__["dstPort"] = _libvswitch.vmk_TCPHdr_dstPort_get
    if _newclass:dstPort = _swig_property(_libvswitch.vmk_TCPHdr_dstPort_get, _libvswitch.vmk_TCPHdr_dstPort_set)
    __swig_setmethods__["seq"] = _libvswitch.vmk_TCPHdr_seq_set
    __swig_getmethods__["seq"] = _libvswitch.vmk_TCPHdr_seq_get
    if _newclass:seq = _swig_property(_libvswitch.vmk_TCPHdr_seq_get, _libvswitch.vmk_TCPHdr_seq_set)
    __swig_setmethods__["ackSeq"] = _libvswitch.vmk_TCPHdr_ackSeq_set
    __swig_getmethods__["ackSeq"] = _libvswitch.vmk_TCPHdr_ackSeq_get
    if _newclass:ackSeq = _swig_property(_libvswitch.vmk_TCPHdr_ackSeq_get, _libvswitch.vmk_TCPHdr_ackSeq_set)
    __swig_setmethods__["reserved"] = _libvswitch.vmk_TCPHdr_reserved_set
    __swig_getmethods__["reserved"] = _libvswitch.vmk_TCPHdr_reserved_get
    if _newclass:reserved = _swig_property(_libvswitch.vmk_TCPHdr_reserved_get, _libvswitch.vmk_TCPHdr_reserved_set)
    __swig_setmethods__["dataOffset"] = _libvswitch.vmk_TCPHdr_dataOffset_set
    __swig_getmethods__["dataOffset"] = _libvswitch.vmk_TCPHdr_dataOffset_get
    if _newclass:dataOffset = _swig_property(_libvswitch.vmk_TCPHdr_dataOffset_get, _libvswitch.vmk_TCPHdr_dataOffset_set)
    __swig_setmethods__["fin"] = _libvswitch.vmk_TCPHdr_fin_set
    __swig_getmethods__["fin"] = _libvswitch.vmk_TCPHdr_fin_get
    if _newclass:fin = _swig_property(_libvswitch.vmk_TCPHdr_fin_get, _libvswitch.vmk_TCPHdr_fin_set)
    __swig_setmethods__["syn"] = _libvswitch.vmk_TCPHdr_syn_set
    __swig_getmethods__["syn"] = _libvswitch.vmk_TCPHdr_syn_get
    if _newclass:syn = _swig_property(_libvswitch.vmk_TCPHdr_syn_get, _libvswitch.vmk_TCPHdr_syn_set)
    __swig_setmethods__["rst"] = _libvswitch.vmk_TCPHdr_rst_set
    __swig_getmethods__["rst"] = _libvswitch.vmk_TCPHdr_rst_get
    if _newclass:rst = _swig_property(_libvswitch.vmk_TCPHdr_rst_get, _libvswitch.vmk_TCPHdr_rst_set)
    __swig_setmethods__["psh"] = _libvswitch.vmk_TCPHdr_psh_set
    __swig_getmethods__["psh"] = _libvswitch.vmk_TCPHdr_psh_get
    if _newclass:psh = _swig_property(_libvswitch.vmk_TCPHdr_psh_get, _libvswitch.vmk_TCPHdr_psh_set)
    __swig_setmethods__["ack"] = _libvswitch.vmk_TCPHdr_ack_set
    __swig_getmethods__["ack"] = _libvswitch.vmk_TCPHdr_ack_get
    if _newclass:ack = _swig_property(_libvswitch.vmk_TCPHdr_ack_get, _libvswitch.vmk_TCPHdr_ack_set)
    __swig_setmethods__["urg"] = _libvswitch.vmk_TCPHdr_urg_set
    __swig_getmethods__["urg"] = _libvswitch.vmk_TCPHdr_urg_get
    if _newclass:urg = _swig_property(_libvswitch.vmk_TCPHdr_urg_get, _libvswitch.vmk_TCPHdr_urg_set)
    __swig_setmethods__["ece"] = _libvswitch.vmk_TCPHdr_ece_set
    __swig_getmethods__["ece"] = _libvswitch.vmk_TCPHdr_ece_get
    if _newclass:ece = _swig_property(_libvswitch.vmk_TCPHdr_ece_get, _libvswitch.vmk_TCPHdr_ece_set)
    __swig_setmethods__["cwr"] = _libvswitch.vmk_TCPHdr_cwr_set
    __swig_getmethods__["cwr"] = _libvswitch.vmk_TCPHdr_cwr_get
    if _newclass:cwr = _swig_property(_libvswitch.vmk_TCPHdr_cwr_get, _libvswitch.vmk_TCPHdr_cwr_set)
    __swig_setmethods__["flags"] = _libvswitch.vmk_TCPHdr_flags_set
    __swig_getmethods__["flags"] = _libvswitch.vmk_TCPHdr_flags_get
    if _newclass:flags = _swig_property(_libvswitch.vmk_TCPHdr_flags_get, _libvswitch.vmk_TCPHdr_flags_set)
    __swig_setmethods__["window"] = _libvswitch.vmk_TCPHdr_window_set
    __swig_getmethods__["window"] = _libvswitch.vmk_TCPHdr_window_get
    if _newclass:window = _swig_property(_libvswitch.vmk_TCPHdr_window_get, _libvswitch.vmk_TCPHdr_window_set)
    __swig_setmethods__["checksum"] = _libvswitch.vmk_TCPHdr_checksum_set
    __swig_getmethods__["checksum"] = _libvswitch.vmk_TCPHdr_checksum_get
    if _newclass:checksum = _swig_property(_libvswitch.vmk_TCPHdr_checksum_get, _libvswitch.vmk_TCPHdr_checksum_set)
    __swig_setmethods__["urgPtr"] = _libvswitch.vmk_TCPHdr_urgPtr_set
    __swig_getmethods__["urgPtr"] = _libvswitch.vmk_TCPHdr_urgPtr_get
    if _newclass:urgPtr = _swig_property(_libvswitch.vmk_TCPHdr_urgPtr_get, _libvswitch.vmk_TCPHdr_urgPtr_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_TCPHdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_TCPHdr
    __del__ = lambda self : None;
vmk_TCPHdr_swigregister = _libvswitch.vmk_TCPHdr_swigregister
vmk_TCPHdr_swigregister(vmk_TCPHdr)

class vmk_FenceHdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_FenceHdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_FenceHdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _libvswitch.vmk_FenceHdr_version_set
    __swig_getmethods__["version"] = _libvswitch.vmk_FenceHdr_version_get
    if _newclass:version = _swig_property(_libvswitch.vmk_FenceHdr_version_get, _libvswitch.vmk_FenceHdr_version_set)
    __swig_setmethods__["frag"] = _libvswitch.vmk_FenceHdr_frag_set
    __swig_getmethods__["frag"] = _libvswitch.vmk_FenceHdr_frag_get
    if _newclass:frag = _swig_property(_libvswitch.vmk_FenceHdr_frag_get, _libvswitch.vmk_FenceHdr_frag_set)
    __swig_setmethods__["fragmentID"] = _libvswitch.vmk_FenceHdr_fragmentID_set
    __swig_getmethods__["fragmentID"] = _libvswitch.vmk_FenceHdr_fragmentID_get
    if _newclass:fragmentID = _swig_property(_libvswitch.vmk_FenceHdr_fragmentID_get, _libvswitch.vmk_FenceHdr_fragmentID_set)
    __swig_setmethods__["fenceID"] = _libvswitch.vmk_FenceHdr_fenceID_set
    __swig_getmethods__["fenceID"] = _libvswitch.vmk_FenceHdr_fenceID_get
    if _newclass:fenceID = _swig_property(_libvswitch.vmk_FenceHdr_fenceID_get, _libvswitch.vmk_FenceHdr_fenceID_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_FenceHdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_FenceHdr
    __del__ = lambda self : None;
vmk_FenceHdr_swigregister = _libvswitch.vmk_FenceHdr_swigregister
vmk_FenceHdr_swigregister(vmk_FenceHdr)

VMK_VIRTUAL_NETWORK_ID_NONE = _libvswitch.VMK_VIRTUAL_NETWORK_ID_NONE
VMK_VIRTUAL_NETWORK_ID_MAX = _libvswitch.VMK_VIRTUAL_NETWORK_ID_MAX
class vmk_VXLANHdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_VXLANHdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_VXLANHdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flags1"] = _libvswitch.vmk_VXLANHdr_flags1_set
    __swig_getmethods__["flags1"] = _libvswitch.vmk_VXLANHdr_flags1_get
    if _newclass:flags1 = _swig_property(_libvswitch.vmk_VXLANHdr_flags1_get, _libvswitch.vmk_VXLANHdr_flags1_set)
    __swig_setmethods__["locallyReplicate"] = _libvswitch.vmk_VXLANHdr_locallyReplicate_set
    __swig_getmethods__["locallyReplicate"] = _libvswitch.vmk_VXLANHdr_locallyReplicate_get
    if _newclass:locallyReplicate = _swig_property(_libvswitch.vmk_VXLANHdr_locallyReplicate_get, _libvswitch.vmk_VXLANHdr_locallyReplicate_set)
    __swig_setmethods__["instanceID"] = _libvswitch.vmk_VXLANHdr_instanceID_set
    __swig_getmethods__["instanceID"] = _libvswitch.vmk_VXLANHdr_instanceID_get
    if _newclass:instanceID = _swig_property(_libvswitch.vmk_VXLANHdr_instanceID_get, _libvswitch.vmk_VXLANHdr_instanceID_set)
    __swig_setmethods__["flags2"] = _libvswitch.vmk_VXLANHdr_flags2_set
    __swig_getmethods__["flags2"] = _libvswitch.vmk_VXLANHdr_flags2_get
    if _newclass:flags2 = _swig_property(_libvswitch.vmk_VXLANHdr_flags2_get, _libvswitch.vmk_VXLANHdr_flags2_set)
    __swig_setmethods__["reserved1"] = _libvswitch.vmk_VXLANHdr_reserved1_set
    __swig_getmethods__["reserved1"] = _libvswitch.vmk_VXLANHdr_reserved1_get
    if _newclass:reserved1 = _swig_property(_libvswitch.vmk_VXLANHdr_reserved1_get, _libvswitch.vmk_VXLANHdr_reserved1_set)
    __swig_setmethods__["vxlanID"] = _libvswitch.vmk_VXLANHdr_vxlanID_set
    __swig_getmethods__["vxlanID"] = _libvswitch.vmk_VXLANHdr_vxlanID_get
    if _newclass:vxlanID = _swig_property(_libvswitch.vmk_VXLANHdr_vxlanID_get, _libvswitch.vmk_VXLANHdr_vxlanID_set)
    __swig_setmethods__["reserved2"] = _libvswitch.vmk_VXLANHdr_reserved2_set
    __swig_getmethods__["reserved2"] = _libvswitch.vmk_VXLANHdr_reserved2_get
    if _newclass:reserved2 = _swig_property(_libvswitch.vmk_VXLANHdr_reserved2_get, _libvswitch.vmk_VXLANHdr_reserved2_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_VXLANHdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_VXLANHdr
    __del__ = lambda self : None;
vmk_VXLANHdr_swigregister = _libvswitch.vmk_VXLANHdr_swigregister
vmk_VXLANHdr_swigregister(vmk_VXLANHdr)

VMK_UDP_PROTO_VXLAN = _libvswitch.VMK_UDP_PROTO_VXLAN
class vmk_GREHdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_GREHdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_GREHdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reserved1"] = _libvswitch.vmk_GREHdr_reserved1_set
    __swig_getmethods__["reserved1"] = _libvswitch.vmk_GREHdr_reserved1_get
    if _newclass:reserved1 = _swig_property(_libvswitch.vmk_GREHdr_reserved1_get, _libvswitch.vmk_GREHdr_reserved1_set)
    __swig_setmethods__["strictSourceRoute"] = _libvswitch.vmk_GREHdr_strictSourceRoute_set
    __swig_getmethods__["strictSourceRoute"] = _libvswitch.vmk_GREHdr_strictSourceRoute_get
    if _newclass:strictSourceRoute = _swig_property(_libvswitch.vmk_GREHdr_strictSourceRoute_get, _libvswitch.vmk_GREHdr_strictSourceRoute_set)
    __swig_setmethods__["sequencePresent"] = _libvswitch.vmk_GREHdr_sequencePresent_set
    __swig_getmethods__["sequencePresent"] = _libvswitch.vmk_GREHdr_sequencePresent_get
    if _newclass:sequencePresent = _swig_property(_libvswitch.vmk_GREHdr_sequencePresent_get, _libvswitch.vmk_GREHdr_sequencePresent_set)
    __swig_setmethods__["keyPresent"] = _libvswitch.vmk_GREHdr_keyPresent_set
    __swig_getmethods__["keyPresent"] = _libvswitch.vmk_GREHdr_keyPresent_get
    if _newclass:keyPresent = _swig_property(_libvswitch.vmk_GREHdr_keyPresent_get, _libvswitch.vmk_GREHdr_keyPresent_set)
    __swig_setmethods__["routingPresent"] = _libvswitch.vmk_GREHdr_routingPresent_set
    __swig_getmethods__["routingPresent"] = _libvswitch.vmk_GREHdr_routingPresent_get
    if _newclass:routingPresent = _swig_property(_libvswitch.vmk_GREHdr_routingPresent_get, _libvswitch.vmk_GREHdr_routingPresent_set)
    __swig_setmethods__["checksumPresent"] = _libvswitch.vmk_GREHdr_checksumPresent_set
    __swig_getmethods__["checksumPresent"] = _libvswitch.vmk_GREHdr_checksumPresent_get
    if _newclass:checksumPresent = _swig_property(_libvswitch.vmk_GREHdr_checksumPresent_get, _libvswitch.vmk_GREHdr_checksumPresent_set)
    __swig_setmethods__["version"] = _libvswitch.vmk_GREHdr_version_set
    __swig_getmethods__["version"] = _libvswitch.vmk_GREHdr_version_get
    if _newclass:version = _swig_property(_libvswitch.vmk_GREHdr_version_get, _libvswitch.vmk_GREHdr_version_set)
    __swig_setmethods__["reserved2"] = _libvswitch.vmk_GREHdr_reserved2_set
    __swig_getmethods__["reserved2"] = _libvswitch.vmk_GREHdr_reserved2_get
    if _newclass:reserved2 = _swig_property(_libvswitch.vmk_GREHdr_reserved2_get, _libvswitch.vmk_GREHdr_reserved2_set)
    __swig_setmethods__["ackPresent"] = _libvswitch.vmk_GREHdr_ackPresent_set
    __swig_getmethods__["ackPresent"] = _libvswitch.vmk_GREHdr_ackPresent_get
    if _newclass:ackPresent = _swig_property(_libvswitch.vmk_GREHdr_ackPresent_get, _libvswitch.vmk_GREHdr_ackPresent_set)
    __swig_setmethods__["flags"] = _libvswitch.vmk_GREHdr_flags_set
    __swig_getmethods__["flags"] = _libvswitch.vmk_GREHdr_flags_get
    if _newclass:flags = _swig_property(_libvswitch.vmk_GREHdr_flags_get, _libvswitch.vmk_GREHdr_flags_set)
    __swig_setmethods__["protocol"] = _libvswitch.vmk_GREHdr_protocol_set
    __swig_getmethods__["protocol"] = _libvswitch.vmk_GREHdr_protocol_get
    if _newclass:protocol = _swig_property(_libvswitch.vmk_GREHdr_protocol_get, _libvswitch.vmk_GREHdr_protocol_set)
    __swig_setmethods__["options"] = _libvswitch.vmk_GREHdr_options_set
    __swig_getmethods__["options"] = _libvswitch.vmk_GREHdr_options_get
    if _newclass:options = _swig_property(_libvswitch.vmk_GREHdr_options_get, _libvswitch.vmk_GREHdr_options_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_GREHdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_GREHdr
    __del__ = lambda self : None;
vmk_GREHdr_swigregister = _libvswitch.vmk_GREHdr_swigregister
vmk_GREHdr_swigregister(vmk_GREHdr)

VMK_NET_PROTO_GENEVE_UDP_PORT = _libvswitch.VMK_NET_PROTO_GENEVE_UDP_PORT
VMK_NET_PROTO_GENEVE_UDP_PORT_NBO = _libvswitch.VMK_NET_PROTO_GENEVE_UDP_PORT_NBO
class vmk_GeneveHdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_GeneveHdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_GeneveHdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["optionsLength"] = _libvswitch.vmk_GeneveHdr_optionsLength_set
    __swig_getmethods__["optionsLength"] = _libvswitch.vmk_GeneveHdr_optionsLength_get
    if _newclass:optionsLength = _swig_property(_libvswitch.vmk_GeneveHdr_optionsLength_get, _libvswitch.vmk_GeneveHdr_optionsLength_set)
    __swig_setmethods__["version"] = _libvswitch.vmk_GeneveHdr_version_set
    __swig_getmethods__["version"] = _libvswitch.vmk_GeneveHdr_version_get
    if _newclass:version = _swig_property(_libvswitch.vmk_GeneveHdr_version_get, _libvswitch.vmk_GeneveHdr_version_set)
    __swig_setmethods__["reserved1"] = _libvswitch.vmk_GeneveHdr_reserved1_set
    __swig_getmethods__["reserved1"] = _libvswitch.vmk_GeneveHdr_reserved1_get
    if _newclass:reserved1 = _swig_property(_libvswitch.vmk_GeneveHdr_reserved1_get, _libvswitch.vmk_GeneveHdr_reserved1_set)
    __swig_setmethods__["criticalOptions"] = _libvswitch.vmk_GeneveHdr_criticalOptions_set
    __swig_getmethods__["criticalOptions"] = _libvswitch.vmk_GeneveHdr_criticalOptions_get
    if _newclass:criticalOptions = _swig_property(_libvswitch.vmk_GeneveHdr_criticalOptions_get, _libvswitch.vmk_GeneveHdr_criticalOptions_set)
    __swig_setmethods__["oamFrame"] = _libvswitch.vmk_GeneveHdr_oamFrame_set
    __swig_getmethods__["oamFrame"] = _libvswitch.vmk_GeneveHdr_oamFrame_get
    if _newclass:oamFrame = _swig_property(_libvswitch.vmk_GeneveHdr_oamFrame_get, _libvswitch.vmk_GeneveHdr_oamFrame_set)
    __swig_setmethods__["protocolType"] = _libvswitch.vmk_GeneveHdr_protocolType_set
    __swig_getmethods__["protocolType"] = _libvswitch.vmk_GeneveHdr_protocolType_get
    if _newclass:protocolType = _swig_property(_libvswitch.vmk_GeneveHdr_protocolType_get, _libvswitch.vmk_GeneveHdr_protocolType_set)
    __swig_setmethods__["virtualNetworkId"] = _libvswitch.vmk_GeneveHdr_virtualNetworkId_set
    __swig_getmethods__["virtualNetworkId"] = _libvswitch.vmk_GeneveHdr_virtualNetworkId_get
    if _newclass:virtualNetworkId = _swig_property(_libvswitch.vmk_GeneveHdr_virtualNetworkId_get, _libvswitch.vmk_GeneveHdr_virtualNetworkId_set)
    __swig_setmethods__["reserved2"] = _libvswitch.vmk_GeneveHdr_reserved2_set
    __swig_getmethods__["reserved2"] = _libvswitch.vmk_GeneveHdr_reserved2_get
    if _newclass:reserved2 = _swig_property(_libvswitch.vmk_GeneveHdr_reserved2_get, _libvswitch.vmk_GeneveHdr_reserved2_set)
    __swig_setmethods__["options"] = _libvswitch.vmk_GeneveHdr_options_set
    __swig_getmethods__["options"] = _libvswitch.vmk_GeneveHdr_options_get
    if _newclass:options = _swig_property(_libvswitch.vmk_GeneveHdr_options_get, _libvswitch.vmk_GeneveHdr_options_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_GeneveHdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_GeneveHdr
    __del__ = lambda self : None;
vmk_GeneveHdr_swigregister = _libvswitch.vmk_GeneveHdr_swigregister
vmk_GeneveHdr_swigregister(vmk_GeneveHdr)

class vmk_GeneveOptionHdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_GeneveOptionHdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_GeneveOptionHdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["optClass"] = _libvswitch.vmk_GeneveOptionHdr_optClass_set
    __swig_getmethods__["optClass"] = _libvswitch.vmk_GeneveOptionHdr_optClass_get
    if _newclass:optClass = _swig_property(_libvswitch.vmk_GeneveOptionHdr_optClass_get, _libvswitch.vmk_GeneveOptionHdr_optClass_set)
    __swig_setmethods__["optType"] = _libvswitch.vmk_GeneveOptionHdr_optType_set
    __swig_getmethods__["optType"] = _libvswitch.vmk_GeneveOptionHdr_optType_get
    if _newclass:optType = _swig_property(_libvswitch.vmk_GeneveOptionHdr_optType_get, _libvswitch.vmk_GeneveOptionHdr_optType_set)
    __swig_setmethods__["optLength"] = _libvswitch.vmk_GeneveOptionHdr_optLength_set
    __swig_getmethods__["optLength"] = _libvswitch.vmk_GeneveOptionHdr_optLength_get
    if _newclass:optLength = _swig_property(_libvswitch.vmk_GeneveOptionHdr_optLength_get, _libvswitch.vmk_GeneveOptionHdr_optLength_set)
    __swig_setmethods__["reserved"] = _libvswitch.vmk_GeneveOptionHdr_reserved_set
    __swig_getmethods__["reserved"] = _libvswitch.vmk_GeneveOptionHdr_reserved_get
    if _newclass:reserved = _swig_property(_libvswitch.vmk_GeneveOptionHdr_reserved_get, _libvswitch.vmk_GeneveOptionHdr_reserved_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_GeneveOptionHdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_GeneveOptionHdr
    __del__ = lambda self : None;
vmk_GeneveOptionHdr_swigregister = _libvswitch.vmk_GeneveOptionHdr_swigregister
vmk_GeneveOptionHdr_swigregister(vmk_GeneveOptionHdr)

class vmk_PIMHdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_PIMHdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_PIMHdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libvswitch.vmk_PIMHdr_type_set
    __swig_getmethods__["type"] = _libvswitch.vmk_PIMHdr_type_get
    if _newclass:type = _swig_property(_libvswitch.vmk_PIMHdr_type_get, _libvswitch.vmk_PIMHdr_type_set)
    __swig_setmethods__["version"] = _libvswitch.vmk_PIMHdr_version_set
    __swig_getmethods__["version"] = _libvswitch.vmk_PIMHdr_version_get
    if _newclass:version = _swig_property(_libvswitch.vmk_PIMHdr_version_get, _libvswitch.vmk_PIMHdr_version_set)
    __swig_setmethods__["reserved"] = _libvswitch.vmk_PIMHdr_reserved_set
    __swig_getmethods__["reserved"] = _libvswitch.vmk_PIMHdr_reserved_get
    if _newclass:reserved = _swig_property(_libvswitch.vmk_PIMHdr_reserved_get, _libvswitch.vmk_PIMHdr_reserved_set)
    __swig_setmethods__["checksum"] = _libvswitch.vmk_PIMHdr_checksum_set
    __swig_getmethods__["checksum"] = _libvswitch.vmk_PIMHdr_checksum_get
    if _newclass:checksum = _swig_property(_libvswitch.vmk_PIMHdr_checksum_get, _libvswitch.vmk_PIMHdr_checksum_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_PIMHdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_PIMHdr
    __del__ = lambda self : None;
vmk_PIMHdr_swigregister = _libvswitch.vmk_PIMHdr_swigregister
vmk_PIMHdr_swigregister(vmk_PIMHdr)

VMK_PKTCAP_NO_DROP = _libvswitch.VMK_PKTCAP_NO_DROP
VMK_PKTCAP_ENQUEUE_FAIL_DROP = _libvswitch.VMK_PKTCAP_ENQUEUE_FAIL_DROP
VMK_PKTCAP_DEV_STOPPED_DROP = _libvswitch.VMK_PKTCAP_DEV_STOPPED_DROP
VMK_PKTCAP_DEV_TX_DROP = _libvswitch.VMK_PKTCAP_DEV_TX_DROP
VMK_PKTCAP_DEV_RX_DROP = _libvswitch.VMK_PKTCAP_DEV_RX_DROP
VMK_PKTCAP_TSO_FAIL_DROP = _libvswitch.VMK_PKTCAP_TSO_FAIL_DROP
VMK_PKTCAP_TERMINAL_IOCHAIN_DROP = _libvswitch.VMK_PKTCAP_TERMINAL_IOCHAIN_DROP
VMK_PKTCAP_SHAPER_DROP = _libvswitch.VMK_PKTCAP_SHAPER_DROP
VMK_PKTCAP_CSUM_FAIL_DROP = _libvswitch.VMK_PKTCAP_CSUM_FAIL_DROP
VMK_PKTCAP_VLAN_DROP = _libvswitch.VMK_PKTCAP_VLAN_DROP
VMK_PKTCAP_VXLAN_DROP = _libvswitch.VMK_PKTCAP_VXLAN_DROP
VMK_PKTCAP_PADDING_FAIL_DROP = _libvswitch.VMK_PKTCAP_PADDING_FAIL_DROP
VMK_PKTCAP_MAC_FORGERY_DROP = _libvswitch.VMK_PKTCAP_MAC_FORGERY_DROP
VMK_PKTCAP_FIREWALL_DROP = _libvswitch.VMK_PKTCAP_FIREWALL_DROP
VMK_PKTCAP_PORT_BLOCKED_DROP = _libvswitch.VMK_PKTCAP_PORT_BLOCKED_DROP
VMK_PKTCAP_DEFAULT_DROP = _libvswitch.VMK_PKTCAP_DEFAULT_DROP
VMK_PKTCAP_TCPIP_DROP = _libvswitch.VMK_PKTCAP_TCPIP_DROP
VMK_PKTCAP_OVERLAY_DROP = _libvswitch.VMK_PKTCAP_OVERLAY_DROP
VMK_PKTCAP_DROP_REASON_MAX = _libvswitch.VMK_PKTCAP_DROP_REASON_MAX
VMK_PKTCAP_POINT_INVALID = _libvswitch.VMK_PKTCAP_POINT_INVALID
VMK_PKTCAP_POINT_DYNAMIC = _libvswitch.VMK_PKTCAP_POINT_DYNAMIC
VMK_PKTCAP_POINT_UPLINK_DRIVER_RX = _libvswitch.VMK_PKTCAP_POINT_UPLINK_DRIVER_RX
VMK_PKTCAP_POINT_UPLINK_DRIVER_TX = _libvswitch.VMK_PKTCAP_POINT_UPLINK_DRIVER_TX
VMK_PKTCAP_POINT_VNIC_TX = _libvswitch.VMK_PKTCAP_POINT_VNIC_TX
VMK_PKTCAP_POINT_VNIC_RX = _libvswitch.VMK_PKTCAP_POINT_VNIC_RX
VMK_PKTCAP_POINT_PORT_INPUT = _libvswitch.VMK_PKTCAP_POINT_PORT_INPUT
VMK_PKTCAP_POINT_IOCHAIN = _libvswitch.VMK_PKTCAP_POINT_IOCHAIN
VMK_PKTCAP_POINT_SWITCH_DISPATCH = _libvswitch.VMK_PKTCAP_POINT_SWITCH_DISPATCH
VMK_PKTCAP_POINT_SWITCH_OUTPUT = _libvswitch.VMK_PKTCAP_POINT_SWITCH_OUTPUT
VMK_PKTCAP_POINT_PORT_OUTPUT = _libvswitch.VMK_PKTCAP_POINT_PORT_OUTPUT
VMK_PKTCAP_POINT_TCPIP = _libvswitch.VMK_PKTCAP_POINT_TCPIP
VMK_PKTCAP_POINT_PRE_DVFILTER = _libvswitch.VMK_PKTCAP_POINT_PRE_DVFILTER
VMK_PKTCAP_POINT_POST_DVFILTER = _libvswitch.VMK_PKTCAP_POINT_POST_DVFILTER
VMK_PKTCAP_POINT_DROP = _libvswitch.VMK_PKTCAP_POINT_DROP
VMK_PKTCAP_POINT_VDR_RX_FIRST = _libvswitch.VMK_PKTCAP_POINT_VDR_RX_FIRST
VMK_PKTCAP_POINT_VDR_TX_FIRST = _libvswitch.VMK_PKTCAP_POINT_VDR_TX_FIRST
VMK_PKTCAP_POINT_VDR_RX_TERMINAL = _libvswitch.VMK_PKTCAP_POINT_VDR_RX_TERMINAL
VMK_PKTCAP_POINT_VDR_TX_TERMINAL = _libvswitch.VMK_PKTCAP_POINT_VDR_TX_TERMINAL
VMK_PKTCAP_POINT_PKTFREE = _libvswitch.VMK_PKTCAP_POINT_PKTFREE
VMK_PKTCAP_POINT_TCPIP_RX = _libvswitch.VMK_PKTCAP_POINT_TCPIP_RX
VMK_PKTCAP_POINT_TCPIP_TX = _libvswitch.VMK_PKTCAP_POINT_TCPIP_TX
VMK_PKTCAP_POINT_UPLINK_KERNEL_RX = _libvswitch.VMK_PKTCAP_POINT_UPLINK_KERNEL_RX
VMK_PKTCAP_POINT_UPLINK_KERNEL_TX = _libvswitch.VMK_PKTCAP_POINT_UPLINK_KERNEL_TX
VMK_PKTCAP_POINT_PRE_OVERLAY_INPUT = _libvswitch.VMK_PKTCAP_POINT_PRE_OVERLAY_INPUT
VMK_PKTCAP_POINT_POST_OVERLAY_INPUT = _libvswitch.VMK_PKTCAP_POINT_POST_OVERLAY_INPUT
VMK_PKTCAP_POINT_PRE_OVERLAY_OUTPUT = _libvswitch.VMK_PKTCAP_POINT_PRE_OVERLAY_OUTPUT
VMK_PKTCAP_POINT_POST_OVERLAY_OUTPUT = _libvswitch.VMK_PKTCAP_POINT_POST_OVERLAY_OUTPUT
VMK_PKTCAP_POINT_MAX = _libvswitch.VMK_PKTCAP_POINT_MAX
VMK_NET_OVERLAY_NETWORK_KEY_NON_APPLICABLE = _libvswitch.VMK_NET_OVERLAY_NETWORK_KEY_NON_APPLICABLE
VMK_PT_UPT = _libvswitch.VMK_PT_UPT
VMK_PT_CDPT = _libvswitch.VMK_PT_CDPT
VMK_VSWITCH_INVALID_PORT_ID = _libvswitch.VMK_VSWITCH_INVALID_PORT_ID
VMK_PORT_CLIENT_NAME_MAX = _libvswitch.VMK_PORT_CLIENT_NAME_MAX
VMK_PORTSET_DEFAULT_RESPOOL_TAG = _libvswitch.VMK_PORTSET_DEFAULT_RESPOOL_TAG
VMK_LINK_STATE_DOWN = _libvswitch.VMK_LINK_STATE_DOWN
VMK_LINK_STATE_UP = _libvswitch.VMK_LINK_STATE_UP
VMK_LINK_SPEED_AUTO = _libvswitch.VMK_LINK_SPEED_AUTO
VMK_LINK_SPEED_10_MBPS = _libvswitch.VMK_LINK_SPEED_10_MBPS
VMK_LINK_SPEED_100_MBPS = _libvswitch.VMK_LINK_SPEED_100_MBPS
VMK_LINK_SPEED_1000_MBPS = _libvswitch.VMK_LINK_SPEED_1000_MBPS
VMK_LINK_SPEED_2500_MBPS = _libvswitch.VMK_LINK_SPEED_2500_MBPS
VMK_LINK_SPEED_5000_MBPS = _libvswitch.VMK_LINK_SPEED_5000_MBPS
VMK_LINK_SPEED_10000_MBPS = _libvswitch.VMK_LINK_SPEED_10000_MBPS
VMK_LINK_SPEED_20000_MBPS = _libvswitch.VMK_LINK_SPEED_20000_MBPS
VMK_LINK_SPEED_25000_MBPS = _libvswitch.VMK_LINK_SPEED_25000_MBPS
VMK_LINK_SPEED_40000_MBPS = _libvswitch.VMK_LINK_SPEED_40000_MBPS
VMK_LINK_SPEED_50000_MBPS = _libvswitch.VMK_LINK_SPEED_50000_MBPS
VMK_LINK_SPEED_56000_MBPS = _libvswitch.VMK_LINK_SPEED_56000_MBPS
VMK_LINK_SPEED_100000_MBPS = _libvswitch.VMK_LINK_SPEED_100000_MBPS
VMK_LINK_DUPLEX_AUTO = _libvswitch.VMK_LINK_DUPLEX_AUTO
VMK_LINK_DUPLEX_HALF = _libvswitch.VMK_LINK_DUPLEX_HALF
VMK_LINK_DUPLEX_FULL = _libvswitch.VMK_LINK_DUPLEX_FULL
class vmk_LinkStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_LinkStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_LinkStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _libvswitch.vmk_LinkStatus_state_set
    __swig_getmethods__["state"] = _libvswitch.vmk_LinkStatus_state_get
    if _newclass:state = _swig_property(_libvswitch.vmk_LinkStatus_state_get, _libvswitch.vmk_LinkStatus_state_set)
    __swig_setmethods__["speed"] = _libvswitch.vmk_LinkStatus_speed_set
    __swig_getmethods__["speed"] = _libvswitch.vmk_LinkStatus_speed_get
    if _newclass:speed = _swig_property(_libvswitch.vmk_LinkStatus_speed_get, _libvswitch.vmk_LinkStatus_speed_set)
    __swig_setmethods__["duplex"] = _libvswitch.vmk_LinkStatus_duplex_set
    __swig_getmethods__["duplex"] = _libvswitch.vmk_LinkStatus_duplex_get
    if _newclass:duplex = _swig_property(_libvswitch.vmk_LinkStatus_duplex_get, _libvswitch.vmk_LinkStatus_duplex_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_LinkStatus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_LinkStatus
    __del__ = lambda self : None;
vmk_LinkStatus_swigregister = _libvswitch.vmk_LinkStatus_swigregister
vmk_LinkStatus_swigregister(vmk_LinkStatus)

VMK_LINK_MEDIA_NONE = _libvswitch.VMK_LINK_MEDIA_NONE
VMK_LINK_MEDIA_UNKNOWN = _libvswitch.VMK_LINK_MEDIA_UNKNOWN
VMK_LINK_MEDIA_BASE_T = _libvswitch.VMK_LINK_MEDIA_BASE_T
VMK_LINK_MEDIA_BASE_X = _libvswitch.VMK_LINK_MEDIA_BASE_X
VMK_LINK_MEDIA_BASE_KX = _libvswitch.VMK_LINK_MEDIA_BASE_KX
VMK_LINK_MEDIA_BASE_SX = _libvswitch.VMK_LINK_MEDIA_BASE_SX
VMK_LINK_MEDIA_BASE_LX = _libvswitch.VMK_LINK_MEDIA_BASE_LX
VMK_LINK_MEDIA_BASE_KR = _libvswitch.VMK_LINK_MEDIA_BASE_KR
VMK_LINK_MEDIA_BASE_LR = _libvswitch.VMK_LINK_MEDIA_BASE_LR
VMK_LINK_MEDIA_BASE_SR = _libvswitch.VMK_LINK_MEDIA_BASE_SR
VMK_LINK_MEDIA_BASE_ER = _libvswitch.VMK_LINK_MEDIA_BASE_ER
VMK_LINK_MEDIA_BASE_TWINAX = _libvswitch.VMK_LINK_MEDIA_BASE_TWINAX
VMK_LINK_MEDIA_BASE_TWINAX_LONG = _libvswitch.VMK_LINK_MEDIA_BASE_TWINAX_LONG
VMK_LINK_MEDIA_BASE_LRM = _libvswitch.VMK_LINK_MEDIA_BASE_LRM
VMK_LINK_MEDIA_BASE_CR1 = _libvswitch.VMK_LINK_MEDIA_BASE_CR1
VMK_LINK_MEDIA_BASE_KR2 = _libvswitch.VMK_LINK_MEDIA_BASE_KR2
VMK_LINK_MEDIA_BASE_MLD2 = _libvswitch.VMK_LINK_MEDIA_BASE_MLD2
VMK_LINK_MEDIA_BASE_KR4 = _libvswitch.VMK_LINK_MEDIA_BASE_KR4
VMK_LINK_MEDIA_BASE_KX4 = _libvswitch.VMK_LINK_MEDIA_BASE_KX4
VMK_LINK_MEDIA_BASE_CR4 = _libvswitch.VMK_LINK_MEDIA_BASE_CR4
VMK_LINK_MEDIA_BASE_SR4 = _libvswitch.VMK_LINK_MEDIA_BASE_SR4
VMK_LINK_MEDIA_BASE_LR4 = _libvswitch.VMK_LINK_MEDIA_BASE_LR4
VMK_LINK_MEDIA_BASE_R4 = _libvswitch.VMK_LINK_MEDIA_BASE_R4
VMK_LINK_MEDIA_BASE_SGMII = _libvswitch.VMK_LINK_MEDIA_BASE_SGMII
VMK_LINK_MEDIA_BASE_SFI = _libvswitch.VMK_LINK_MEDIA_BASE_SFI
VMK_LINK_MEDIA_BASE_XLPPI = _libvswitch.VMK_LINK_MEDIA_BASE_XLPPI
VMK_LINK_MEDIA_BASE_CX_SGMII = _libvswitch.VMK_LINK_MEDIA_BASE_CX_SGMII
VMK_PORTSET_RESPOOL_LIMIT_INFINITE = _libvswitch.VMK_PORTSET_RESPOOL_LIMIT_INFINITE
VMK_PORTSET_RESPOOL_DEFAULT_QUEUE_DEPTH = _libvswitch.VMK_PORTSET_RESPOOL_DEFAULT_QUEUE_DEPTH
VMK_PORTSET_RESPOOL_DEFAULT_PRIORITY_TAG = _libvswitch.VMK_PORTSET_RESPOOL_DEFAULT_PRIORITY_TAG
VMK_PORTSET_RESPOOL_MAX_SHARES = _libvswitch.VMK_PORTSET_RESPOOL_MAX_SHARES
class vmk_PortsetResPoolCfg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_PortsetResPoolCfg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_PortsetResPoolCfg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["shares"] = _libvswitch.vmk_PortsetResPoolCfg_shares_set
    __swig_getmethods__["shares"] = _libvswitch.vmk_PortsetResPoolCfg_shares_get
    if _newclass:shares = _swig_property(_libvswitch.vmk_PortsetResPoolCfg_shares_get, _libvswitch.vmk_PortsetResPoolCfg_shares_set)
    __swig_setmethods__["limit"] = _libvswitch.vmk_PortsetResPoolCfg_limit_set
    __swig_getmethods__["limit"] = _libvswitch.vmk_PortsetResPoolCfg_limit_get
    if _newclass:limit = _swig_property(_libvswitch.vmk_PortsetResPoolCfg_limit_get, _libvswitch.vmk_PortsetResPoolCfg_limit_set)
    __swig_setmethods__["reservation"] = _libvswitch.vmk_PortsetResPoolCfg_reservation_set
    __swig_getmethods__["reservation"] = _libvswitch.vmk_PortsetResPoolCfg_reservation_get
    if _newclass:reservation = _swig_property(_libvswitch.vmk_PortsetResPoolCfg_reservation_get, _libvswitch.vmk_PortsetResPoolCfg_reservation_set)
    __swig_setmethods__["pTag"] = _libvswitch.vmk_PortsetResPoolCfg_pTag_set
    __swig_getmethods__["pTag"] = _libvswitch.vmk_PortsetResPoolCfg_pTag_get
    if _newclass:pTag = _swig_property(_libvswitch.vmk_PortsetResPoolCfg_pTag_get, _libvswitch.vmk_PortsetResPoolCfg_pTag_set)
    __swig_setmethods__["queueDepth"] = _libvswitch.vmk_PortsetResPoolCfg_queueDepth_set
    __swig_getmethods__["queueDepth"] = _libvswitch.vmk_PortsetResPoolCfg_queueDepth_get
    if _newclass:queueDepth = _swig_property(_libvswitch.vmk_PortsetResPoolCfg_queueDepth_get, _libvswitch.vmk_PortsetResPoolCfg_queueDepth_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_PortsetResPoolCfg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_PortsetResPoolCfg
    __del__ = lambda self : None;
vmk_PortsetResPoolCfg_swigregister = _libvswitch.vmk_PortsetResPoolCfg_swigregister
vmk_PortsetResPoolCfg_swigregister(vmk_PortsetResPoolCfg)

class vmk_PortsetResPoolStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_PortsetResPoolStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_PortsetResPoolStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pktsIn"] = _libvswitch.vmk_PortsetResPoolStats_pktsIn_set
    __swig_getmethods__["pktsIn"] = _libvswitch.vmk_PortsetResPoolStats_pktsIn_get
    if _newclass:pktsIn = _swig_property(_libvswitch.vmk_PortsetResPoolStats_pktsIn_get, _libvswitch.vmk_PortsetResPoolStats_pktsIn_set)
    __swig_setmethods__["bytesIn"] = _libvswitch.vmk_PortsetResPoolStats_bytesIn_set
    __swig_getmethods__["bytesIn"] = _libvswitch.vmk_PortsetResPoolStats_bytesIn_get
    if _newclass:bytesIn = _swig_property(_libvswitch.vmk_PortsetResPoolStats_bytesIn_get, _libvswitch.vmk_PortsetResPoolStats_bytesIn_set)
    __swig_setmethods__["pktsOut"] = _libvswitch.vmk_PortsetResPoolStats_pktsOut_set
    __swig_getmethods__["pktsOut"] = _libvswitch.vmk_PortsetResPoolStats_pktsOut_get
    if _newclass:pktsOut = _swig_property(_libvswitch.vmk_PortsetResPoolStats_pktsOut_get, _libvswitch.vmk_PortsetResPoolStats_pktsOut_set)
    __swig_setmethods__["bytesOut"] = _libvswitch.vmk_PortsetResPoolStats_bytesOut_set
    __swig_getmethods__["bytesOut"] = _libvswitch.vmk_PortsetResPoolStats_bytesOut_get
    if _newclass:bytesOut = _swig_property(_libvswitch.vmk_PortsetResPoolStats_bytesOut_get, _libvswitch.vmk_PortsetResPoolStats_bytesOut_set)
    __swig_setmethods__["pktsDropped"] = _libvswitch.vmk_PortsetResPoolStats_pktsDropped_set
    __swig_getmethods__["pktsDropped"] = _libvswitch.vmk_PortsetResPoolStats_pktsDropped_get
    if _newclass:pktsDropped = _swig_property(_libvswitch.vmk_PortsetResPoolStats_pktsDropped_get, _libvswitch.vmk_PortsetResPoolStats_pktsDropped_set)
    __swig_setmethods__["bytesDropped"] = _libvswitch.vmk_PortsetResPoolStats_bytesDropped_set
    __swig_getmethods__["bytesDropped"] = _libvswitch.vmk_PortsetResPoolStats_bytesDropped_get
    if _newclass:bytesDropped = _swig_property(_libvswitch.vmk_PortsetResPoolStats_bytesDropped_get, _libvswitch.vmk_PortsetResPoolStats_bytesDropped_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_PortsetResPoolStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_PortsetResPoolStats
    __del__ = lambda self : None;
vmk_PortsetResPoolStats_swigregister = _libvswitch.vmk_PortsetResPoolStats_swigregister
vmk_PortsetResPoolStats_swigregister(vmk_PortsetResPoolStats)

VMK_PORTSET_VMOTION_RESPOOL_ID = _libvswitch.VMK_PORTSET_VMOTION_RESPOOL_ID
VMK_PORTSET_ISCSI_RESPOOL_ID = _libvswitch.VMK_PORTSET_ISCSI_RESPOOL_ID
VMK_PORTSET_NFS_RESPOOL_ID = _libvswitch.VMK_PORTSET_NFS_RESPOOL_ID
VMK_PORTSET_FT_RESPOOL_ID = _libvswitch.VMK_PORTSET_FT_RESPOOL_ID
VMK_PORTSET_VM_RESPOOL_ID = _libvswitch.VMK_PORTSET_VM_RESPOOL_ID
VMK_PORTSET_MGMT_RESPOOL_ID = _libvswitch.VMK_PORTSET_MGMT_RESPOOL_ID
VMK_PORTSET_FCOE_RESPOOL_ID = _libvswitch.VMK_PORTSET_FCOE_RESPOOL_ID
VMK_PORTSET_HBR_RESPOOL_ID = _libvswitch.VMK_PORTSET_HBR_RESPOOL_ID
VMK_PORTSET_VSAN_RESPOOL_ID = _libvswitch.VMK_PORTSET_VSAN_RESPOOL_ID
VMK_PORTSET_VDP_RESPOOL_ID = _libvswitch.VMK_PORTSET_VDP_RESPOOL_ID
VMK_VDSPROP_SWITCH_ALIAS = _libvswitch.VMK_VDSPROP_SWITCH_ALIAS
VMK_VDSPROP_SWITCH_VERSION = _libvswitch.VMK_VDSPROP_SWITCH_VERSION
VMK_VDSPROP_SWITCH_UPLINKPORTS = _libvswitch.VMK_VDSPROP_SWITCH_UPLINKPORTS
VMK_VDSPROP_SWITCH_OVERLAY = _libvswitch.VMK_VDSPROP_SWITCH_OVERLAY
VMK_VDSPROP_SWITCH_RESPOOLS_LIST = _libvswitch.VMK_VDSPROP_SWITCH_RESPOOLS_LIST
VMK_VDSPROP_SWITCH_RESPOOLS_SCHED = _libvswitch.VMK_VDSPROP_SWITCH_RESPOOLS_SCHED
VMK_VDSPROP_HOST_STATUS = _libvswitch.VMK_VDSPROP_HOST_STATUS
VMK_VDSPROP_HOST_PROXY_STATE = _libvswitch.VMK_VDSPROP_HOST_PROXY_STATE
VMK_VDSPROP_HOST_PROXY = _libvswitch.VMK_VDSPROP_HOST_PROXY
VMK_VDSPROP_HOST_UPLINKPORTS = _libvswitch.VMK_VDSPROP_HOST_UPLINKPORTS
VMK_VDSPROP_PORT_STATUS = _libvswitch.VMK_VDSPROP_PORT_STATUS
VMK_VDSPROP_PORT_TYPE = _libvswitch.VMK_VDSPROP_PORT_TYPE
VMK_VDSPROP_PORT_VLAN = _libvswitch.VMK_VDSPROP_PORT_VLAN
VMK_VDSPROP_PORT_PERSIST = _libvswitch.VMK_VDSPROP_PORT_PERSIST
VMK_VDSPROP_PORT_PTALLOWED = _libvswitch.VMK_VDSPROP_PORT_PTALLOWED
VMK_VDSPROP_PORT_PTALLOWEDRT = _libvswitch.VMK_VDSPROP_PORT_PTALLOWEDRT
VMK_VDSPROP_PORT_STATISTICS = _libvswitch.VMK_VDSPROP_PORT_STATISTICS
VMK_VDSPROP_PORT_ALIAS = _libvswitch.VMK_VDSPROP_PORT_ALIAS
VMK_VDSPROP_PORT_CONNECTID = _libvswitch.VMK_VDSPROP_PORT_CONNECTID
VMK_VDSPROP_PORT_VMKNIC_VLANID = _libvswitch.VMK_VDSPROP_PORT_VMKNIC_VLANID
VMK_VDSPROP_PORT_VNIC_CONNECTEE = _libvswitch.VMK_VDSPROP_PORT_VNIC_CONNECTEE
VMK_VDSPROP_PORT_PORTGROUP = _libvswitch.VMK_VDSPROP_PORT_PORTGROUP
VMK_VDSPROP_PORT_BLOCK = _libvswitch.VMK_VDSPROP_PORT_BLOCK
VMK_VDSPROP_PORT_LINK_STATUS = _libvswitch.VMK_VDSPROP_PORT_LINK_STATUS
VMK_VDSPROP_PORT_RESPOOLS_CFG = _libvswitch.VMK_VDSPROP_PORT_RESPOOLS_CFG
VMK_VDSPROP_PORT_RESPOOL_ASSOC = _libvswitch.VMK_VDSPROP_PORT_RESPOOL_ASSOC
VMK_VDSPROP_PORT_SHAPER_INPUT = _libvswitch.VMK_VDSPROP_PORT_SHAPER_INPUT
VMK_VDSPROP_PORT_SHAPER_BROADCAST = _libvswitch.VMK_VDSPROP_PORT_SHAPER_BROADCAST
VMK_VDSPROP_PORT_SHAPER_OUTPUT = _libvswitch.VMK_VDSPROP_PORT_SHAPER_OUTPUT
VMK_VDSPROP_PORT_OVERLAY = _libvswitch.VMK_VDSPROP_PORT_OVERLAY
VMK_VDSPROP_PORT_DVFILTER = _libvswitch.VMK_VDSPROP_PORT_DVFILTER
VMK_VDSPORT_FORWARD_NOT_READY_BLOCK = _libvswitch.VMK_VDSPORT_FORWARD_NOT_READY_BLOCK
VMK_CISCO_PROP_SWITCH_CDP = _libvswitch.VMK_CISCO_PROP_SWITCH_CDP
VMK_VDSPORTSET_STATE_DEACTIVE = _libvswitch.VMK_VDSPORTSET_STATE_DEACTIVE
VMK_VDSPORTSET_STATE_HOTSWAP = _libvswitch.VMK_VDSPORTSET_STATE_HOTSWAP
VMK_VDS_ID_MAX_LEN = _libvswitch.VMK_VDS_ID_MAX_LEN
VMK_VDS_NAME_MAX_LEN = _libvswitch.VMK_VDS_NAME_MAX_LEN
VMK_VDS_CLASS_NAME_MAX_LEN = _libvswitch.VMK_VDS_CLASS_NAME_MAX_LEN
VMK_VDS_PORT_ID_MAX_LEN = _libvswitch.VMK_VDS_PORT_ID_MAX_LEN
VMK_VDS_PORT_ID_LEGACY_MAX_LEN = _libvswitch.VMK_VDS_PORT_ID_LEGACY_MAX_LEN
VMK_VDS_PORT_ALIAS_MAX_LEN = _libvswitch.VMK_VDS_PORT_ALIAS_MAX_LEN
VMK_VDSPORT_STATUS_INUSE = _libvswitch.VMK_VDSPORT_STATUS_INUSE
VMK_VDSPORT_STATUS_LINKUP = _libvswitch.VMK_VDSPORT_STATUS_LINKUP
VMK_VDSPORT_STATUS_BLOCKED = _libvswitch.VMK_VDSPORT_STATUS_BLOCKED
VMK_VDSPORT_STATUS_PASSTHRU = _libvswitch.VMK_VDSPORT_STATUS_PASSTHRU
class vmk_VDSPortStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_VDSPortStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_VDSPortStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flags"] = _libvswitch.vmk_VDSPortStatus_flags_set
    __swig_getmethods__["flags"] = _libvswitch.vmk_VDSPortStatus_flags_get
    if _newclass:flags = _swig_property(_libvswitch.vmk_VDSPortStatus_flags_get, _libvswitch.vmk_VDSPortStatus_flags_set)
    __swig_setmethods__["noPassthruReason"] = _libvswitch.vmk_VDSPortStatus_noPassthruReason_set
    __swig_getmethods__["noPassthruReason"] = _libvswitch.vmk_VDSPortStatus_noPassthruReason_get
    if _newclass:noPassthruReason = _swig_property(_libvswitch.vmk_VDSPortStatus_noPassthruReason_get, _libvswitch.vmk_VDSPortStatus_noPassthruReason_set)
    __swig_setmethods__["portID"] = _libvswitch.vmk_VDSPortStatus_portID_set
    __swig_getmethods__["portID"] = _libvswitch.vmk_VDSPortStatus_portID_get
    if _newclass:portID = _swig_property(_libvswitch.vmk_VDSPortStatus_portID_get, _libvswitch.vmk_VDSPortStatus_portID_set)
    __swig_setmethods__["displayStr"] = _libvswitch.vmk_VDSPortStatus_displayStr_set
    __swig_getmethods__["displayStr"] = _libvswitch.vmk_VDSPortStatus_displayStr_get
    if _newclass:displayStr = _swig_property(_libvswitch.vmk_VDSPortStatus_displayStr_get, _libvswitch.vmk_VDSPortStatus_displayStr_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_VDSPortStatus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_VDSPortStatus
    __del__ = lambda self : None;
vmk_VDSPortStatus_swigregister = _libvswitch.vmk_VDSPortStatus_swigregister
vmk_VDSPortStatus_swigregister(vmk_VDSPortStatus)

class vmk_VDSPortStatistics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_VDSPortStatistics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_VDSPortStatistics, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pktsInUnicast"] = _libvswitch.vmk_VDSPortStatistics_pktsInUnicast_set
    __swig_getmethods__["pktsInUnicast"] = _libvswitch.vmk_VDSPortStatistics_pktsInUnicast_get
    if _newclass:pktsInUnicast = _swig_property(_libvswitch.vmk_VDSPortStatistics_pktsInUnicast_get, _libvswitch.vmk_VDSPortStatistics_pktsInUnicast_set)
    __swig_setmethods__["bytesInUnicast"] = _libvswitch.vmk_VDSPortStatistics_bytesInUnicast_set
    __swig_getmethods__["bytesInUnicast"] = _libvswitch.vmk_VDSPortStatistics_bytesInUnicast_get
    if _newclass:bytesInUnicast = _swig_property(_libvswitch.vmk_VDSPortStatistics_bytesInUnicast_get, _libvswitch.vmk_VDSPortStatistics_bytesInUnicast_set)
    __swig_setmethods__["pktsInMulticast"] = _libvswitch.vmk_VDSPortStatistics_pktsInMulticast_set
    __swig_getmethods__["pktsInMulticast"] = _libvswitch.vmk_VDSPortStatistics_pktsInMulticast_get
    if _newclass:pktsInMulticast = _swig_property(_libvswitch.vmk_VDSPortStatistics_pktsInMulticast_get, _libvswitch.vmk_VDSPortStatistics_pktsInMulticast_set)
    __swig_setmethods__["bytesInMulticast"] = _libvswitch.vmk_VDSPortStatistics_bytesInMulticast_set
    __swig_getmethods__["bytesInMulticast"] = _libvswitch.vmk_VDSPortStatistics_bytesInMulticast_get
    if _newclass:bytesInMulticast = _swig_property(_libvswitch.vmk_VDSPortStatistics_bytesInMulticast_get, _libvswitch.vmk_VDSPortStatistics_bytesInMulticast_set)
    __swig_setmethods__["pktsInBroadcast"] = _libvswitch.vmk_VDSPortStatistics_pktsInBroadcast_set
    __swig_getmethods__["pktsInBroadcast"] = _libvswitch.vmk_VDSPortStatistics_pktsInBroadcast_get
    if _newclass:pktsInBroadcast = _swig_property(_libvswitch.vmk_VDSPortStatistics_pktsInBroadcast_get, _libvswitch.vmk_VDSPortStatistics_pktsInBroadcast_set)
    __swig_setmethods__["bytesInBroadcast"] = _libvswitch.vmk_VDSPortStatistics_bytesInBroadcast_set
    __swig_getmethods__["bytesInBroadcast"] = _libvswitch.vmk_VDSPortStatistics_bytesInBroadcast_get
    if _newclass:bytesInBroadcast = _swig_property(_libvswitch.vmk_VDSPortStatistics_bytesInBroadcast_get, _libvswitch.vmk_VDSPortStatistics_bytesInBroadcast_set)
    __swig_setmethods__["pktsOutUnicast"] = _libvswitch.vmk_VDSPortStatistics_pktsOutUnicast_set
    __swig_getmethods__["pktsOutUnicast"] = _libvswitch.vmk_VDSPortStatistics_pktsOutUnicast_get
    if _newclass:pktsOutUnicast = _swig_property(_libvswitch.vmk_VDSPortStatistics_pktsOutUnicast_get, _libvswitch.vmk_VDSPortStatistics_pktsOutUnicast_set)
    __swig_setmethods__["bytesOutUnicast"] = _libvswitch.vmk_VDSPortStatistics_bytesOutUnicast_set
    __swig_getmethods__["bytesOutUnicast"] = _libvswitch.vmk_VDSPortStatistics_bytesOutUnicast_get
    if _newclass:bytesOutUnicast = _swig_property(_libvswitch.vmk_VDSPortStatistics_bytesOutUnicast_get, _libvswitch.vmk_VDSPortStatistics_bytesOutUnicast_set)
    __swig_setmethods__["pktsOutMulticast"] = _libvswitch.vmk_VDSPortStatistics_pktsOutMulticast_set
    __swig_getmethods__["pktsOutMulticast"] = _libvswitch.vmk_VDSPortStatistics_pktsOutMulticast_get
    if _newclass:pktsOutMulticast = _swig_property(_libvswitch.vmk_VDSPortStatistics_pktsOutMulticast_get, _libvswitch.vmk_VDSPortStatistics_pktsOutMulticast_set)
    __swig_setmethods__["bytesOutMulticast"] = _libvswitch.vmk_VDSPortStatistics_bytesOutMulticast_set
    __swig_getmethods__["bytesOutMulticast"] = _libvswitch.vmk_VDSPortStatistics_bytesOutMulticast_get
    if _newclass:bytesOutMulticast = _swig_property(_libvswitch.vmk_VDSPortStatistics_bytesOutMulticast_get, _libvswitch.vmk_VDSPortStatistics_bytesOutMulticast_set)
    __swig_setmethods__["pktsOutBroadcast"] = _libvswitch.vmk_VDSPortStatistics_pktsOutBroadcast_set
    __swig_getmethods__["pktsOutBroadcast"] = _libvswitch.vmk_VDSPortStatistics_pktsOutBroadcast_get
    if _newclass:pktsOutBroadcast = _swig_property(_libvswitch.vmk_VDSPortStatistics_pktsOutBroadcast_get, _libvswitch.vmk_VDSPortStatistics_pktsOutBroadcast_set)
    __swig_setmethods__["bytesOutBroadcast"] = _libvswitch.vmk_VDSPortStatistics_bytesOutBroadcast_set
    __swig_getmethods__["bytesOutBroadcast"] = _libvswitch.vmk_VDSPortStatistics_bytesOutBroadcast_get
    if _newclass:bytesOutBroadcast = _swig_property(_libvswitch.vmk_VDSPortStatistics_bytesOutBroadcast_get, _libvswitch.vmk_VDSPortStatistics_bytesOutBroadcast_set)
    __swig_setmethods__["pktsInDropped"] = _libvswitch.vmk_VDSPortStatistics_pktsInDropped_set
    __swig_getmethods__["pktsInDropped"] = _libvswitch.vmk_VDSPortStatistics_pktsInDropped_get
    if _newclass:pktsInDropped = _swig_property(_libvswitch.vmk_VDSPortStatistics_pktsInDropped_get, _libvswitch.vmk_VDSPortStatistics_pktsInDropped_set)
    __swig_setmethods__["pktsOutDropped"] = _libvswitch.vmk_VDSPortStatistics_pktsOutDropped_set
    __swig_getmethods__["pktsOutDropped"] = _libvswitch.vmk_VDSPortStatistics_pktsOutDropped_get
    if _newclass:pktsOutDropped = _swig_property(_libvswitch.vmk_VDSPortStatistics_pktsOutDropped_get, _libvswitch.vmk_VDSPortStatistics_pktsOutDropped_set)
    __swig_setmethods__["pktsInException"] = _libvswitch.vmk_VDSPortStatistics_pktsInException_set
    __swig_getmethods__["pktsInException"] = _libvswitch.vmk_VDSPortStatistics_pktsInException_get
    if _newclass:pktsInException = _swig_property(_libvswitch.vmk_VDSPortStatistics_pktsInException_get, _libvswitch.vmk_VDSPortStatistics_pktsInException_set)
    __swig_setmethods__["pktsOutException"] = _libvswitch.vmk_VDSPortStatistics_pktsOutException_set
    __swig_getmethods__["pktsOutException"] = _libvswitch.vmk_VDSPortStatistics_pktsOutException_get
    if _newclass:pktsOutException = _swig_property(_libvswitch.vmk_VDSPortStatistics_pktsOutException_get, _libvswitch.vmk_VDSPortStatistics_pktsOutException_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_VDSPortStatistics()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_VDSPortStatistics
    __del__ = lambda self : None;
vmk_VDSPortStatistics_swigregister = _libvswitch.vmk_VDSPortStatistics_swigregister
vmk_VDSPortStatistics_swigregister(vmk_VDSPortStatistics)

class vmk_VDSPortVIDRange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_VDSPortVIDRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_VDSPortVIDRange, name)
    __repr__ = _swig_repr
    __swig_setmethods__["minVID"] = _libvswitch.vmk_VDSPortVIDRange_minVID_set
    __swig_getmethods__["minVID"] = _libvswitch.vmk_VDSPortVIDRange_minVID_get
    if _newclass:minVID = _swig_property(_libvswitch.vmk_VDSPortVIDRange_minVID_get, _libvswitch.vmk_VDSPortVIDRange_minVID_set)
    __swig_setmethods__["maxVID"] = _libvswitch.vmk_VDSPortVIDRange_maxVID_set
    __swig_getmethods__["maxVID"] = _libvswitch.vmk_VDSPortVIDRange_maxVID_get
    if _newclass:maxVID = _swig_property(_libvswitch.vmk_VDSPortVIDRange_maxVID_get, _libvswitch.vmk_VDSPortVIDRange_maxVID_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_VDSPortVIDRange()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_VDSPortVIDRange
    __del__ = lambda self : None;
vmk_VDSPortVIDRange_swigregister = _libvswitch.vmk_VDSPortVIDRange_swigregister
vmk_VDSPortVIDRange_swigregister(vmk_VDSPortVIDRange)

class vmk_VDSPortVlanInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_VDSPortVlanInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_VDSPortVlanInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vlanID"] = _libvswitch.vmk_VDSPortVlanInfo_vlanID_set
    __swig_getmethods__["vlanID"] = _libvswitch.vmk_VDSPortVlanInfo_vlanID_get
    if _newclass:vlanID = _swig_property(_libvswitch.vmk_VDSPortVlanInfo_vlanID_get, _libvswitch.vmk_VDSPortVlanInfo_vlanID_set)
    __swig_setmethods__["numRanges"] = _libvswitch.vmk_VDSPortVlanInfo_numRanges_set
    __swig_getmethods__["numRanges"] = _libvswitch.vmk_VDSPortVlanInfo_numRanges_get
    if _newclass:numRanges = _swig_property(_libvswitch.vmk_VDSPortVlanInfo_numRanges_get, _libvswitch.vmk_VDSPortVlanInfo_numRanges_set)
    __swig_setmethods__["vidRanges"] = _libvswitch.vmk_VDSPortVlanInfo_vidRanges_set
    __swig_getmethods__["vidRanges"] = _libvswitch.vmk_VDSPortVlanInfo_vidRanges_get
    if _newclass:vidRanges = _swig_property(_libvswitch.vmk_VDSPortVlanInfo_vidRanges_get, _libvswitch.vmk_VDSPortVlanInfo_vidRanges_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_VDSPortVlanInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_VDSPortVlanInfo
    __del__ = lambda self : None;
vmk_VDSPortVlanInfo_swigregister = _libvswitch.vmk_VDSPortVlanInfo_swigregister
vmk_VDSPortVlanInfo_swigregister(vmk_VDSPortVlanInfo)

VMK_VDS_STATUS_OK = _libvswitch.VMK_VDS_STATUS_OK
VMK_VDS_STATUS_DEGRADED = _libvswitch.VMK_VDS_STATUS_DEGRADED
VMK_VDS_STATUS_DOWN = _libvswitch.VMK_VDS_STATUS_DOWN
VMK_SOCKET_AF_INET_STRLEN = _libvswitch.VMK_SOCKET_AF_INET_STRLEN
VMK_SOCKET_AF_INET6_STRLEN = _libvswitch.VMK_SOCKET_AF_INET6_STRLEN
VMK_SOCKET_AF_INET = _libvswitch.VMK_SOCKET_AF_INET
VMK_SOCKET_AF_INET6 = _libvswitch.VMK_SOCKET_AF_INET6
VMK_SOCKET_SOCK_STREAM = _libvswitch.VMK_SOCKET_SOCK_STREAM
VMK_SOCKET_SOCK_DGRAM = _libvswitch.VMK_SOCKET_SOCK_DGRAM
VMK_SOCKET_SOCK_RAW = _libvswitch.VMK_SOCKET_SOCK_RAW
class vmk_SocketAddress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_SocketAddress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_SocketAddress, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sa_len"] = _libvswitch.vmk_SocketAddress_sa_len_set
    __swig_getmethods__["sa_len"] = _libvswitch.vmk_SocketAddress_sa_len_get
    if _newclass:sa_len = _swig_property(_libvswitch.vmk_SocketAddress_sa_len_get, _libvswitch.vmk_SocketAddress_sa_len_set)
    __swig_setmethods__["sa_family"] = _libvswitch.vmk_SocketAddress_sa_family_set
    __swig_getmethods__["sa_family"] = _libvswitch.vmk_SocketAddress_sa_family_get
    if _newclass:sa_family = _swig_property(_libvswitch.vmk_SocketAddress_sa_family_get, _libvswitch.vmk_SocketAddress_sa_family_set)
    __swig_setmethods__["sa_data"] = _libvswitch.vmk_SocketAddress_sa_data_set
    __swig_getmethods__["sa_data"] = _libvswitch.vmk_SocketAddress_sa_data_get
    if _newclass:sa_data = _swig_property(_libvswitch.vmk_SocketAddress_sa_data_get, _libvswitch.vmk_SocketAddress_sa_data_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_SocketAddress()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_SocketAddress
    __del__ = lambda self : None;
vmk_SocketAddress_swigregister = _libvswitch.vmk_SocketAddress_swigregister
vmk_SocketAddress_swigregister(vmk_SocketAddress)

class vmk_SocketIPAddressAddr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_SocketIPAddressAddr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_SocketIPAddressAddr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["s_addr"] = _libvswitch.vmk_SocketIPAddressAddr_s_addr_set
    __swig_getmethods__["s_addr"] = _libvswitch.vmk_SocketIPAddressAddr_s_addr_get
    if _newclass:s_addr = _swig_property(_libvswitch.vmk_SocketIPAddressAddr_s_addr_get, _libvswitch.vmk_SocketIPAddressAddr_s_addr_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_SocketIPAddressAddr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_SocketIPAddressAddr
    __del__ = lambda self : None;
vmk_SocketIPAddressAddr_swigregister = _libvswitch.vmk_SocketIPAddressAddr_swigregister
vmk_SocketIPAddressAddr_swigregister(vmk_SocketIPAddressAddr)

class vmk_SocketIPAddress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_SocketIPAddress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_SocketIPAddress, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sin_len"] = _libvswitch.vmk_SocketIPAddress_sin_len_set
    __swig_getmethods__["sin_len"] = _libvswitch.vmk_SocketIPAddress_sin_len_get
    if _newclass:sin_len = _swig_property(_libvswitch.vmk_SocketIPAddress_sin_len_get, _libvswitch.vmk_SocketIPAddress_sin_len_set)
    __swig_setmethods__["sin_family"] = _libvswitch.vmk_SocketIPAddress_sin_family_set
    __swig_getmethods__["sin_family"] = _libvswitch.vmk_SocketIPAddress_sin_family_get
    if _newclass:sin_family = _swig_property(_libvswitch.vmk_SocketIPAddress_sin_family_get, _libvswitch.vmk_SocketIPAddress_sin_family_set)
    __swig_setmethods__["sin_port"] = _libvswitch.vmk_SocketIPAddress_sin_port_set
    __swig_getmethods__["sin_port"] = _libvswitch.vmk_SocketIPAddress_sin_port_get
    if _newclass:sin_port = _swig_property(_libvswitch.vmk_SocketIPAddress_sin_port_get, _libvswitch.vmk_SocketIPAddress_sin_port_set)
    __swig_setmethods__["sin_addr"] = _libvswitch.vmk_SocketIPAddress_sin_addr_set
    __swig_getmethods__["sin_addr"] = _libvswitch.vmk_SocketIPAddress_sin_addr_get
    if _newclass:sin_addr = _swig_property(_libvswitch.vmk_SocketIPAddress_sin_addr_get, _libvswitch.vmk_SocketIPAddress_sin_addr_set)
    __swig_setmethods__["sin_zero"] = _libvswitch.vmk_SocketIPAddress_sin_zero_set
    __swig_getmethods__["sin_zero"] = _libvswitch.vmk_SocketIPAddress_sin_zero_get
    if _newclass:sin_zero = _swig_property(_libvswitch.vmk_SocketIPAddress_sin_zero_get, _libvswitch.vmk_SocketIPAddress_sin_zero_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_SocketIPAddress()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_SocketIPAddress
    __del__ = lambda self : None;
vmk_SocketIPAddress_swigregister = _libvswitch.vmk_SocketIPAddress_swigregister
vmk_SocketIPAddress_swigregister(vmk_SocketIPAddress)

class vmk_SocketIPv6AddressAddr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_SocketIPv6AddressAddr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_SocketIPv6AddressAddr, name)
    __repr__ = _swig_repr
    __swig_getmethods__["__u6_addr"] = _libvswitch.vmk_SocketIPv6AddressAddr___u6_addr_get
    if _newclass:__u6_addr = _swig_property(_libvswitch.vmk_SocketIPv6AddressAddr___u6_addr_get)
    def __init__(self): 
        this = _libvswitch.new_vmk_SocketIPv6AddressAddr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_SocketIPv6AddressAddr
    __del__ = lambda self : None;
vmk_SocketIPv6AddressAddr_swigregister = _libvswitch.vmk_SocketIPv6AddressAddr_swigregister
vmk_SocketIPv6AddressAddr_swigregister(vmk_SocketIPv6AddressAddr)

class vmk_SocketIPv6AddressAddr___u6_addr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_SocketIPv6AddressAddr___u6_addr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_SocketIPv6AddressAddr___u6_addr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["__u6_addr8"] = _libvswitch.vmk_SocketIPv6AddressAddr___u6_addr___u6_addr8_set
    __swig_getmethods__["__u6_addr8"] = _libvswitch.vmk_SocketIPv6AddressAddr___u6_addr___u6_addr8_get
    if _newclass:__u6_addr8 = _swig_property(_libvswitch.vmk_SocketIPv6AddressAddr___u6_addr___u6_addr8_get, _libvswitch.vmk_SocketIPv6AddressAddr___u6_addr___u6_addr8_set)
    __swig_setmethods__["__u6_addr16"] = _libvswitch.vmk_SocketIPv6AddressAddr___u6_addr___u6_addr16_set
    __swig_getmethods__["__u6_addr16"] = _libvswitch.vmk_SocketIPv6AddressAddr___u6_addr___u6_addr16_get
    if _newclass:__u6_addr16 = _swig_property(_libvswitch.vmk_SocketIPv6AddressAddr___u6_addr___u6_addr16_get, _libvswitch.vmk_SocketIPv6AddressAddr___u6_addr___u6_addr16_set)
    __swig_setmethods__["__u6_addr32"] = _libvswitch.vmk_SocketIPv6AddressAddr___u6_addr___u6_addr32_set
    __swig_getmethods__["__u6_addr32"] = _libvswitch.vmk_SocketIPv6AddressAddr___u6_addr___u6_addr32_get
    if _newclass:__u6_addr32 = _swig_property(_libvswitch.vmk_SocketIPv6AddressAddr___u6_addr___u6_addr32_get, _libvswitch.vmk_SocketIPv6AddressAddr___u6_addr___u6_addr32_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_SocketIPv6AddressAddr___u6_addr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_SocketIPv6AddressAddr___u6_addr
    __del__ = lambda self : None;
vmk_SocketIPv6AddressAddr___u6_addr_swigregister = _libvswitch.vmk_SocketIPv6AddressAddr___u6_addr_swigregister
vmk_SocketIPv6AddressAddr___u6_addr_swigregister(vmk_SocketIPv6AddressAddr___u6_addr)

class vmk_SocketIPv6Address(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vmk_SocketIPv6Address, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vmk_SocketIPv6Address, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sin6_len"] = _libvswitch.vmk_SocketIPv6Address_sin6_len_set
    __swig_getmethods__["sin6_len"] = _libvswitch.vmk_SocketIPv6Address_sin6_len_get
    if _newclass:sin6_len = _swig_property(_libvswitch.vmk_SocketIPv6Address_sin6_len_get, _libvswitch.vmk_SocketIPv6Address_sin6_len_set)
    __swig_setmethods__["sin6_family"] = _libvswitch.vmk_SocketIPv6Address_sin6_family_set
    __swig_getmethods__["sin6_family"] = _libvswitch.vmk_SocketIPv6Address_sin6_family_get
    if _newclass:sin6_family = _swig_property(_libvswitch.vmk_SocketIPv6Address_sin6_family_get, _libvswitch.vmk_SocketIPv6Address_sin6_family_set)
    __swig_setmethods__["sin6_port"] = _libvswitch.vmk_SocketIPv6Address_sin6_port_set
    __swig_getmethods__["sin6_port"] = _libvswitch.vmk_SocketIPv6Address_sin6_port_get
    if _newclass:sin6_port = _swig_property(_libvswitch.vmk_SocketIPv6Address_sin6_port_get, _libvswitch.vmk_SocketIPv6Address_sin6_port_set)
    __swig_setmethods__["sin6_flowinfo"] = _libvswitch.vmk_SocketIPv6Address_sin6_flowinfo_set
    __swig_getmethods__["sin6_flowinfo"] = _libvswitch.vmk_SocketIPv6Address_sin6_flowinfo_get
    if _newclass:sin6_flowinfo = _swig_property(_libvswitch.vmk_SocketIPv6Address_sin6_flowinfo_get, _libvswitch.vmk_SocketIPv6Address_sin6_flowinfo_set)
    __swig_setmethods__["sin6_addr"] = _libvswitch.vmk_SocketIPv6Address_sin6_addr_set
    __swig_getmethods__["sin6_addr"] = _libvswitch.vmk_SocketIPv6Address_sin6_addr_get
    if _newclass:sin6_addr = _swig_property(_libvswitch.vmk_SocketIPv6Address_sin6_addr_get, _libvswitch.vmk_SocketIPv6Address_sin6_addr_set)
    __swig_setmethods__["sin6_scopeid"] = _libvswitch.vmk_SocketIPv6Address_sin6_scopeid_set
    __swig_getmethods__["sin6_scopeid"] = _libvswitch.vmk_SocketIPv6Address_sin6_scopeid_get
    if _newclass:sin6_scopeid = _swig_property(_libvswitch.vmk_SocketIPv6Address_sin6_scopeid_get, _libvswitch.vmk_SocketIPv6Address_sin6_scopeid_set)
    def __init__(self): 
        this = _libvswitch.new_vmk_SocketIPv6Address()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_vmk_SocketIPv6Address
    __del__ = lambda self : None;
vmk_SocketIPv6Address_swigregister = _libvswitch.vmk_SocketIPv6Address_swigregister
vmk_SocketIPv6Address_swigregister(vmk_SocketIPv6Address)

VMKAPI_REVISION_MAJOR = _libvswitch.VMKAPI_REVISION_MAJOR
VMKAPI_REVISION_MINOR = _libvswitch.VMKAPI_REVISION_MINOR
VMKAPI_REVISION_UPDATE = _libvswitch.VMKAPI_REVISION_UPDATE
VMKAPI_REVISION_PATCH_LEVEL = _libvswitch.VMKAPI_REVISION_PATCH_LEVEL
VMKAPI_REVISION = _libvswitch.VMKAPI_REVISION

def new_vidrangeArray(*args) -> "vmk_VDSPortVIDRange *" :
  return _libvswitch.new_vidrangeArray(*args)
new_vidrangeArray = _libvswitch.new_vidrangeArray

def delete_vidrangeArray(*args) -> "void" :
  return _libvswitch.delete_vidrangeArray(*args)
delete_vidrangeArray = _libvswitch.delete_vidrangeArray

def vidrangeArray_getitem(*args) -> "vmk_VDSPortVIDRange" :
  return _libvswitch.vidrangeArray_getitem(*args)
vidrangeArray_getitem = _libvswitch.vidrangeArray_getitem

def vidrangeArray_setitem(*args) -> "void" :
  return _libvswitch.vidrangeArray_setitem(*args)
vidrangeArray_setitem = _libvswitch.vidrangeArray_setitem

def new_pvlanmapentryArray(*args) -> "VSPvlanMapEntry *" :
  return _libvswitch.new_pvlanmapentryArray(*args)
new_pvlanmapentryArray = _libvswitch.new_pvlanmapentryArray

def delete_pvlanmapentryArray(*args) -> "void" :
  return _libvswitch.delete_pvlanmapentryArray(*args)
delete_pvlanmapentryArray = _libvswitch.delete_pvlanmapentryArray

def pvlanmapentryArray_getitem(*args) -> "VSPvlanMapEntry" :
  return _libvswitch.pvlanmapentryArray_getitem(*args)
pvlanmapentryArray_getitem = _libvswitch.pvlanmapentryArray_getitem

def pvlanmapentryArray_setitem(*args) -> "void" :
  return _libvswitch.pvlanmapentryArray_setitem(*args)
pvlanmapentryArray_setitem = _libvswitch.pvlanmapentryArray_setitem

def VSDVS_GetAliasFromPortset(*args) -> "char *" :
  return _libvswitch.VSDVS_GetAliasFromPortset(*args)
VSDVS_GetAliasFromPortset = _libvswitch.VSDVS_GetAliasFromPortset

def VSVMK_GetUplinkDVPortID(*args) -> "char *" :
  return _libvswitch.VSVMK_GetUplinkDVPortID(*args)
VSVMK_GetUplinkDVPortID = _libvswitch.VSVMK_GetUplinkDVPortID

def VSDVS_GetPortTeamingOverride(*args) -> "vmk_VDSPortName" :
  return _libvswitch.VSDVS_GetPortTeamingOverride(*args)
VSDVS_GetPortTeamingOverride = _libvswitch.VSDVS_GetPortTeamingOverride

def VSDVS_GetPrivateVLANMap(*args) -> "VSPvlanMapEntry **, int *" :
  return _libvswitch.VSDVS_GetPrivateVLANMap(*args)
VSDVS_GetPrivateVLANMap = _libvswitch.VSDVS_GetPrivateVLANMap

def alloc_dvmirror_session_table(*args) -> "DVMirrorSessionTable *" :
  return _libvswitch.alloc_dvmirror_session_table(*args)
alloc_dvmirror_session_table = _libvswitch.alloc_dvmirror_session_table

def free_dvmirror_session_table(*args) -> "void" :
  return _libvswitch.free_dvmirror_session_table(*args)
free_dvmirror_session_table = _libvswitch.free_dvmirror_session_table
GET_RUNTIME_OPTIONS_IGMP_QUERY_INTERVAL = _libvswitch.GET_RUNTIME_OPTIONS_IGMP_QUERY_INTERVAL
GET_RUNTIME_OPTIONS_IGMP_V3_MAX_SRC_IP_NUM = _libvswitch.GET_RUNTIME_OPTIONS_IGMP_V3_MAX_SRC_IP_NUM
GET_RUNTIME_OPTIONS_IGMP_QUERIES = _libvswitch.GET_RUNTIME_OPTIONS_IGMP_QUERIES
GET_RUNTIME_OPTIONS_IGMP_VERSION = _libvswitch.GET_RUNTIME_OPTIONS_IGMP_VERSION
GET_RUNTIME_OPTIONS_MLD_VERSION = _libvswitch.GET_RUNTIME_OPTIONS_MLD_VERSION
GET_RUNTIME_OPTIONS_MLD_V2_MAX_SRC_IP_NUM = _libvswitch.GET_RUNTIME_OPTIONS_MLD_V2_MAX_SRC_IP_NUM
GET_RUNTIME_OPTIONS_MAX_RARPS_PER_INTERVAL = _libvswitch.GET_RUNTIME_OPTIONS_MAX_RARPS_PER_INTERVAL
GET_RUNTIME_OPTIONS_RARP_ADVERTISEMENT_DURATION = _libvswitch.GET_RUNTIME_OPTIONS_RARP_ADVERTISEMENT_DURATION
GET_RUNTIME_OPTIONS_REVERSE_PATH_FWD_CHECK = _libvswitch.GET_RUNTIME_OPTIONS_REVERSE_PATH_FWD_CHECK
GET_RUNTIME_OPTIONS_REVERSE_PATH_FWD_CHECK_PROMISC = _libvswitch.GET_RUNTIME_OPTIONS_REVERSE_PATH_FWD_CHECK_PROMISC
GET_RUNTIME_OPTIONS_ALLOW_FAST_PATH = _libvswitch.GET_RUNTIME_OPTIONS_ALLOW_FAST_PATH
GET_RUNTIME_OPTIONS_TEAM_POLICY_UP_DELAY = _libvswitch.GET_RUNTIME_OPTIONS_TEAM_POLICY_UP_DELAY
GET_RUNTIME_OPTIONS_ALLOW_MIRROR_STATS = _libvswitch.GET_RUNTIME_OPTIONS_ALLOW_MIRROR_STATS
NUM_RUNTIME_INT_OPTIONS = _libvswitch.NUM_RUNTIME_INT_OPTIONS

def get_runtime_option_type_from_name(*args) -> "int" :
  return _libvswitch.get_runtime_option_type_from_name(*args)
get_runtime_option_type_from_name = _libvswitch.get_runtime_option_type_from_name
CONFIG_PROP_TYPE = _libvswitch.CONFIG_PROP_TYPE
RUNTIME_PROP_TYPE = _libvswitch.RUNTIME_PROP_TYPE
VOLATILE_PROP_TYPE = _libvswitch.VOLATILE_PROP_TYPE
POLICY_PROP_TYPE = _libvswitch.POLICY_PROP_TYPE
ALL_PROP_TYPE = _libvswitch.ALL_PROP_TYPE
DVSPORT_TYPE_INVALID = _libvswitch.DVSPORT_TYPE_INVALID
DVSPORT_TYPE_ACTIVE = _libvswitch.DVSPORT_TYPE_ACTIVE
DVSPORT_TYPE_SHADOW = _libvswitch.DVSPORT_TYPE_SHADOW
DVSPORT_TYPE_ZOMBIE = _libvswitch.DVSPORT_TYPE_ZOMBIE
DVSPORT_TYPE_LOCALCACHE = _libvswitch.DVSPORT_TYPE_LOCALCACHE
class OpaqueDVPortData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpaqueDVPortData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OpaqueDVPortData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dvPortId"] = _libvswitch.OpaqueDVPortData_dvPortId_set
    __swig_getmethods__["dvPortId"] = _libvswitch.OpaqueDVPortData_dvPortId_get
    if _newclass:dvPortId = _swig_property(_libvswitch.OpaqueDVPortData_dvPortId_get, _libvswitch.OpaqueDVPortData_dvPortId_set)
    __swig_setmethods__["externalId"] = _libvswitch.OpaqueDVPortData_externalId_set
    __swig_getmethods__["externalId"] = _libvswitch.OpaqueDVPortData_externalId_get
    if _newclass:externalId = _swig_property(_libvswitch.OpaqueDVPortData_externalId_get, _libvswitch.OpaqueDVPortData_externalId_set)
    def __init__(self): 
        this = _libvswitch.new_OpaqueDVPortData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_OpaqueDVPortData
    __del__ = lambda self : None;
OpaqueDVPortData_swigregister = _libvswitch.OpaqueDVPortData_swigregister
OpaqueDVPortData_swigregister(OpaqueDVPortData)

class DVPortData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVPortData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVPortData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dvPortId"] = _libvswitch.DVPortData_dvPortId_set
    __swig_getmethods__["dvPortId"] = _libvswitch.DVPortData_dvPortId_get
    if _newclass:dvPortId = _swig_property(_libvswitch.DVPortData_dvPortId_get, _libvswitch.DVPortData_dvPortId_set)
    __swig_setmethods__["connectId"] = _libvswitch.DVPortData_connectId_set
    __swig_getmethods__["connectId"] = _libvswitch.DVPortData_connectId_get
    if _newclass:connectId = _swig_property(_libvswitch.DVPortData_connectId_get, _libvswitch.DVPortData_connectId_set)
    def __init__(self): 
        this = _libvswitch.new_DVPortData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_DVPortData
    __del__ = lambda self : None;
DVPortData_swigregister = _libvswitch.DVPortData_swigregister
DVPortData_swigregister(DVPortData)

class DVPortList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVPortList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVPortList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nports"] = _libvswitch.DVPortList_nports_set
    __swig_getmethods__["nports"] = _libvswitch.DVPortList_nports_get
    if _newclass:nports = _swig_property(_libvswitch.DVPortList_nports_get, _libvswitch.DVPortList_nports_set)
    __swig_setmethods__["type"] = _libvswitch.DVPortList_type_set
    __swig_getmethods__["type"] = _libvswitch.DVPortList_type_get
    if _newclass:type = _swig_property(_libvswitch.DVPortList_type_get, _libvswitch.DVPortList_type_set)
    __swig_setmethods__["dvPort"] = _libvswitch.DVPortList_dvPort_set
    __swig_getmethods__["dvPort"] = _libvswitch.DVPortList_dvPort_get
    if _newclass:dvPort = _swig_property(_libvswitch.DVPortList_dvPort_get, _libvswitch.DVPortList_dvPort_set)
    def __init__(self): 
        this = _libvswitch.new_DVPortList()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_DVPortList
    __del__ = lambda self : None;
DVPortList_swigregister = _libvswitch.DVPortList_swigregister
DVPortList_swigregister(DVPortList)


def VMK_ReturnStatusToString(*args) -> "char const *" :
  return _libvswitch.VMK_ReturnStatusToString(*args)
VMK_ReturnStatusToString = _libvswitch.VMK_ReturnStatusToString

def DVSState_SwitchFindByAlias(*args) -> "DVSwitchHandle" :
  return _libvswitch.DVSState_SwitchFindByAlias(*args)
DVSState_SwitchFindByAlias = _libvswitch.DVSState_SwitchFindByAlias

def DVSState_PortFind(*args) -> "DVSPortHandle" :
  return _libvswitch.DVSState_PortFind(*args)
DVSState_PortFind = _libvswitch.DVSState_PortFind

def DVS_SwitchId(*args) -> "char *" :
  return _libvswitch.DVS_SwitchId(*args)
DVS_SwitchId = _libvswitch.DVS_SwitchId

def DVS_SwitchName(*args) -> "char *" :
  return _libvswitch.DVS_SwitchName(*args)
DVS_SwitchName = _libvswitch.DVS_SwitchName

def DVS_ClassName(*args) -> "char *" :
  return _libvswitch.DVS_ClassName(*args)
DVS_ClassName = _libvswitch.DVS_ClassName

def DVS_PortId(*args) -> "char *" :
  return _libvswitch.DVS_PortId(*args)
DVS_PortId = _libvswitch.DVS_PortId

def DVS_PortAlias(*args) -> "char *" :
  return _libvswitch.DVS_PortAlias(*args)
DVS_PortAlias = _libvswitch.DVS_PortAlias

def DVS_GetMaxPorts(*args) -> "int" :
  return _libvswitch.DVS_GetMaxPorts(*args)
DVS_GetMaxPorts = _libvswitch.DVS_GetMaxPorts

def DVS_Version(*args) -> "VDSVersion" :
  return _libvswitch.DVS_Version(*args)
DVS_Version = _libvswitch.DVS_Version

def DVSData_Data(*args) -> "vmk_uint32" :
  return _libvswitch.DVSData_Data(*args)
DVSData_Data = _libvswitch.DVSData_Data

def DVSData_Alloc(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSData_Alloc(*args)
DVSData_Alloc = _libvswitch.DVSData_Alloc

def DVSData_Free(*args) -> "void" :
  return _libvswitch.DVSData_Free(*args)
DVSData_Free = _libvswitch.DVSData_Free

def DVSData_Update(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSData_Update(*args)
DVSData_Update = _libvswitch.DVSData_Update

def DVSData_Serialize(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSData_Serialize(*args)
DVSData_Serialize = _libvswitch.DVSData_Serialize

def DVSData_Name(*args) -> "char const *" :
  return _libvswitch.DVSData_Name(*args)
DVSData_Name = _libvswitch.DVSData_Name

def DVSData_PropType(*args) -> "vmk_uint32" :
  return _libvswitch.DVSData_PropType(*args)
DVSData_PropType = _libvswitch.DVSData_PropType

def DVSState_HostPropLookup(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSState_HostPropLookup(*args)
DVSState_HostPropLookup = _libvswitch.DVSState_HostPropLookup

def DVSState_GlobalPropLookup(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSState_GlobalPropLookup(*args)
DVSState_GlobalPropLookup = _libvswitch.DVSState_GlobalPropLookup

def DVSState_ConfigDeserialize(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSState_ConfigDeserialize(*args)
DVSState_ConfigDeserialize = _libvswitch.DVSState_ConfigDeserialize

def DVSState_ConfigReset() -> "VMK_ReturnStatus" :
  return _libvswitch.DVSState_ConfigReset()
DVSState_ConfigReset = _libvswitch.DVSState_ConfigReset

def DVSState_PortDataForEach(*args) -> "void" :
  return _libvswitch.DVSState_PortDataForEach(*args)
DVSState_PortDataForEach = _libvswitch.DVSState_PortDataForEach

def DVSState_GlobalPropForEach(*args) -> "void" :
  return _libvswitch.DVSState_GlobalPropForEach(*args)
DVSState_GlobalPropForEach = _libvswitch.DVSState_GlobalPropForEach

def DVSState_HostPropForEach(*args) -> "void" :
  return _libvswitch.DVSState_HostPropForEach(*args)
DVSState_HostPropForEach = _libvswitch.DVSState_HostPropForEach

def DVSState_PortForEach(*args) -> "void" :
  return _libvswitch.DVSState_PortForEach(*args)
DVSState_PortForEach = _libvswitch.DVSState_PortForEach

def DVSState_SwitchForEach(*args) -> "void" :
  return _libvswitch.DVSState_SwitchForEach(*args)
DVSState_SwitchForEach = _libvswitch.DVSState_SwitchForEach

def DVSVMK_StateInit(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_StateInit(*args)
DVSVMK_StateInit = _libvswitch.DVSVMK_StateInit

def DVSVMK_StateCleanup() -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_StateCleanup()
DVSVMK_StateCleanup = _libvswitch.DVSVMK_StateCleanup

def DVSVMK_StateSanitize() -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_StateSanitize()
DVSVMK_StateSanitize = _libvswitch.DVSVMK_StateSanitize

def DVSVMK_StateGet(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_StateGet(*args)
DVSVMK_StateGet = _libvswitch.DVSVMK_StateGet

def DVSVMK_PersistentStateGet(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_PersistentStateGet(*args)
DVSVMK_PersistentStateGet = _libvswitch.DVSVMK_PersistentStateGet

def DVSVMK_SwitchAdd(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_SwitchAdd(*args)
DVSVMK_SwitchAdd = _libvswitch.DVSVMK_SwitchAdd

def DVSVMK_SwitchRemove(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_SwitchRemove(*args)
DVSVMK_SwitchRemove = _libvswitch.DVSVMK_SwitchRemove

def DVSVMK_SwitchAssociate(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_SwitchAssociate(*args)
DVSVMK_SwitchAssociate = _libvswitch.DVSVMK_SwitchAssociate

def DVSVMK_SwitchDissociate(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_SwitchDissociate(*args)
DVSVMK_SwitchDissociate = _libvswitch.DVSVMK_SwitchDissociate

def DVSVMK_SwitchSetVersion(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_SwitchSetVersion(*args)
DVSVMK_SwitchSetVersion = _libvswitch.DVSVMK_SwitchSetVersion

def DVSVMK_SwitchSetMaxPorts(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_SwitchSetMaxPorts(*args)
DVSVMK_SwitchSetMaxPorts = _libvswitch.DVSVMK_SwitchSetMaxPorts

def DVSVMK_SwitchPortList(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_SwitchPortList(*args)
DVSVMK_SwitchPortList = _libvswitch.DVSVMK_SwitchPortList

def DVSVMK_CmdExec(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_CmdExec(*args)
DVSVMK_CmdExec = _libvswitch.DVSVMK_CmdExec

def DVSVMK_GlobalPropGet(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_GlobalPropGet(*args)
DVSVMK_GlobalPropGet = _libvswitch.DVSVMK_GlobalPropGet

def DVSVMK_GlobalPropSet(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_GlobalPropSet(*args)
DVSVMK_GlobalPropSet = _libvswitch.DVSVMK_GlobalPropSet

def DVSVMK_GlobalPropClear(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_GlobalPropClear(*args)
DVSVMK_GlobalPropClear = _libvswitch.DVSVMK_GlobalPropClear

def DVSVMK_HostPropGet(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_HostPropGet(*args)
DVSVMK_HostPropGet = _libvswitch.DVSVMK_HostPropGet

def DVSVMK_HostPropSet(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_HostPropSet(*args)
DVSVMK_HostPropSet = _libvswitch.DVSVMK_HostPropSet

def DVSVMK_HostPropClear(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_HostPropClear(*args)
DVSVMK_HostPropClear = _libvswitch.DVSVMK_HostPropClear

def DVSVMK_PortAdd(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_PortAdd(*args)
DVSVMK_PortAdd = _libvswitch.DVSVMK_PortAdd

def DVSVMK_PortRemove(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_PortRemove(*args)
DVSVMK_PortRemove = _libvswitch.DVSVMK_PortRemove

def DVSVMK_PortDataGet(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_PortDataGet(*args)
DVSVMK_PortDataGet = _libvswitch.DVSVMK_PortDataGet

def DVSVMK_PortDataSet(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_PortDataSet(*args)
DVSVMK_PortDataSet = _libvswitch.DVSVMK_PortDataSet

def DVSVMK_PortDataClear(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_PortDataClear(*args)
DVSVMK_PortDataClear = _libvswitch.DVSVMK_PortDataClear

def DVSVMK_PortStateGet(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_PortStateGet(*args)
DVSVMK_PortStateGet = _libvswitch.DVSVMK_PortStateGet

def DVSVMK_PersistentPortStateGet(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_PersistentPortStateGet(*args)
DVSVMK_PersistentPortStateGet = _libvswitch.DVSVMK_PersistentPortStateGet

def DVSVMK_VendorPortPropList(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_VendorPortPropList(*args)
DVSVMK_VendorPortPropList = _libvswitch.DVSVMK_VendorPortPropList

def DVSVMK_ExtraConfigPortPropList(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_ExtraConfigPortPropList(*args)
DVSVMK_ExtraConfigPortPropList = _libvswitch.DVSVMK_ExtraConfigPortPropList

def DVSVMK_ExtraConfigPropList(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_ExtraConfigPropList(*args)
DVSVMK_ExtraConfigPropList = _libvswitch.DVSVMK_ExtraConfigPropList

def DVSVMK_VendorHostPropList(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_VendorHostPropList(*args)
DVSVMK_VendorHostPropList = _libvswitch.DVSVMK_VendorHostPropList

def DVSVMK_VendorGlobalPropList(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_VendorGlobalPropList(*args)
DVSVMK_VendorGlobalPropList = _libvswitch.DVSVMK_VendorGlobalPropList

def DVSVMK_UplinkDataSet(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_UplinkDataSet(*args)
DVSVMK_UplinkDataSet = _libvswitch.DVSVMK_UplinkDataSet

def DVSVMK_UplinkDataGet(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_UplinkDataGet(*args)
DVSVMK_UplinkDataGet = _libvswitch.DVSVMK_UplinkDataGet

def DVSVMK_PortFind(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_PortFind(*args)
DVSVMK_PortFind = _libvswitch.DVSVMK_PortFind

def DVSVMK_PortGetByExternalId(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSVMK_PortGetByExternalId(*args)
DVSVMK_PortGetByExternalId = _libvswitch.DVSVMK_PortGetByExternalId

def DVSVMK_DataFree(*args) -> "void" :
  return _libvswitch.DVSVMK_DataFree(*args)
DVSVMK_DataFree = _libvswitch.DVSVMK_DataFree
PORTSET_NAME_MAX = _libvswitch.PORTSET_NAME_MAX

def DVSAliasToSwitchId(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSAliasToSwitchId(*args)
DVSAliasToSwitchId = _libvswitch.DVSAliasToSwitchId

def DVSAliasToPortsetName(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSAliasToPortsetName(*args)
DVSAliasToPortsetName = _libvswitch.DVSAliasToPortsetName

def DVSPortsetNameToAlias(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.DVSPortsetNameToAlias(*args)
DVSPortsetNameToAlias = _libvswitch.DVSPortsetNameToAlias

def DVPortExist(*args) -> "vmk_Bool" :
  return _libvswitch.DVPortExist(*args)
DVPortExist = _libvswitch.DVPortExist
VS_CHARDEV_NAME = _libvswitch.VS_CHARDEV_NAME
VS_CHARDEV_PATH = _libvswitch.VS_CHARDEV_PATH
VS_PORTSET_NAME_MAX = _libvswitch.VS_PORTSET_NAME_MAX
VS_DVPORT_ID_MAX = _libvswitch.VS_DVPORT_ID_MAX
VS_STATS_FLAG_RARP = _libvswitch.VS_STATS_FLAG_RARP
VS_STATS_FLAG_SERVICE_PORT = _libvswitch.VS_STATS_FLAG_SERVICE_PORT
VS_ETH_MAX_EXACT_MULTICAST_ADDRS = _libvswitch.VS_ETH_MAX_EXACT_MULTICAST_ADDRS
VS_MAC_ADDR_TYPE_STATIC = _libvswitch.VS_MAC_ADDR_TYPE_STATIC
VS_MAC_ADDR_TYPE_USER = _libvswitch.VS_MAC_ADDR_TYPE_USER
VS_MAC_ADDR_TYPE_LEARNED = _libvswitch.VS_MAC_ADDR_TYPE_LEARNED
VS_MAC_ADDR_TYPE_ALL = _libvswitch.VS_MAC_ADDR_TYPE_ALL
class VSMACEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSMACEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSMACEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["macAddress"] = _libvswitch.VSMACEntry_macAddress_set
    __swig_getmethods__["macAddress"] = _libvswitch.VSMACEntry_macAddress_get
    if _newclass:macAddress = _swig_property(_libvswitch.VSMACEntry_macAddress_get, _libvswitch.VSMACEntry_macAddress_set)
    __swig_setmethods__["macAddrType"] = _libvswitch.VSMACEntry_macAddrType_set
    __swig_getmethods__["macAddrType"] = _libvswitch.VSMACEntry_macAddrType_get
    if _newclass:macAddrType = _swig_property(_libvswitch.VSMACEntry_macAddrType_get, _libvswitch.VSMACEntry_macAddrType_set)
    __swig_setmethods__["aging"] = _libvswitch.VSMACEntry_aging_set
    __swig_getmethods__["aging"] = _libvswitch.VSMACEntry_aging_get
    if _newclass:aging = _swig_property(_libvswitch.VSMACEntry_aging_get, _libvswitch.VSMACEntry_aging_set)
    __swig_setmethods__["vid"] = _libvswitch.VSMACEntry_vid_set
    __swig_getmethods__["vid"] = _libvswitch.VSMACEntry_vid_get
    if _newclass:vid = _swig_property(_libvswitch.VSMACEntry_vid_get, _libvswitch.VSMACEntry_vid_set)
    __swig_setmethods__["vni"] = _libvswitch.VSMACEntry_vni_set
    __swig_getmethods__["vni"] = _libvswitch.VSMACEntry_vni_get
    if _newclass:vni = _swig_property(_libvswitch.VSMACEntry_vni_get, _libvswitch.VSMACEntry_vni_set)
    __swig_setmethods__["elapsed"] = _libvswitch.VSMACEntry_elapsed_set
    __swig_getmethods__["elapsed"] = _libvswitch.VSMACEntry_elapsed_get
    if _newclass:elapsed = _swig_property(_libvswitch.VSMACEntry_elapsed_get, _libvswitch.VSMACEntry_elapsed_set)
    def set_mac_address(self, *args) -> "void" : return _libvswitch.VSMACEntry_set_mac_address(self, *args)
    def __getitem__(self, *args) -> "VSMACEntry const" : return _libvswitch.VSMACEntry___getitem__(self, *args)
    def __init__(self): 
        this = _libvswitch.new_VSMACEntry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSMACEntry
    __del__ = lambda self : None;
VSMACEntry_swigregister = _libvswitch.VSMACEntry_swigregister
VSMACEntry_swigregister(VSMACEntry)

class VSMACLearningGlobalProps(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSMACLearningGlobalProps, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSMACLearningGlobalProps, name)
    __repr__ = _swig_repr
    __swig_setmethods__["agingTime"] = _libvswitch.VSMACLearningGlobalProps_agingTime_set
    __swig_getmethods__["agingTime"] = _libvswitch.VSMACLearningGlobalProps_agingTime_get
    if _newclass:agingTime = _swig_property(_libvswitch.VSMACLearningGlobalProps_agingTime_get, _libvswitch.VSMACLearningGlobalProps_agingTime_set)
    __swig_setmethods__["macLimit"] = _libvswitch.VSMACLearningGlobalProps_macLimit_set
    __swig_getmethods__["macLimit"] = _libvswitch.VSMACLearningGlobalProps_macLimit_get
    if _newclass:macLimit = _swig_property(_libvswitch.VSMACLearningGlobalProps_macLimit_get, _libvswitch.VSMACLearningGlobalProps_macLimit_set)
    def __init__(self): 
        this = _libvswitch.new_VSMACLearningGlobalProps()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSMACLearningGlobalProps
    __del__ = lambda self : None;
VSMACLearningGlobalProps_swigregister = _libvswitch.VSMACLearningGlobalProps_swigregister
VSMACLearningGlobalProps_swigregister(VSMACLearningGlobalProps)

VS_IOCMD_GET_MASK = _libvswitch.VS_IOCMD_GET_MASK
VS_IOCMD_GET_RARP_STATS = _libvswitch.VS_IOCMD_GET_RARP_STATS
VS_IOCMD_GET_SERVICE_PORT_TEAMING_STATS = _libvswitch.VS_IOCMD_GET_SERVICE_PORT_TEAMING_STATS
VS_IOCMD_GET_RUNTIME_OPTIONS = _libvswitch.VS_IOCMD_GET_RUNTIME_OPTIONS
VS_IOCMD_GET_PROMISC_SESSION_ACTIVE_DSTS = _libvswitch.VS_IOCMD_GET_PROMISC_SESSION_ACTIVE_DSTS
VS_IOCMD_GET_DVMIRROR_SESSION_IDS = _libvswitch.VS_IOCMD_GET_DVMIRROR_SESSION_IDS
VS_IOCMD_GET_DVMIRROR_SESSION_STATS = _libvswitch.VS_IOCMD_GET_DVMIRROR_SESSION_STATS
VS_IOCMD_GET_MCAST_FILTER_MODE = _libvswitch.VS_IOCMD_GET_MCAST_FILTER_MODE
VS_IOCMD_GET_MCAST_FILTERS = _libvswitch.VS_IOCMD_GET_MCAST_FILTERS
VS_IOCMD_GET_MCAST_FILTER_STATS = _libvswitch.VS_IOCMD_GET_MCAST_FILTER_STATS
VS_IOCMD_GET_UPLINKS = _libvswitch.VS_IOCMD_GET_UPLINKS
VS_IOCMD_GET_UPLINK_LINK_STATE = _libvswitch.VS_IOCMD_GET_UPLINK_LINK_STATE
VS_IOCMD_GET_UPLINK_LACP_LINK_STATE = _libvswitch.VS_IOCMD_GET_UPLINK_LACP_LINK_STATE
VS_IOCMD_GET_LAG_TABLE = _libvswitch.VS_IOCMD_GET_LAG_TABLE
VS_IOCMD_GET_IS_VSWITCH = _libvswitch.VS_IOCMD_GET_IS_VSWITCH
VS_IOCMD_GET_VSWITCH_INFO = _libvswitch.VS_IOCMD_GET_VSWITCH_INFO
VS_IOCMD_GET_VSWITCH_STATS = _libvswitch.VS_IOCMD_GET_VSWITCH_STATS
VS_IOCMD_GET_PORT_LIST = _libvswitch.VS_IOCMD_GET_PORT_LIST
VS_IOCMD_GET_PORT_INFO = _libvswitch.VS_IOCMD_GET_PORT_INFO
VS_IOCMD_GET_UPLINK_VLAN_LIST = _libvswitch.VS_IOCMD_GET_UPLINK_VLAN_LIST
VS_IOCMD_GET_VLAN_INFO = _libvswitch.VS_IOCMD_GET_VLAN_INFO
VS_IOCMD_GET_PORT_MAC_TABLE = _libvswitch.VS_IOCMD_GET_PORT_MAC_TABLE
VS_IOCMD_GET_TEAM_MAC_TABLE = _libvswitch.VS_IOCMD_GET_TEAM_MAC_TABLE
VS_IOCMD_GET_PORT_MAC_LEARNING_STATS = _libvswitch.VS_IOCMD_GET_PORT_MAC_LEARNING_STATS
VS_IOCMD_GET_GLOBAL_MAC_LEARNING_PROPS = _libvswitch.VS_IOCMD_GET_GLOBAL_MAC_LEARNING_PROPS
VS_IOCMD_PORT_GET_TEAM_UPLINK_HINT = _libvswitch.VS_IOCMD_PORT_GET_TEAM_UPLINK_HINT
VS_IOCMD_GET_UPLINK_DVPORT_ID = _libvswitch.VS_IOCMD_GET_UPLINK_DVPORT_ID
VS_IOCMD_SET_MASK = _libvswitch.VS_IOCMD_SET_MASK
VS_IOCMD_SET_RUNTIME_OPTIONS = _libvswitch.VS_IOCMD_SET_RUNTIME_OPTIONS
VS_IOCMD_SET_UPLINK_ADMIN_LINK_STATE = _libvswitch.VS_IOCMD_SET_UPLINK_ADMIN_LINK_STATE
VS_IOCMD_SET_PORT_MAC_TABLE = _libvswitch.VS_IOCMD_SET_PORT_MAC_TABLE
VS_IOCMD_CLEAR_PORT_MAC_TABLE = _libvswitch.VS_IOCMD_CLEAR_PORT_MAC_TABLE
VS_IOCMD_SET_SWITCH_MAC_LEARNING = _libvswitch.VS_IOCMD_SET_SWITCH_MAC_LEARNING
VS_MCAST_FILTER_MODE_LEGACY = _libvswitch.VS_MCAST_FILTER_MODE_LEGACY
VS_MCAST_FILTER_MODE_SNOOPING = _libvswitch.VS_MCAST_FILTER_MODE_SNOOPING
VS_MCAST_FILTER_MODE_IGMP = _libvswitch.VS_MCAST_FILTER_MODE_IGMP
VS_MCAST_FILTER_MODE_MLD = _libvswitch.VS_MCAST_FILTER_MODE_MLD
class VSIOCtlQuery(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSIOCtlQuery, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSIOCtlQuery, name)
    __repr__ = _swig_repr
    __swig_setmethods__["psName"] = _libvswitch.VSIOCtlQuery_psName_set
    __swig_getmethods__["psName"] = _libvswitch.VSIOCtlQuery_psName_get
    if _newclass:psName = _swig_property(_libvswitch.VSIOCtlQuery_psName_get, _libvswitch.VSIOCtlQuery_psName_set)
    __swig_setmethods__["dvsId"] = _libvswitch.VSIOCtlQuery_dvsId_set
    __swig_getmethods__["dvsId"] = _libvswitch.VSIOCtlQuery_dvsId_get
    if _newclass:dvsId = _swig_property(_libvswitch.VSIOCtlQuery_dvsId_get, _libvswitch.VSIOCtlQuery_dvsId_set)
    __swig_setmethods__["dvPortID"] = _libvswitch.VSIOCtlQuery_dvPortID_set
    __swig_getmethods__["dvPortID"] = _libvswitch.VSIOCtlQuery_dvPortID_get
    if _newclass:dvPortID = _swig_property(_libvswitch.VSIOCtlQuery_dvPortID_get, _libvswitch.VSIOCtlQuery_dvPortID_set)
    __swig_setmethods__["portID"] = _libvswitch.VSIOCtlQuery_portID_set
    __swig_getmethods__["portID"] = _libvswitch.VSIOCtlQuery_portID_get
    if _newclass:portID = _swig_property(_libvswitch.VSIOCtlQuery_portID_get, _libvswitch.VSIOCtlQuery_portID_set)
    __swig_setmethods__["dvMirrorSID"] = _libvswitch.VSIOCtlQuery_dvMirrorSID_set
    __swig_getmethods__["dvMirrorSID"] = _libvswitch.VSIOCtlQuery_dvMirrorSID_get
    if _newclass:dvMirrorSID = _swig_property(_libvswitch.VSIOCtlQuery_dvMirrorSID_get, _libvswitch.VSIOCtlQuery_dvMirrorSID_set)
    __swig_setmethods__["vlanID"] = _libvswitch.VSIOCtlQuery_vlanID_set
    __swig_getmethods__["vlanID"] = _libvswitch.VSIOCtlQuery_vlanID_get
    if _newclass:vlanID = _swig_property(_libvswitch.VSIOCtlQuery_vlanID_get, _libvswitch.VSIOCtlQuery_vlanID_set)
    __swig_getmethods__["mcastFilter"] = _libvswitch.VSIOCtlQuery_mcastFilter_get
    if _newclass:mcastFilter = _swig_property(_libvswitch.VSIOCtlQuery_mcastFilter_get)
    __swig_getmethods__["uplink"] = _libvswitch.VSIOCtlQuery_uplink_get
    if _newclass:uplink = _swig_property(_libvswitch.VSIOCtlQuery_uplink_get)
    __swig_setmethods__["macEntry"] = _libvswitch.VSIOCtlQuery_macEntry_set
    __swig_getmethods__["macEntry"] = _libvswitch.VSIOCtlQuery_macEntry_get
    if _newclass:macEntry = _swig_property(_libvswitch.VSIOCtlQuery_macEntry_get, _libvswitch.VSIOCtlQuery_macEntry_set)
    __swig_setmethods__["globalMACLearningProps"] = _libvswitch.VSIOCtlQuery_globalMACLearningProps_set
    __swig_getmethods__["globalMACLearningProps"] = _libvswitch.VSIOCtlQuery_globalMACLearningProps_get
    if _newclass:globalMACLearningProps = _swig_property(_libvswitch.VSIOCtlQuery_globalMACLearningProps_get, _libvswitch.VSIOCtlQuery_globalMACLearningProps_set)
    def __init__(self): 
        this = _libvswitch.new_VSIOCtlQuery()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSIOCtlQuery
    __del__ = lambda self : None;
VSIOCtlQuery_swigregister = _libvswitch.VSIOCtlQuery_swigregister
VSIOCtlQuery_swigregister(VSIOCtlQuery)

class VSIOCtlData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSIOCtlData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSIOCtlData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dataInLen"] = _libvswitch.VSIOCtlData_dataInLen_set
    __swig_getmethods__["dataInLen"] = _libvswitch.VSIOCtlData_dataInLen_get
    if _newclass:dataInLen = _swig_property(_libvswitch.VSIOCtlData_dataInLen_get, _libvswitch.VSIOCtlData_dataInLen_set)
    __swig_setmethods__["dataOutLen"] = _libvswitch.VSIOCtlData_dataOutLen_set
    __swig_getmethods__["dataOutLen"] = _libvswitch.VSIOCtlData_dataOutLen_get
    if _newclass:dataOutLen = _swig_property(_libvswitch.VSIOCtlData_dataOutLen_get, _libvswitch.VSIOCtlData_dataOutLen_set)
    __swig_setmethods__["dataInPtr"] = _libvswitch.VSIOCtlData_dataInPtr_set
    __swig_getmethods__["dataInPtr"] = _libvswitch.VSIOCtlData_dataInPtr_get
    if _newclass:dataInPtr = _swig_property(_libvswitch.VSIOCtlData_dataInPtr_get, _libvswitch.VSIOCtlData_dataInPtr_set)
    __swig_setmethods__["dataOutPtr"] = _libvswitch.VSIOCtlData_dataOutPtr_set
    __swig_getmethods__["dataOutPtr"] = _libvswitch.VSIOCtlData_dataOutPtr_get
    if _newclass:dataOutPtr = _swig_property(_libvswitch.VSIOCtlData_dataOutPtr_get, _libvswitch.VSIOCtlData_dataOutPtr_set)
    def __init__(self): 
        this = _libvswitch.new_VSIOCtlData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSIOCtlData
    __del__ = lambda self : None;
VSIOCtlData_swigregister = _libvswitch.VSIOCtlData_swigregister
VSIOCtlData_swigregister(VSIOCtlData)

class VSInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mtu"] = _libvswitch.VSInfo_mtu_set
    __swig_getmethods__["mtu"] = _libvswitch.VSInfo_mtu_get
    if _newclass:mtu = _swig_property(_libvswitch.VSInfo_mtu_get, _libvswitch.VSInfo_mtu_set)
    __swig_setmethods__["maxValidVlan"] = _libvswitch.VSInfo_maxValidVlan_set
    __swig_getmethods__["maxValidVlan"] = _libvswitch.VSInfo_maxValidVlan_get
    if _newclass:maxValidVlan = _swig_property(_libvswitch.VSInfo_maxValidVlan_get, _libvswitch.VSInfo_maxValidVlan_set)
    __swig_setmethods__["minValidVlan"] = _libvswitch.VSInfo_minValidVlan_set
    __swig_getmethods__["minValidVlan"] = _libvswitch.VSInfo_minValidVlan_get
    if _newclass:minValidVlan = _swig_property(_libvswitch.VSInfo_minValidVlan_get, _libvswitch.VSInfo_minValidVlan_set)
    __swig_setmethods__["activePorts"] = _libvswitch.VSInfo_activePorts_set
    __swig_getmethods__["activePorts"] = _libvswitch.VSInfo_activePorts_get
    if _newclass:activePorts = _swig_property(_libvswitch.VSInfo_activePorts_get, _libvswitch.VSInfo_activePorts_set)
    __swig_setmethods__["maxPorts"] = _libvswitch.VSInfo_maxPorts_set
    __swig_getmethods__["maxPorts"] = _libvswitch.VSInfo_maxPorts_get
    if _newclass:maxPorts = _swig_property(_libvswitch.VSInfo_maxPorts_get, _libvswitch.VSInfo_maxPorts_set)
    __swig_setmethods__["dvsName"] = _libvswitch.VSInfo_dvsName_set
    __swig_getmethods__["dvsName"] = _libvswitch.VSInfo_dvsName_get
    if _newclass:dvsName = _swig_property(_libvswitch.VSInfo_dvsName_get, _libvswitch.VSInfo_dvsName_set)
    __swig_setmethods__["vdsID"] = _libvswitch.VSInfo_vdsID_set
    __swig_getmethods__["vdsID"] = _libvswitch.VSInfo_vdsID_get
    if _newclass:vdsID = _swig_property(_libvswitch.VSInfo_vdsID_get, _libvswitch.VSInfo_vdsID_set)
    def __init__(self): 
        this = _libvswitch.new_VSInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSInfo
    __del__ = lambda self : None;
VSInfo_swigregister = _libvswitch.VSInfo_swigregister
VSInfo_swigregister(VSInfo)

class VSStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pktsTx"] = _libvswitch.VSStats_pktsTx_set
    __swig_getmethods__["pktsTx"] = _libvswitch.VSStats_pktsTx_get
    if _newclass:pktsTx = _swig_property(_libvswitch.VSStats_pktsTx_get, _libvswitch.VSStats_pktsTx_set)
    __swig_setmethods__["pktsTxMulticast"] = _libvswitch.VSStats_pktsTxMulticast_set
    __swig_getmethods__["pktsTxMulticast"] = _libvswitch.VSStats_pktsTxMulticast_get
    if _newclass:pktsTxMulticast = _swig_property(_libvswitch.VSStats_pktsTxMulticast_get, _libvswitch.VSStats_pktsTxMulticast_set)
    __swig_setmethods__["pktsTxBroadcast"] = _libvswitch.VSStats_pktsTxBroadcast_set
    __swig_getmethods__["pktsTxBroadcast"] = _libvswitch.VSStats_pktsTxBroadcast_get
    if _newclass:pktsTxBroadcast = _swig_property(_libvswitch.VSStats_pktsTxBroadcast_get, _libvswitch.VSStats_pktsTxBroadcast_set)
    __swig_setmethods__["pktsRx"] = _libvswitch.VSStats_pktsRx_set
    __swig_getmethods__["pktsRx"] = _libvswitch.VSStats_pktsRx_get
    if _newclass:pktsRx = _swig_property(_libvswitch.VSStats_pktsRx_get, _libvswitch.VSStats_pktsRx_set)
    __swig_setmethods__["pktsRxMulticast"] = _libvswitch.VSStats_pktsRxMulticast_set
    __swig_getmethods__["pktsRxMulticast"] = _libvswitch.VSStats_pktsRxMulticast_get
    if _newclass:pktsRxMulticast = _swig_property(_libvswitch.VSStats_pktsRxMulticast_get, _libvswitch.VSStats_pktsRxMulticast_set)
    __swig_setmethods__["pktsRxBroadcast"] = _libvswitch.VSStats_pktsRxBroadcast_set
    __swig_getmethods__["pktsRxBroadcast"] = _libvswitch.VSStats_pktsRxBroadcast_get
    if _newclass:pktsRxBroadcast = _swig_property(_libvswitch.VSStats_pktsRxBroadcast_get, _libvswitch.VSStats_pktsRxBroadcast_set)
    __swig_setmethods__["bytesTx"] = _libvswitch.VSStats_bytesTx_set
    __swig_getmethods__["bytesTx"] = _libvswitch.VSStats_bytesTx_get
    if _newclass:bytesTx = _swig_property(_libvswitch.VSStats_bytesTx_get, _libvswitch.VSStats_bytesTx_set)
    __swig_setmethods__["bytesTxMulticast"] = _libvswitch.VSStats_bytesTxMulticast_set
    __swig_getmethods__["bytesTxMulticast"] = _libvswitch.VSStats_bytesTxMulticast_get
    if _newclass:bytesTxMulticast = _swig_property(_libvswitch.VSStats_bytesTxMulticast_get, _libvswitch.VSStats_bytesTxMulticast_set)
    __swig_setmethods__["bytesTxBroadcast"] = _libvswitch.VSStats_bytesTxBroadcast_set
    __swig_getmethods__["bytesTxBroadcast"] = _libvswitch.VSStats_bytesTxBroadcast_get
    if _newclass:bytesTxBroadcast = _swig_property(_libvswitch.VSStats_bytesTxBroadcast_get, _libvswitch.VSStats_bytesTxBroadcast_set)
    __swig_setmethods__["bytesRx"] = _libvswitch.VSStats_bytesRx_set
    __swig_getmethods__["bytesRx"] = _libvswitch.VSStats_bytesRx_get
    if _newclass:bytesRx = _swig_property(_libvswitch.VSStats_bytesRx_get, _libvswitch.VSStats_bytesRx_set)
    __swig_setmethods__["bytesRxMulticast"] = _libvswitch.VSStats_bytesRxMulticast_set
    __swig_getmethods__["bytesRxMulticast"] = _libvswitch.VSStats_bytesRxMulticast_get
    if _newclass:bytesRxMulticast = _swig_property(_libvswitch.VSStats_bytesRxMulticast_get, _libvswitch.VSStats_bytesRxMulticast_set)
    __swig_setmethods__["bytesRxBroadcast"] = _libvswitch.VSStats_bytesRxBroadcast_set
    __swig_getmethods__["bytesRxBroadcast"] = _libvswitch.VSStats_bytesRxBroadcast_get
    if _newclass:bytesRxBroadcast = _swig_property(_libvswitch.VSStats_bytesRxBroadcast_get, _libvswitch.VSStats_bytesRxBroadcast_set)
    __swig_setmethods__["droppedTx"] = _libvswitch.VSStats_droppedTx_set
    __swig_getmethods__["droppedTx"] = _libvswitch.VSStats_droppedTx_get
    if _newclass:droppedTx = _swig_property(_libvswitch.VSStats_droppedTx_get, _libvswitch.VSStats_droppedTx_set)
    __swig_setmethods__["droppedRx"] = _libvswitch.VSStats_droppedRx_set
    __swig_getmethods__["droppedRx"] = _libvswitch.VSStats_droppedRx_get
    if _newclass:droppedRx = _swig_property(_libvswitch.VSStats_droppedRx_get, _libvswitch.VSStats_droppedRx_set)
    def __init__(self): 
        this = _libvswitch.new_VSStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSStats
    __del__ = lambda self : None;
VSStats_swigregister = _libvswitch.VSStats_swigregister
VSStats_swigregister(VSStats)

class VSPortList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSPortList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSPortList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numPorts"] = _libvswitch.VSPortList_numPorts_set
    __swig_getmethods__["numPorts"] = _libvswitch.VSPortList_numPorts_get
    if _newclass:numPorts = _swig_property(_libvswitch.VSPortList_numPorts_get, _libvswitch.VSPortList_numPorts_set)
    __swig_setmethods__["ports"] = _libvswitch.VSPortList_ports_set
    __swig_getmethods__["ports"] = _libvswitch.VSPortList_ports_get
    if _newclass:ports = _swig_property(_libvswitch.VSPortList_ports_get, _libvswitch.VSPortList_ports_set)
    def __init__(self): 
        this = _libvswitch.new_VSPortList()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSPortList
    __del__ = lambda self : None;
VSPortList_swigregister = _libvswitch.VSPortList_swigregister
VSPortList_swigregister(VSPortList)

VS_PORT_CLIENT_UNKNOWN = _libvswitch.VS_PORT_CLIENT_UNKNOWN
VS_PORT_CLIENT_TCPIP = _libvswitch.VS_PORT_CLIENT_TCPIP
VS_PORT_CLIENT_VNIC = _libvswitch.VS_PORT_CLIENT_VNIC
VS_PORT_CLIENT_UPLINK = _libvswitch.VS_PORT_CLIENT_UPLINK
VS_PORT_CLIENT_LAG = _libvswitch.VS_PORT_CLIENT_LAG
VS_VLAN_TP_FLAG_TAGGED_INPUT = _libvswitch.VS_VLAN_TP_FLAG_TAGGED_INPUT
VS_VLAN_TP_FLAG_TAGGED_OUTPUT = _libvswitch.VS_VLAN_TP_FLAG_TAGGED_OUTPUT
VS_VLAN_TP_FLAG_OVERWRITE_VID = _libvswitch.VS_VLAN_TP_FLAG_OVERWRITE_VID
VS_VLAN_TP_FLAG_OVERWRITE_PRIORITY = _libvswitch.VS_VLAN_TP_FLAG_OVERWRITE_PRIORITY
VS_VLAN_TP_FLAG_FILTER_ON_VIDS = _libvswitch.VS_VLAN_TP_FLAG_FILTER_ON_VIDS
VS_VLAN_TP_FLAG_QOS_OUTPUT_QUEUE = _libvswitch.VS_VLAN_TP_FLAG_QOS_OUTPUT_QUEUE
VS_VLAN_TP_FLAG_ALLOW_NESTEDTAG = _libvswitch.VS_VLAN_TP_FLAG_ALLOW_NESTEDTAG
class VSPortInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSPortInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSPortInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["portIdx"] = _libvswitch.VSPortInfo_portIdx_set
    __swig_getmethods__["portIdx"] = _libvswitch.VSPortInfo_portIdx_get
    if _newclass:portIdx = _swig_property(_libvswitch.VSPortInfo_portIdx_get, _libvswitch.VSPortInfo_portIdx_set)
    __swig_setmethods__["clientName"] = _libvswitch.VSPortInfo_clientName_set
    __swig_getmethods__["clientName"] = _libvswitch.VSPortInfo_clientName_get
    if _newclass:clientName = _swig_property(_libvswitch.VSPortInfo_clientName_get, _libvswitch.VSPortInfo_clientName_set)
    __swig_setmethods__["clientType"] = _libvswitch.VSPortInfo_clientType_set
    __swig_getmethods__["clientType"] = _libvswitch.VSPortInfo_clientType_get
    if _newclass:clientType = _swig_property(_libvswitch.VSPortInfo_clientType_get, _libvswitch.VSPortInfo_clientType_set)
    __swig_setmethods__["fixedHwID"] = _libvswitch.VSPortInfo_fixedHwID_set
    __swig_getmethods__["fixedHwID"] = _libvswitch.VSPortInfo_fixedHwID_get
    if _newclass:fixedHwID = _swig_property(_libvswitch.VSPortInfo_fixedHwID_get, _libvswitch.VSPortInfo_fixedHwID_set)
    __swig_setmethods__["dvPortId"] = _libvswitch.VSPortInfo_dvPortId_set
    __swig_getmethods__["dvPortId"] = _libvswitch.VSPortInfo_dvPortId_get
    if _newclass:dvPortId = _swig_property(_libvswitch.VSPortInfo_dvPortId_get, _libvswitch.VSPortInfo_dvPortId_set)
    __swig_getmethods__["ethFrpAccepted"] = _libvswitch.VSPortInfo_ethFrpAccepted_get
    if _newclass:ethFrpAccepted = _swig_property(_libvswitch.VSPortInfo_ethFrpAccepted_get)
    __swig_setmethods__["stats"] = _libvswitch.VSPortInfo_stats_set
    __swig_getmethods__["stats"] = _libvswitch.VSPortInfo_stats_get
    if _newclass:stats = _swig_property(_libvswitch.VSPortInfo_stats_get, _libvswitch.VSPortInfo_stats_set)
    __swig_getmethods__["vlan"] = _libvswitch.VSPortInfo_vlan_get
    if _newclass:vlan = _swig_property(_libvswitch.VSPortInfo_vlan_get)
    def __init__(self): 
        this = _libvswitch.new_VSPortInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSPortInfo
    __del__ = lambda self : None;
VSPortInfo_swigregister = _libvswitch.VSPortInfo_swigregister
VSPortInfo_swigregister(VSPortInfo)

class VSPortInfo_vlan(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSPortInfo_vlan, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSPortInfo_vlan, name)
    __repr__ = _swig_repr
    __swig_setmethods__["defaultVID"] = _libvswitch.VSPortInfo_vlan_defaultVID_set
    __swig_getmethods__["defaultVID"] = _libvswitch.VSPortInfo_vlan_defaultVID_get
    if _newclass:defaultVID = _swig_property(_libvswitch.VSPortInfo_vlan_defaultVID_get, _libvswitch.VSPortInfo_vlan_defaultVID_set)
    __swig_setmethods__["primaryVID"] = _libvswitch.VSPortInfo_vlan_primaryVID_set
    __swig_getmethods__["primaryVID"] = _libvswitch.VSPortInfo_vlan_primaryVID_get
    if _newclass:primaryVID = _swig_property(_libvswitch.VSPortInfo_vlan_primaryVID_get, _libvswitch.VSPortInfo_vlan_primaryVID_set)
    __swig_setmethods__["flags"] = _libvswitch.VSPortInfo_vlan_flags_set
    __swig_getmethods__["flags"] = _libvswitch.VSPortInfo_vlan_flags_get
    if _newclass:flags = _swig_property(_libvswitch.VSPortInfo_vlan_flags_get, _libvswitch.VSPortInfo_vlan_flags_set)
    __swig_setmethods__["statsEnabled"] = _libvswitch.VSPortInfo_vlan_statsEnabled_set
    __swig_getmethods__["statsEnabled"] = _libvswitch.VSPortInfo_vlan_statsEnabled_get
    if _newclass:statsEnabled = _swig_property(_libvswitch.VSPortInfo_vlan_statsEnabled_get, _libvswitch.VSPortInfo_vlan_statsEnabled_set)
    def __init__(self): 
        this = _libvswitch.new_VSPortInfo_vlan()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSPortInfo_vlan
    __del__ = lambda self : None;
VSPortInfo_vlan_swigregister = _libvswitch.VSPortInfo_vlan_swigregister
VSPortInfo_vlan_swigregister(VSPortInfo_vlan)

class VSPortInfo_ethFrpAccepted(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSPortInfo_ethFrpAccepted, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSPortInfo_ethFrpAccepted, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numMulticastAddrs"] = _libvswitch.VSPortInfo_ethFrpAccepted_numMulticastAddrs_set
    __swig_getmethods__["numMulticastAddrs"] = _libvswitch.VSPortInfo_ethFrpAccepted_numMulticastAddrs_get
    if _newclass:numMulticastAddrs = _swig_property(_libvswitch.VSPortInfo_ethFrpAccepted_numMulticastAddrs_get, _libvswitch.VSPortInfo_ethFrpAccepted_numMulticastAddrs_set)
    __swig_setmethods__["multicastAddrs"] = _libvswitch.VSPortInfo_ethFrpAccepted_multicastAddrs_set
    __swig_getmethods__["multicastAddrs"] = _libvswitch.VSPortInfo_ethFrpAccepted_multicastAddrs_get
    if _newclass:multicastAddrs = _swig_property(_libvswitch.VSPortInfo_ethFrpAccepted_multicastAddrs_get, _libvswitch.VSPortInfo_ethFrpAccepted_multicastAddrs_set)
    def __init__(self): 
        this = _libvswitch.new_VSPortInfo_ethFrpAccepted()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSPortInfo_ethFrpAccepted
    __del__ = lambda self : None;
VSPortInfo_ethFrpAccepted_swigregister = _libvswitch.VSPortInfo_ethFrpAccepted_swigregister
VSPortInfo_ethFrpAccepted_swigregister(VSPortInfo_ethFrpAccepted)

VS_VLAN_BITMAP_ARRAY_SIZE = _libvswitch.VS_VLAN_BITMAP_ARRAY_SIZE
class VSVLANBitmap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSVLANBitmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSVLANBitmap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bits"] = _libvswitch.VSVLANBitmap_bits_set
    __swig_getmethods__["bits"] = _libvswitch.VSVLANBitmap_bits_get
    if _newclass:bits = _swig_property(_libvswitch.VSVLANBitmap_bits_get, _libvswitch.VSVLANBitmap_bits_set)
    def __init__(self): 
        this = _libvswitch.new_VSVLANBitmap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSVLANBitmap
    __del__ = lambda self : None;
VSVLANBitmap_swigregister = _libvswitch.VSVLANBitmap_swigregister
VSVLANBitmap_swigregister(VSVLANBitmap)

class VSVLAN(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSVLAN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSVLAN, name)
    __repr__ = _swig_repr
    __swig_setmethods__["creationTime"] = _libvswitch.VSVLAN_creationTime_set
    __swig_getmethods__["creationTime"] = _libvswitch.VSVLAN_creationTime_get
    if _newclass:creationTime = _swig_property(_libvswitch.VSVLAN_creationTime_get, _libvswitch.VSVLAN_creationTime_set)
    __swig_setmethods__["modificationTime"] = _libvswitch.VSVLAN_modificationTime_set
    __swig_getmethods__["modificationTime"] = _libvswitch.VSVLAN_modificationTime_get
    if _newclass:modificationTime = _swig_property(_libvswitch.VSVLAN_modificationTime_get, _libvswitch.VSVLAN_modificationTime_set)
    __swig_setmethods__["pktsTx"] = _libvswitch.VSVLAN_pktsTx_set
    __swig_getmethods__["pktsTx"] = _libvswitch.VSVLAN_pktsTx_get
    if _newclass:pktsTx = _swig_property(_libvswitch.VSVLAN_pktsTx_get, _libvswitch.VSVLAN_pktsTx_set)
    __swig_setmethods__["pktsRx"] = _libvswitch.VSVLAN_pktsRx_set
    __swig_getmethods__["pktsRx"] = _libvswitch.VSVLAN_pktsRx_get
    if _newclass:pktsRx = _swig_property(_libvswitch.VSVLAN_pktsRx_get, _libvswitch.VSVLAN_pktsRx_set)
    def __init__(self): 
        this = _libvswitch.new_VSVLAN()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSVLAN
    __del__ = lambda self : None;
VSVLAN_swigregister = _libvswitch.VSVLAN_swigregister
VSVLAN_swigregister(VSVLAN)

class VSRARPStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSRARPStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSRARPStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rarpPktsSent"] = _libvswitch.VSRARPStats_rarpPktsSent_set
    __swig_getmethods__["rarpPktsSent"] = _libvswitch.VSRARPStats_rarpPktsSent_get
    if _newclass:rarpPktsSent = _swig_property(_libvswitch.VSRARPStats_rarpPktsSent_get, _libvswitch.VSRARPStats_rarpPktsSent_set)
    __swig_setmethods__["maxRARPTime"] = _libvswitch.VSRARPStats_maxRARPTime_set
    __swig_getmethods__["maxRARPTime"] = _libvswitch.VSRARPStats_maxRARPTime_get
    if _newclass:maxRARPTime = _swig_property(_libvswitch.VSRARPStats_maxRARPTime_get, _libvswitch.VSRARPStats_maxRARPTime_set)
    __swig_setmethods__["rarpTime"] = _libvswitch.VSRARPStats_rarpTime_set
    __swig_getmethods__["rarpTime"] = _libvswitch.VSRARPStats_rarpTime_get
    if _newclass:rarpTime = _swig_property(_libvswitch.VSRARPStats_rarpTime_get, _libvswitch.VSRARPStats_rarpTime_set)
    def __init__(self): 
        this = _libvswitch.new_VSRARPStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSRARPStats
    __del__ = lambda self : None;
VSRARPStats_swigregister = _libvswitch.VSRARPStats_swigregister
VSRARPStats_swigregister(VSRARPStats)

class VSServicePortTeamingStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSServicePortTeamingStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSServicePortTeamingStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["txFromSrvPort"] = _libvswitch.VSServicePortTeamingStats_txFromSrvPort_set
    __swig_getmethods__["txFromSrvPort"] = _libvswitch.VSServicePortTeamingStats_txFromSrvPort_get
    if _newclass:txFromSrvPort = _swig_property(_libvswitch.VSServicePortTeamingStats_txFromSrvPort_get, _libvswitch.VSServicePortTeamingStats_txFromSrvPort_set)
    __swig_setmethods__["txUsingSrvPortFRP"] = _libvswitch.VSServicePortTeamingStats_txUsingSrvPortFRP_set
    __swig_getmethods__["txUsingSrvPortFRP"] = _libvswitch.VSServicePortTeamingStats_txUsingSrvPortFRP_get
    if _newclass:txUsingSrvPortFRP = _swig_property(_libvswitch.VSServicePortTeamingStats_txUsingSrvPortFRP_get, _libvswitch.VSServicePortTeamingStats_txUsingSrvPortFRP_set)
    __swig_setmethods__["txUsingPktSrcPortFRP"] = _libvswitch.VSServicePortTeamingStats_txUsingPktSrcPortFRP_set
    __swig_getmethods__["txUsingPktSrcPortFRP"] = _libvswitch.VSServicePortTeamingStats_txUsingPktSrcPortFRP_get
    if _newclass:txUsingPktSrcPortFRP = _swig_property(_libvswitch.VSServicePortTeamingStats_txUsingPktSrcPortFRP_get, _libvswitch.VSServicePortTeamingStats_txUsingPktSrcPortFRP_set)
    __swig_setmethods__["txErrors"] = _libvswitch.VSServicePortTeamingStats_txErrors_set
    __swig_getmethods__["txErrors"] = _libvswitch.VSServicePortTeamingStats_txErrors_get
    if _newclass:txErrors = _swig_property(_libvswitch.VSServicePortTeamingStats_txErrors_get, _libvswitch.VSServicePortTeamingStats_txErrors_set)
    __swig_setmethods__["rxToSrvPort"] = _libvswitch.VSServicePortTeamingStats_rxToSrvPort_set
    __swig_getmethods__["rxToSrvPort"] = _libvswitch.VSServicePortTeamingStats_rxToSrvPort_get
    if _newclass:rxToSrvPort = _swig_property(_libvswitch.VSServicePortTeamingStats_rxToSrvPort_get, _libvswitch.VSServicePortTeamingStats_rxToSrvPort_set)
    __swig_setmethods__["rxRpfOverride"] = _libvswitch.VSServicePortTeamingStats_rxRpfOverride_set
    __swig_getmethods__["rxRpfOverride"] = _libvswitch.VSServicePortTeamingStats_rxRpfOverride_get
    if _newclass:rxRpfOverride = _swig_property(_libvswitch.VSServicePortTeamingStats_rxRpfOverride_get, _libvswitch.VSServicePortTeamingStats_rxRpfOverride_set)
    def __init__(self): 
        this = _libvswitch.new_VSServicePortTeamingStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSServicePortTeamingStats
    __del__ = lambda self : None;
VSServicePortTeamingStats_swigregister = _libvswitch.VSServicePortTeamingStats_swigregister
VSServicePortTeamingStats_swigregister(VSServicePortTeamingStats)

class VSPromiscSessionActiveDsts(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSPromiscSessionActiveDsts, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSPromiscSessionActiveDsts, name)
    __repr__ = _swig_repr
    __swig_setmethods__["totalEntries"] = _libvswitch.VSPromiscSessionActiveDsts_totalEntries_set
    __swig_getmethods__["totalEntries"] = _libvswitch.VSPromiscSessionActiveDsts_totalEntries_get
    if _newclass:totalEntries = _swig_property(_libvswitch.VSPromiscSessionActiveDsts_totalEntries_get, _libvswitch.VSPromiscSessionActiveDsts_totalEntries_set)
    __swig_setmethods__["numEntries"] = _libvswitch.VSPromiscSessionActiveDsts_numEntries_set
    __swig_getmethods__["numEntries"] = _libvswitch.VSPromiscSessionActiveDsts_numEntries_get
    if _newclass:numEntries = _swig_property(_libvswitch.VSPromiscSessionActiveDsts_numEntries_get, _libvswitch.VSPromiscSessionActiveDsts_numEntries_set)
    __swig_setmethods__["entries"] = _libvswitch.VSPromiscSessionActiveDsts_entries_set
    __swig_getmethods__["entries"] = _libvswitch.VSPromiscSessionActiveDsts_entries_get
    if _newclass:entries = _swig_property(_libvswitch.VSPromiscSessionActiveDsts_entries_get, _libvswitch.VSPromiscSessionActiveDsts_entries_set)
    def __getitem__(self, *args) -> "vmk_SwitchPortID const *" : return _libvswitch.VSPromiscSessionActiveDsts___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _libvswitch.VSPromiscSessionActiveDsts___setitem__(self, *args)
    def __init__(self): 
        this = _libvswitch.new_VSPromiscSessionActiveDsts()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSPromiscSessionActiveDsts
    __del__ = lambda self : None;
VSPromiscSessionActiveDsts_swigregister = _libvswitch.VSPromiscSessionActiveDsts_swigregister
VSPromiscSessionActiveDsts_swigregister(VSPromiscSessionActiveDsts)

class VSDVMirrorSessionIDs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSDVMirrorSessionIDs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSDVMirrorSessionIDs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["totalEntries"] = _libvswitch.VSDVMirrorSessionIDs_totalEntries_set
    __swig_getmethods__["totalEntries"] = _libvswitch.VSDVMirrorSessionIDs_totalEntries_get
    if _newclass:totalEntries = _swig_property(_libvswitch.VSDVMirrorSessionIDs_totalEntries_get, _libvswitch.VSDVMirrorSessionIDs_totalEntries_set)
    __swig_setmethods__["numEntries"] = _libvswitch.VSDVMirrorSessionIDs_numEntries_set
    __swig_getmethods__["numEntries"] = _libvswitch.VSDVMirrorSessionIDs_numEntries_get
    if _newclass:numEntries = _swig_property(_libvswitch.VSDVMirrorSessionIDs_numEntries_get, _libvswitch.VSDVMirrorSessionIDs_numEntries_set)
    __swig_setmethods__["entries"] = _libvswitch.VSDVMirrorSessionIDs_entries_set
    __swig_getmethods__["entries"] = _libvswitch.VSDVMirrorSessionIDs_entries_get
    if _newclass:entries = _swig_property(_libvswitch.VSDVMirrorSessionIDs_entries_get, _libvswitch.VSDVMirrorSessionIDs_entries_set)
    def __getitem__(self, *args) -> "PyObject *" : return _libvswitch.VSDVMirrorSessionIDs___getitem__(self, *args)
    def __init__(self): 
        this = _libvswitch.new_VSDVMirrorSessionIDs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSDVMirrorSessionIDs
    __del__ = lambda self : None;
VSDVMirrorSessionIDs_swigregister = _libvswitch.VSDVMirrorSessionIDs_swigregister
VSDVMirrorSessionIDs_swigregister(VSDVMirrorSessionIDs)

class VSDVMirrorSessionStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSDVMirrorSessionStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSDVMirrorSessionStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mirrorPktCnt"] = _libvswitch.VSDVMirrorSessionStats_mirrorPktCnt_set
    __swig_getmethods__["mirrorPktCnt"] = _libvswitch.VSDVMirrorSessionStats_mirrorPktCnt_get
    if _newclass:mirrorPktCnt = _swig_property(_libvswitch.VSDVMirrorSessionStats_mirrorPktCnt_get, _libvswitch.VSDVMirrorSessionStats_mirrorPktCnt_set)
    __swig_setmethods__["mirrorPktFailCnt"] = _libvswitch.VSDVMirrorSessionStats_mirrorPktFailCnt_set
    __swig_getmethods__["mirrorPktFailCnt"] = _libvswitch.VSDVMirrorSessionStats_mirrorPktFailCnt_get
    if _newclass:mirrorPktFailCnt = _swig_property(_libvswitch.VSDVMirrorSessionStats_mirrorPktFailCnt_get, _libvswitch.VSDVMirrorSessionStats_mirrorPktFailCnt_set)
    __swig_setmethods__["mirroredPkts"] = _libvswitch.VSDVMirrorSessionStats_mirroredPkts_set
    __swig_getmethods__["mirroredPkts"] = _libvswitch.VSDVMirrorSessionStats_mirroredPkts_get
    if _newclass:mirroredPkts = _swig_property(_libvswitch.VSDVMirrorSessionStats_mirroredPkts_get, _libvswitch.VSDVMirrorSessionStats_mirroredPkts_set)
    __swig_setmethods__["discardedPkts"] = _libvswitch.VSDVMirrorSessionStats_discardedPkts_set
    __swig_getmethods__["discardedPkts"] = _libvswitch.VSDVMirrorSessionStats_discardedPkts_get
    if _newclass:discardedPkts = _swig_property(_libvswitch.VSDVMirrorSessionStats_discardedPkts_get, _libvswitch.VSDVMirrorSessionStats_discardedPkts_set)
    __swig_setmethods__["failedPkts"] = _libvswitch.VSDVMirrorSessionStats_failedPkts_set
    __swig_getmethods__["failedPkts"] = _libvswitch.VSDVMirrorSessionStats_failedPkts_get
    if _newclass:failedPkts = _swig_property(_libvswitch.VSDVMirrorSessionStats_failedPkts_get, _libvswitch.VSDVMirrorSessionStats_failedPkts_set)
    __swig_setmethods__["name"] = _libvswitch.VSDVMirrorSessionStats_name_set
    __swig_getmethods__["name"] = _libvswitch.VSDVMirrorSessionStats_name_get
    if _newclass:name = _swig_property(_libvswitch.VSDVMirrorSessionStats_name_get, _libvswitch.VSDVMirrorSessionStats_name_set)
    def __init__(self): 
        this = _libvswitch.new_VSDVMirrorSessionStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSDVMirrorSessionStats
    __del__ = lambda self : None;
VSDVMirrorSessionStats_swigregister = _libvswitch.VSDVMirrorSessionStats_swigregister
VSDVMirrorSessionStats_swigregister(VSDVMirrorSessionStats)

class VSMcastFilters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSMcastFilters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSMcastFilters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["totalEntries"] = _libvswitch.VSMcastFilters_totalEntries_set
    __swig_getmethods__["totalEntries"] = _libvswitch.VSMcastFilters_totalEntries_get
    if _newclass:totalEntries = _swig_property(_libvswitch.VSMcastFilters_totalEntries_get, _libvswitch.VSMcastFilters_totalEntries_set)
    __swig_setmethods__["numEntries"] = _libvswitch.VSMcastFilters_numEntries_set
    __swig_getmethods__["numEntries"] = _libvswitch.VSMcastFilters_numEntries_get
    if _newclass:numEntries = _swig_property(_libvswitch.VSMcastFilters_numEntries_get, _libvswitch.VSMcastFilters_numEntries_set)
    __swig_setmethods__["macEntries"] = _libvswitch.VSMcastFilters_macEntries_set
    __swig_getmethods__["macEntries"] = _libvswitch.VSMcastFilters_macEntries_get
    if _newclass:macEntries = _swig_property(_libvswitch.VSMcastFilters_macEntries_get, _libvswitch.VSMcastFilters_macEntries_set)
    __swig_setmethods__["ipv4Entries"] = _libvswitch.VSMcastFilters_ipv4Entries_set
    __swig_getmethods__["ipv4Entries"] = _libvswitch.VSMcastFilters_ipv4Entries_get
    if _newclass:ipv4Entries = _swig_property(_libvswitch.VSMcastFilters_ipv4Entries_get, _libvswitch.VSMcastFilters_ipv4Entries_set)
    __swig_setmethods__["ipv6Entries"] = _libvswitch.VSMcastFilters_ipv6Entries_set
    __swig_getmethods__["ipv6Entries"] = _libvswitch.VSMcastFilters_ipv6Entries_get
    if _newclass:ipv6Entries = _swig_property(_libvswitch.VSMcastFilters_ipv6Entries_get, _libvswitch.VSMcastFilters_ipv6Entries_set)
    def get_mac_entry(self, *args) -> "PyObject *" : return _libvswitch.VSMcastFilters_get_mac_entry(self, *args)
    def get_ip_entry(self, *args) -> "PyObject *" : return _libvswitch.VSMcastFilters_get_ip_entry(self, *args)
    def get_ipv6_entry(self, *args) -> "PyObject *" : return _libvswitch.VSMcastFilters_get_ipv6_entry(self, *args)
    def __init__(self): 
        this = _libvswitch.new_VSMcastFilters()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSMcastFilters
    __del__ = lambda self : None;
VSMcastFilters_swigregister = _libvswitch.VSMcastFilters_swigregister
VSMcastFilters_swigregister(VSMcastFilters)

VS_MCAST_SRC_IP_FILTER_MODE_NONE = _libvswitch.VS_MCAST_SRC_IP_FILTER_MODE_NONE
VS_MCAST_SRC_IP_FILTER_MODE_INCLUDE = _libvswitch.VS_MCAST_SRC_IP_FILTER_MODE_INCLUDE
VS_MCAST_SRC_IP_FILTER_MODE_EXCLUDE = _libvswitch.VS_MCAST_SRC_IP_FILTER_MODE_EXCLUDE
class VSMcastFilterStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSMcastFilterStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSMcastFilterStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _libvswitch.VSMcastFilterStats_version_set
    __swig_getmethods__["version"] = _libvswitch.VSMcastFilterStats_version_get
    if _newclass:version = _swig_property(_libvswitch.VSMcastFilterStats_version_get, _libvswitch.VSMcastFilterStats_version_set)
    __swig_setmethods__["srcIPFilterMode"] = _libvswitch.VSMcastFilterStats_srcIPFilterMode_set
    __swig_getmethods__["srcIPFilterMode"] = _libvswitch.VSMcastFilterStats_srcIPFilterMode_get
    if _newclass:srcIPFilterMode = _swig_property(_libvswitch.VSMcastFilterStats_srcIPFilterMode_get, _libvswitch.VSMcastFilterStats_srcIPFilterMode_set)
    __swig_setmethods__["updateTime"] = _libvswitch.VSMcastFilterStats_updateTime_set
    __swig_getmethods__["updateTime"] = _libvswitch.VSMcastFilterStats_updateTime_get
    if _newclass:updateTime = _swig_property(_libvswitch.VSMcastFilterStats_updateTime_get, _libvswitch.VSMcastFilterStats_updateTime_set)
    __swig_setmethods__["vni"] = _libvswitch.VSMcastFilterStats_vni_set
    __swig_getmethods__["vni"] = _libvswitch.VSMcastFilterStats_vni_get
    if _newclass:vni = _swig_property(_libvswitch.VSMcastFilterStats_vni_get, _libvswitch.VSMcastFilterStats_vni_set)
    __swig_setmethods__["totalEntries"] = _libvswitch.VSMcastFilterStats_totalEntries_set
    __swig_getmethods__["totalEntries"] = _libvswitch.VSMcastFilterStats_totalEntries_get
    if _newclass:totalEntries = _swig_property(_libvswitch.VSMcastFilterStats_totalEntries_get, _libvswitch.VSMcastFilterStats_totalEntries_set)
    __swig_setmethods__["numEntries"] = _libvswitch.VSMcastFilterStats_numEntries_set
    __swig_getmethods__["numEntries"] = _libvswitch.VSMcastFilterStats_numEntries_get
    if _newclass:numEntries = _swig_property(_libvswitch.VSMcastFilterStats_numEntries_get, _libvswitch.VSMcastFilterStats_numEntries_set)
    __swig_setmethods__["ipv4Entries"] = _libvswitch.VSMcastFilterStats_ipv4Entries_set
    __swig_getmethods__["ipv4Entries"] = _libvswitch.VSMcastFilterStats_ipv4Entries_get
    if _newclass:ipv4Entries = _swig_property(_libvswitch.VSMcastFilterStats_ipv4Entries_get, _libvswitch.VSMcastFilterStats_ipv4Entries_set)
    __swig_setmethods__["ipv6Entries"] = _libvswitch.VSMcastFilterStats_ipv6Entries_set
    __swig_getmethods__["ipv6Entries"] = _libvswitch.VSMcastFilterStats_ipv6Entries_get
    if _newclass:ipv6Entries = _swig_property(_libvswitch.VSMcastFilterStats_ipv6Entries_get, _libvswitch.VSMcastFilterStats_ipv6Entries_set)
    def get_ip_entry(self, *args) -> "PyObject *" : return _libvswitch.VSMcastFilterStats_get_ip_entry(self, *args)
    def get_ipv6_entry(self, *args) -> "PyObject *" : return _libvswitch.VSMcastFilterStats_get_ipv6_entry(self, *args)
    def __init__(self): 
        this = _libvswitch.new_VSMcastFilterStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSMcastFilterStats
    __del__ = lambda self : None;
VSMcastFilterStats_swigregister = _libvswitch.VSMcastFilterStats_swigregister
VSMcastFilterStats_swigregister(VSMcastFilterStats)

class VSUplinks(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSUplinks, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSUplinks, name)
    __repr__ = _swig_repr
    __swig_setmethods__["totalEntries"] = _libvswitch.VSUplinks_totalEntries_set
    __swig_getmethods__["totalEntries"] = _libvswitch.VSUplinks_totalEntries_get
    if _newclass:totalEntries = _swig_property(_libvswitch.VSUplinks_totalEntries_get, _libvswitch.VSUplinks_totalEntries_set)
    __swig_setmethods__["numEntries"] = _libvswitch.VSUplinks_numEntries_set
    __swig_getmethods__["numEntries"] = _libvswitch.VSUplinks_numEntries_get
    if _newclass:numEntries = _swig_property(_libvswitch.VSUplinks_numEntries_get, _libvswitch.VSUplinks_numEntries_set)
    __swig_getmethods__["entries"] = _libvswitch.VSUplinks_entries_get
    if _newclass:entries = _swig_property(_libvswitch.VSUplinks_entries_get)
    def __init__(self, *args): 
        this = _libvswitch.new_VSUplinks(*args)
        try: self.this.append(this)
        except: self.this = this
    def __len__(self) -> "int" : return _libvswitch.VSUplinks___len__(self)
    def __getitem__(self, *args) -> "char const *" : return _libvswitch.VSUplinks___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _libvswitch.VSUplinks___setitem__(self, *args)
    __swig_destroy__ = _libvswitch.delete_VSUplinks
    __del__ = lambda self : None;
VSUplinks_swigregister = _libvswitch.VSUplinks_swigregister
VSUplinks_swigregister(VSUplinks)

class VSUplinks_entries(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSUplinks_entries, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSUplinks_entries, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _libvswitch.VSUplinks_entries_name_set
    __swig_getmethods__["name"] = _libvswitch.VSUplinks_entries_name_get
    if _newclass:name = _swig_property(_libvswitch.VSUplinks_entries_name_get, _libvswitch.VSUplinks_entries_name_set)
    __swig_setmethods__["portID"] = _libvswitch.VSUplinks_entries_portID_set
    __swig_getmethods__["portID"] = _libvswitch.VSUplinks_entries_portID_get
    if _newclass:portID = _swig_property(_libvswitch.VSUplinks_entries_portID_get, _libvswitch.VSUplinks_entries_portID_set)
    def __init__(self): 
        this = _libvswitch.new_VSUplinks_entries()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSUplinks_entries
    __del__ = lambda self : None;
VSUplinks_entries_swigregister = _libvswitch.VSUplinks_entries_swigregister
VSUplinks_entries_swigregister(VSUplinks_entries)

VS_LACP_LAG_NAME_LENGTH = _libvswitch.VS_LACP_LAG_NAME_LENGTH
class VSLAGStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSLAGStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSLAGStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _libvswitch.VSLAGStatus_state_set
    __swig_getmethods__["state"] = _libvswitch.VSLAGStatus_state_get
    if _newclass:state = _swig_property(_libvswitch.VSLAGStatus_state_get, _libvswitch.VSLAGStatus_state_set)
    __swig_setmethods__["id"] = _libvswitch.VSLAGStatus_id_set
    __swig_getmethods__["id"] = _libvswitch.VSLAGStatus_id_get
    if _newclass:id = _swig_property(_libvswitch.VSLAGStatus_id_get, _libvswitch.VSLAGStatus_id_set)
    __swig_setmethods__["name"] = _libvswitch.VSLAGStatus_name_set
    __swig_getmethods__["name"] = _libvswitch.VSLAGStatus_name_get
    if _newclass:name = _swig_property(_libvswitch.VSLAGStatus_name_get, _libvswitch.VSLAGStatus_name_set)
    __swig_setmethods__["uplinkLinkupBitmap"] = _libvswitch.VSLAGStatus_uplinkLinkupBitmap_set
    __swig_getmethods__["uplinkLinkupBitmap"] = _libvswitch.VSLAGStatus_uplinkLinkupBitmap_get
    if _newclass:uplinkLinkupBitmap = _swig_property(_libvswitch.VSLAGStatus_uplinkLinkupBitmap_get, _libvswitch.VSLAGStatus_uplinkLinkupBitmap_set)
    __swig_setmethods__["numUplinks"] = _libvswitch.VSLAGStatus_numUplinks_set
    __swig_getmethods__["numUplinks"] = _libvswitch.VSLAGStatus_numUplinks_get
    if _newclass:numUplinks = _swig_property(_libvswitch.VSLAGStatus_numUplinks_get, _libvswitch.VSLAGStatus_numUplinks_set)
    __swig_setmethods__["uplinkNames"] = _libvswitch.VSLAGStatus_uplinkNames_set
    __swig_getmethods__["uplinkNames"] = _libvswitch.VSLAGStatus_uplinkNames_get
    if _newclass:uplinkNames = _swig_property(_libvswitch.VSLAGStatus_uplinkNames_get, _libvswitch.VSLAGStatus_uplinkNames_set)
    def __init__(self): 
        this = _libvswitch.new_VSLAGStatus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSLAGStatus
    __del__ = lambda self : None;
VSLAGStatus_swigregister = _libvswitch.VSLAGStatus_swigregister
VSLAGStatus_swigregister(VSLAGStatus)

class VSLAGTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSLAGTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSLAGTable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numLAGs"] = _libvswitch.VSLAGTable_numLAGs_set
    __swig_getmethods__["numLAGs"] = _libvswitch.VSLAGTable_numLAGs_get
    if _newclass:numLAGs = _swig_property(_libvswitch.VSLAGTable_numLAGs_get, _libvswitch.VSLAGTable_numLAGs_set)
    def __init__(self): 
        this = _libvswitch.new_VSLAGTable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSLAGTable
    __del__ = lambda self : None;
VSLAGTable_swigregister = _libvswitch.VSLAGTable_swigregister
VSLAGTable_swigregister(VSLAGTable)

VS_MAX_LAGS = _libvswitch.VS_MAX_LAGS
VS_MAX_UPLINKS_IN_LAG = _libvswitch.VS_MAX_UPLINKS_IN_LAG
class VSMACTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSMACTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSMACTable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["totalEntries"] = _libvswitch.VSMACTable_totalEntries_set
    __swig_getmethods__["totalEntries"] = _libvswitch.VSMACTable_totalEntries_get
    if _newclass:totalEntries = _swig_property(_libvswitch.VSMACTable_totalEntries_get, _libvswitch.VSMACTable_totalEntries_set)
    __swig_setmethods__["numEntries"] = _libvswitch.VSMACTable_numEntries_set
    __swig_getmethods__["numEntries"] = _libvswitch.VSMACTable_numEntries_get
    if _newclass:numEntries = _swig_property(_libvswitch.VSMACTable_numEntries_get, _libvswitch.VSMACTable_numEntries_set)
    __swig_setmethods__["macEntries"] = _libvswitch.VSMACTable_macEntries_set
    __swig_getmethods__["macEntries"] = _libvswitch.VSMACTable_macEntries_get
    if _newclass:macEntries = _swig_property(_libvswitch.VSMACTable_macEntries_get, _libvswitch.VSMACTable_macEntries_set)
    def __init__(self): 
        this = _libvswitch.new_VSMACTable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSMACTable
    __del__ = lambda self : None;
VSMACTable_swigregister = _libvswitch.VSMACTable_swigregister
VSMACTable_swigregister(VSMACTable)

class VSPMACLearningStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSPMACLearningStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSPMACLearningStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numMACsLearned"] = _libvswitch.VSPMACLearningStats_numMACsLearned_set
    __swig_getmethods__["numMACsLearned"] = _libvswitch.VSPMACLearningStats_numMACsLearned_get
    if _newclass:numMACsLearned = _swig_property(_libvswitch.VSPMACLearningStats_numMACsLearned_get, _libvswitch.VSPMACLearningStats_numMACsLearned_set)
    __swig_setmethods__["noLearningAllowedPkts"] = _libvswitch.VSPMACLearningStats_noLearningAllowedPkts_set
    __swig_getmethods__["noLearningAllowedPkts"] = _libvswitch.VSPMACLearningStats_noLearningAllowedPkts_get
    if _newclass:noLearningAllowedPkts = _swig_property(_libvswitch.VSPMACLearningStats_noLearningAllowedPkts_get, _libvswitch.VSPMACLearningStats_noLearningAllowedPkts_set)
    __swig_setmethods__["noLearningDroppedPkts"] = _libvswitch.VSPMACLearningStats_noLearningDroppedPkts_set
    __swig_getmethods__["noLearningDroppedPkts"] = _libvswitch.VSPMACLearningStats_noLearningDroppedPkts_get
    if _newclass:noLearningDroppedPkts = _swig_property(_libvswitch.VSPMACLearningStats_noLearningDroppedPkts_get, _libvswitch.VSPMACLearningStats_noLearningDroppedPkts_set)
    __swig_setmethods__["numMACsMoved"] = _libvswitch.VSPMACLearningStats_numMACsMoved_set
    __swig_getmethods__["numMACsMoved"] = _libvswitch.VSPMACLearningStats_numMACsMoved_get
    if _newclass:numMACsMoved = _swig_property(_libvswitch.VSPMACLearningStats_numMACsMoved_get, _libvswitch.VSPMACLearningStats_numMACsMoved_set)
    def __init__(self): 
        this = _libvswitch.new_VSPMACLearningStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSPMACLearningStats
    __del__ = lambda self : None;
VSPMACLearningStats_swigregister = _libvswitch.VSPMACLearningStats_swigregister
VSPMACLearningStats_swigregister(VSPMACLearningStats)

VS_RT_OPT_IGMP_QUERY_INTERVAL = _libvswitch.VS_RT_OPT_IGMP_QUERY_INTERVAL
VS_RT_OPT_IGMP_V3_MAX_SRC_IP_NUM = _libvswitch.VS_RT_OPT_IGMP_V3_MAX_SRC_IP_NUM
VS_RT_OPT_IGMP_QUERIES = _libvswitch.VS_RT_OPT_IGMP_QUERIES
VS_RT_OPT_IGMP_VERSION = _libvswitch.VS_RT_OPT_IGMP_VERSION
VS_RT_OPT_MLD_VERSION = _libvswitch.VS_RT_OPT_MLD_VERSION
VS_RT_OPT_MLD_V2_MAX_SRC_IP_NUM = _libvswitch.VS_RT_OPT_MLD_V2_MAX_SRC_IP_NUM
VS_RT_OPT_MAX_RARPS_PER_INTERVAL = _libvswitch.VS_RT_OPT_MAX_RARPS_PER_INTERVAL
VS_RT_OPT_RARP_ADVERTISEMENT_DURATION = _libvswitch.VS_RT_OPT_RARP_ADVERTISEMENT_DURATION
VS_RT_OPT_REVERSE_PATH_FWD_CHECK = _libvswitch.VS_RT_OPT_REVERSE_PATH_FWD_CHECK
VS_RT_OPT_REVERSE_PATH_FWD_CHECK_PROMISC = _libvswitch.VS_RT_OPT_REVERSE_PATH_FWD_CHECK_PROMISC
VS_RT_OPT_ALLOW_FAST_PATH = _libvswitch.VS_RT_OPT_ALLOW_FAST_PATH
VS_RT_OPT_TEAM_POLICY_UP_DELAY = _libvswitch.VS_RT_OPT_TEAM_POLICY_UP_DELAY
VS_RT_OPT_ALLOW_MIRROR_STATS = _libvswitch.VS_RT_OPT_ALLOW_MIRROR_STATS
VS_RT_OPT_IGMP_ROUTER_IP = _libvswitch.VS_RT_OPT_IGMP_ROUTER_IP
VS_RT_OPT_MLD_ROUTER_IP = _libvswitch.VS_RT_OPT_MLD_ROUTER_IP
VS_NUM_RT_OPT = _libvswitch.VS_NUM_RT_OPT
class VSRuntimeOptionHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSRuntimeOptionHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSRuntimeOptionHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libvswitch.VSRuntimeOptionHeader_type_set
    __swig_getmethods__["type"] = _libvswitch.VSRuntimeOptionHeader_type_get
    if _newclass:type = _swig_property(_libvswitch.VSRuntimeOptionHeader_type_get, _libvswitch.VSRuntimeOptionHeader_type_set)
    __swig_setmethods__["length"] = _libvswitch.VSRuntimeOptionHeader_length_set
    __swig_getmethods__["length"] = _libvswitch.VSRuntimeOptionHeader_length_get
    if _newclass:length = _swig_property(_libvswitch.VSRuntimeOptionHeader_length_get, _libvswitch.VSRuntimeOptionHeader_length_set)
    __swig_setmethods__["data"] = _libvswitch.VSRuntimeOptionHeader_data_set
    __swig_getmethods__["data"] = _libvswitch.VSRuntimeOptionHeader_data_get
    if _newclass:data = _swig_property(_libvswitch.VSRuntimeOptionHeader_data_get, _libvswitch.VSRuntimeOptionHeader_data_set)
    def get_option_name(self) -> "PyObject *" : return _libvswitch.VSRuntimeOptionHeader_get_option_name(self)
    def get_option_value(self) -> "PyObject *" : return _libvswitch.VSRuntimeOptionHeader_get_option_value(self)
    def __init__(self): 
        this = _libvswitch.new_VSRuntimeOptionHeader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSRuntimeOptionHeader
    __del__ = lambda self : None;
VSRuntimeOptionHeader_swigregister = _libvswitch.VSRuntimeOptionHeader_swigregister
VSRuntimeOptionHeader_swigregister(VSRuntimeOptionHeader)

VS_CHARDEV_MAX_RUNTIME_OPTIONS_LENGTH = _libvswitch.VS_CHARDEV_MAX_RUNTIME_OPTIONS_LENGTH
VS_CHARDEV_MAX_RUNTIME_STRING_OPTION_LENGTH = _libvswitch.VS_CHARDEV_MAX_RUNTIME_STRING_OPTION_LENGTH
class VSRuntimeOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSRuntimeOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSRuntimeOptions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["totalLength"] = _libvswitch.VSRuntimeOptions_totalLength_set
    __swig_getmethods__["totalLength"] = _libvswitch.VSRuntimeOptions_totalLength_get
    if _newclass:totalLength = _swig_property(_libvswitch.VSRuntimeOptions_totalLength_get, _libvswitch.VSRuntimeOptions_totalLength_set)
    def get_first_option(self) -> "VSRuntimeOptionHeader const *" : return _libvswitch.VSRuntimeOptions_get_first_option(self)
    def get_next_option(self, *args) -> "VSRuntimeOptionHeader const *" : return _libvswitch.VSRuntimeOptions_get_next_option(self, *args)
    def set_options_length(self, *args) -> "void" : return _libvswitch.VSRuntimeOptions_set_options_length(self, *args)
    def add_int_option(self, *args) -> "VSRuntimeOptionHeader *" : return _libvswitch.VSRuntimeOptions_add_int_option(self, *args)
    def add_str_option(self, *args) -> "VSRuntimeOptionHeader *" : return _libvswitch.VSRuntimeOptions_add_str_option(self, *args)
    def __init__(self, *args): 
        this = _libvswitch.new_VSRuntimeOptions(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSRuntimeOptions
    __del__ = lambda self : None;
VSRuntimeOptions_swigregister = _libvswitch.VSRuntimeOptions_swigregister
VSRuntimeOptions_swigregister(VSRuntimeOptions)

PS_CLASS_NAME = _libvswitch.PS_CLASS_NAME
SWNAME = _libvswitch.SWNAME
VSPROP_MTU = _libvswitch.VSPROP_MTU
VSPROP_PVLAN_MAP = _libvswitch.VSPROP_PVLAN_MAP
VSPROP_MULTICAST_FILTER = _libvswitch.VSPROP_MULTICAST_FILTER
VSPROP_SWITCH_TEAMING = _libvswitch.VSPROP_SWITCH_TEAMING
VSPROP_SWITCH_FORWARDING_DISABLED = _libvswitch.VSPROP_SWITCH_FORWARDING_DISABLED
VSPROP_SWITCH_UPLINK_MIRROR_SESSIONS = _libvswitch.VSPROP_SWITCH_UPLINK_MIRROR_SESSIONS
VSPROP_SWITCH_MAC_LEARNING = _libvswitch.VSPROP_SWITCH_MAC_LEARNING
VSPROP_PORT_SECURITY = _libvswitch.VSPROP_PORT_SECURITY
VSPROP_PORT_TEAMING_POLICY = _libvswitch.VSPROP_PORT_TEAMING_POLICY
VSPROP_PORT_TEAMING_OVERRIDE = _libvswitch.VSPROP_PORT_TEAMING_OVERRIDE
VSPROP_PORT_VLAN = _libvswitch.VSPROP_PORT_VLAN
VSPROP_PORT_PRIORITY = _libvswitch.VSPROP_PORT_PRIORITY
VSPROP_PORT_TX_UPLINK = _libvswitch.VSPROP_PORT_TX_UPLINK
VSPROP_PORT_MIRROR_SESSIONS = _libvswitch.VSPROP_PORT_MIRROR_SESSIONS
VSPROP_PORT_VLAN_NESTEDTAG = _libvswitch.VSPROP_PORT_VLAN_NESTEDTAG
VSPROP_PORT_EXTRA_ETH_FRP = _libvswitch.VSPROP_PORT_EXTRA_ETH_FRP
VSPROP_PORT_MAC_MANAGEMENT = _libvswitch.VSPROP_PORT_MAC_MANAGEMENT
VSPROP_PORT_MAC_LEARNING_STATS = _libvswitch.VSPROP_PORT_MAC_LEARNING_STATS
VSPROP_SWITCH_STATUS = _libvswitch.VSPROP_SWITCH_STATUS
VS_DVMIRROR_MAGIC_NUM = _libvswitch.VS_DVMIRROR_MAGIC_NUM
VS_DVMIRROR_VERSION_V1 = _libvswitch.VS_DVMIRROR_VERSION_V1
VS_DVMIRROR_VERSION_V2 = _libvswitch.VS_DVMIRROR_VERSION_V2
VS_DVMIRROR_VERSION_V3 = _libvswitch.VS_DVMIRROR_VERSION_V3
VS_DVMIRROR_VERSION_UNSUPPORTED = _libvswitch.VS_DVMIRROR_VERSION_UNSUPPORTED
VS_DVMIRROR_FLAG_DST_NO_OUTPUT = _libvswitch.VS_DVMIRROR_FLAG_DST_NO_OUTPUT
VS_DVMIRROR_FLAG_DST_NO_INPUT = _libvswitch.VS_DVMIRROR_FLAG_DST_NO_INPUT
VS_DVMIRROR_FLAG_DST_ORIG_VLAN = _libvswitch.VS_DVMIRROR_FLAG_DST_ORIG_VLAN
VS_DVMIRROR_FLAG_DST_ENCAP = _libvswitch.VS_DVMIRROR_FLAG_DST_ENCAP
VS_DVMIRROR_FLAG_LEGACY = _libvswitch.VS_DVMIRROR_FLAG_LEGACY
VS_DVMIRROR_FLAG_DISABLED = _libvswitch.VS_DVMIRROR_FLAG_DISABLED
VS_DVMIRROR_FLAG_SRC_UPLINK_MIRROR = _libvswitch.VS_DVMIRROR_FLAG_SRC_UPLINK_MIRROR
VS_DVMIRROR_WILDCARD_VMM = _libvswitch.VS_DVMIRROR_WILDCARD_VMM
VS_DVMIRROR_WILDCARD_PNIC = _libvswitch.VS_DVMIRROR_WILDCARD_PNIC
VS_DVMIRROR_WILDCARD_COS = _libvswitch.VS_DVMIRROR_WILDCARD_COS
VS_DVMIRROR_WILDCARD_TCPIP = _libvswitch.VS_DVMIRROR_WILDCARD_TCPIP
VS_DVMIRROR_WILDCARD_TEST = _libvswitch.VS_DVMIRROR_WILDCARD_TEST
VS_DVMIRROR_DEFAULT_LEGACY_SESSION_SID = _libvswitch.VS_DVMIRROR_DEFAULT_LEGACY_SESSION_SID
VS_DVMIRROR_DEFAULT_LEGACY_SESSION_DNAME = _libvswitch.VS_DVMIRROR_DEFAULT_LEGACY_SESSION_DNAME
VS_DVMIRROR_SNAPLEN_COMPLETE = _libvswitch.VS_DVMIRROR_SNAPLEN_COMPLETE
VS_NSX_VDS_VERSION_10 = _libvswitch.VS_NSX_VDS_VERSION_10
VS_NSX_VDS_VERSION_20 = _libvswitch.VS_NSX_VDS_VERSION_20
VS_DVMIRROR_SESSIONTYPE_MIXDST = _libvswitch.VS_DVMIRROR_SESSIONTYPE_MIXDST
VS_DVMIRROR_SESSIONTYPE_DVPORT = _libvswitch.VS_DVMIRROR_SESSIONTYPE_DVPORT
VS_DVMIRROR_SESSIONTYPE_RMIRROR_SRC = _libvswitch.VS_DVMIRROR_SESSIONTYPE_RMIRROR_SRC
VS_DVMIRROR_SESSIONTYPE_RMIRROR_DST = _libvswitch.VS_DVMIRROR_SESSIONTYPE_RMIRROR_DST
VS_DVMIRROR_SESSIONTYPE_ERMIRROR_SRC = _libvswitch.VS_DVMIRROR_SESSIONTYPE_ERMIRROR_SRC
MIRROR_ENTTYPE_DVPORT = _libvswitch.MIRROR_ENTTYPE_DVPORT
MIRROR_ENTTYPE_UPLINK = _libvswitch.MIRROR_ENTTYPE_UPLINK
MIRROR_ENTTYPE_VLAN = _libvswitch.MIRROR_ENTTYPE_VLAN
MIRROR_ENTTYPE_IP = _libvswitch.MIRROR_ENTTYPE_IP
MIRROR_ENTTYPE_PORT = _libvswitch.MIRROR_ENTTYPE_PORT
class DVMirrorIP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVMirrorIP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVMirrorIP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["isIPv6"] = _libvswitch.DVMirrorIP_isIPv6_set
    __swig_getmethods__["isIPv6"] = _libvswitch.DVMirrorIP_isIPv6_get
    if _newclass:isIPv6 = _swig_property(_libvswitch.DVMirrorIP_isIPv6_get, _libvswitch.DVMirrorIP_isIPv6_set)
    __swig_setmethods__["pad"] = _libvswitch.DVMirrorIP_pad_set
    __swig_getmethods__["pad"] = _libvswitch.DVMirrorIP_pad_get
    if _newclass:pad = _swig_property(_libvswitch.DVMirrorIP_pad_get, _libvswitch.DVMirrorIP_pad_set)
    __swig_setmethods__["ipv4"] = _libvswitch.DVMirrorIP_ipv4_set
    __swig_getmethods__["ipv4"] = _libvswitch.DVMirrorIP_ipv4_get
    if _newclass:ipv4 = _swig_property(_libvswitch.DVMirrorIP_ipv4_get, _libvswitch.DVMirrorIP_ipv4_set)
    __swig_setmethods__["ipv6"] = _libvswitch.DVMirrorIP_ipv6_set
    __swig_getmethods__["ipv6"] = _libvswitch.DVMirrorIP_ipv6_get
    if _newclass:ipv6 = _swig_property(_libvswitch.DVMirrorIP_ipv6_get, _libvswitch.DVMirrorIP_ipv6_set)
    def __init__(self): 
        this = _libvswitch.new_DVMirrorIP()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_DVMirrorIP
    __del__ = lambda self : None;
DVMirrorIP_swigregister = _libvswitch.DVMirrorIP_swigregister
DVMirrorIP_swigregister(DVMirrorIP)

class DVMirrorEntity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVMirrorEntity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVMirrorEntity, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libvswitch.DVMirrorEntity_type_set
    __swig_getmethods__["type"] = _libvswitch.DVMirrorEntity_type_get
    if _newclass:type = _swig_property(_libvswitch.DVMirrorEntity_type_get, _libvswitch.DVMirrorEntity_type_set)
    __swig_setmethods__["dvPortId"] = _libvswitch.DVMirrorEntity_dvPortId_set
    __swig_getmethods__["dvPortId"] = _libvswitch.DVMirrorEntity_dvPortId_get
    if _newclass:dvPortId = _swig_property(_libvswitch.DVMirrorEntity_dvPortId_get, _libvswitch.DVMirrorEntity_dvPortId_set)
    __swig_setmethods__["uplink"] = _libvswitch.DVMirrorEntity_uplink_set
    __swig_getmethods__["uplink"] = _libvswitch.DVMirrorEntity_uplink_get
    if _newclass:uplink = _swig_property(_libvswitch.DVMirrorEntity_uplink_get, _libvswitch.DVMirrorEntity_uplink_set)
    __swig_setmethods__["vlan"] = _libvswitch.DVMirrorEntity_vlan_set
    __swig_getmethods__["vlan"] = _libvswitch.DVMirrorEntity_vlan_get
    if _newclass:vlan = _swig_property(_libvswitch.DVMirrorEntity_vlan_get, _libvswitch.DVMirrorEntity_vlan_set)
    __swig_setmethods__["ip"] = _libvswitch.DVMirrorEntity_ip_set
    __swig_getmethods__["ip"] = _libvswitch.DVMirrorEntity_ip_get
    if _newclass:ip = _swig_property(_libvswitch.DVMirrorEntity_ip_get, _libvswitch.DVMirrorEntity_ip_set)
    __swig_setmethods__["portId"] = _libvswitch.DVMirrorEntity_portId_set
    __swig_getmethods__["portId"] = _libvswitch.DVMirrorEntity_portId_get
    if _newclass:portId = _swig_property(_libvswitch.DVMirrorEntity_portId_get, _libvswitch.DVMirrorEntity_portId_set)
    def get_entity(self) -> "PyObject *" : return _libvswitch.DVMirrorEntity_get_entity(self)
    def set_entity(self, *args) -> "void" : return _libvswitch.DVMirrorEntity_set_entity(self, *args)
    def next(self) -> "DVMirrorEntity *" : return _libvswitch.DVMirrorEntity_next(self)
    def __init__(self): 
        this = _libvswitch.new_DVMirrorEntity()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_DVMirrorEntity
    __del__ = lambda self : None;
DVMirrorEntity_swigregister = _libvswitch.DVMirrorEntity_swigregister
DVMirrorEntity_swigregister(DVMirrorEntity)

MIRROR_UPLINK_FILTER_NONE = _libvswitch.MIRROR_UPLINK_FILTER_NONE
MIRROR_UPLINK_FILTER_NORMAL = _libvswitch.MIRROR_UPLINK_FILTER_NORMAL
MIRROR_UPLINK_FILTER_STT = _libvswitch.MIRROR_UPLINK_FILTER_STT
MIRROR_UPLINK_FILTER_VXLAN = _libvswitch.MIRROR_UPLINK_FILTER_VXLAN
MIRROR_UPLINK_FILTER_GENEVE = _libvswitch.MIRROR_UPLINK_FILTER_GENEVE
MIRROR_UPLINK_FILTER_ALL_ENCAP = _libvswitch.MIRROR_UPLINK_FILTER_ALL_ENCAP
MIRROR_UPLINK_FILTER_TYPE_MAX = _libvswitch.MIRROR_UPLINK_FILTER_TYPE_MAX

def MIRROR_ASSERT() -> "void" :
  return _libvswitch.MIRROR_ASSERT()
MIRROR_ASSERT = _libvswitch.MIRROR_ASSERT
DVMIRROR_ENCAP_GRE = _libvswitch.DVMIRROR_ENCAP_GRE
DVMIRROR_ENCAP_ERSPAN2 = _libvswitch.DVMIRROR_ENCAP_ERSPAN2
DVMIRROR_ENCAP_ERSPAN3 = _libvswitch.DVMIRROR_ENCAP_ERSPAN3
DVMIRROR_ENCAP_TYPE_MAX = _libvswitch.DVMIRROR_ENCAP_TYPE_MAX

def MIRROR_ENCAP_TYPE() -> "void" :
  return _libvswitch.MIRROR_ENCAP_TYPE()
MIRROR_ENCAP_TYPE = _libvswitch.MIRROR_ENCAP_TYPE
class DVMirrorSession(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVMirrorSession, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVMirrorSession, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sid"] = _libvswitch.DVMirrorSession_sid_set
    __swig_getmethods__["sid"] = _libvswitch.DVMirrorSession_sid_get
    if _newclass:sid = _swig_property(_libvswitch.DVMirrorSession_sid_get, _libvswitch.DVMirrorSession_sid_set)
    __swig_setmethods__["dname"] = _libvswitch.DVMirrorSession_dname_set
    __swig_getmethods__["dname"] = _libvswitch.DVMirrorSession_dname_get
    if _newclass:dname = _swig_property(_libvswitch.DVMirrorSession_dname_get, _libvswitch.DVMirrorSession_dname_set)
    __swig_setmethods__["pad0"] = _libvswitch.DVMirrorSession_pad0_set
    __swig_getmethods__["pad0"] = _libvswitch.DVMirrorSession_pad0_get
    if _newclass:pad0 = _swig_property(_libvswitch.DVMirrorSession_pad0_get, _libvswitch.DVMirrorSession_pad0_set)
    __swig_setmethods__["type"] = _libvswitch.DVMirrorSession_type_set
    __swig_getmethods__["type"] = _libvswitch.DVMirrorSession_type_get
    if _newclass:type = _swig_property(_libvswitch.DVMirrorSession_type_get, _libvswitch.DVMirrorSession_type_set)
    __swig_setmethods__["snapLen"] = _libvswitch.DVMirrorSession_snapLen_set
    __swig_getmethods__["snapLen"] = _libvswitch.DVMirrorSession_snapLen_get
    if _newclass:snapLen = _swig_property(_libvswitch.DVMirrorSession_snapLen_get, _libvswitch.DVMirrorSession_snapLen_set)
    __swig_setmethods__["flags"] = _libvswitch.DVMirrorSession_flags_set
    __swig_getmethods__["flags"] = _libvswitch.DVMirrorSession_flags_get
    if _newclass:flags = _swig_property(_libvswitch.DVMirrorSession_flags_get, _libvswitch.DVMirrorSession_flags_set)
    __swig_setmethods__["encapVlan"] = _libvswitch.DVMirrorSession_encapVlan_set
    __swig_getmethods__["encapVlan"] = _libvswitch.DVMirrorSession_encapVlan_get
    if _newclass:encapVlan = _swig_property(_libvswitch.DVMirrorSession_encapVlan_get, _libvswitch.DVMirrorSession_encapVlan_set)
    __swig_setmethods__["wildIn"] = _libvswitch.DVMirrorSession_wildIn_set
    __swig_getmethods__["wildIn"] = _libvswitch.DVMirrorSession_wildIn_get
    if _newclass:wildIn = _swig_property(_libvswitch.DVMirrorSession_wildIn_get, _libvswitch.DVMirrorSession_wildIn_set)
    __swig_setmethods__["wildOut"] = _libvswitch.DVMirrorSession_wildOut_set
    __swig_getmethods__["wildOut"] = _libvswitch.DVMirrorSession_wildOut_get
    if _newclass:wildOut = _swig_property(_libvswitch.DVMirrorSession_wildOut_get, _libvswitch.DVMirrorSession_wildOut_set)
    __swig_setmethods__["pad1"] = _libvswitch.DVMirrorSession_pad1_set
    __swig_getmethods__["pad1"] = _libvswitch.DVMirrorSession_pad1_get
    if _newclass:pad1 = _swig_property(_libvswitch.DVMirrorSession_pad1_get, _libvswitch.DVMirrorSession_pad1_set)
    __swig_setmethods__["samplingRate"] = _libvswitch.DVMirrorSession_samplingRate_set
    __swig_getmethods__["samplingRate"] = _libvswitch.DVMirrorSession_samplingRate_get
    if _newclass:samplingRate = _swig_property(_libvswitch.DVMirrorSession_samplingRate_get, _libvswitch.DVMirrorSession_samplingRate_set)
    __swig_setmethods__["greKey"] = _libvswitch.DVMirrorSession_greKey_set
    __swig_getmethods__["greKey"] = _libvswitch.DVMirrorSession_greKey_get
    if _newclass:greKey = _swig_property(_libvswitch.DVMirrorSession_greKey_get, _libvswitch.DVMirrorSession_greKey_set)
    __swig_setmethods__["uplinkFilter"] = _libvswitch.DVMirrorSession_uplinkFilter_set
    __swig_getmethods__["uplinkFilter"] = _libvswitch.DVMirrorSession_uplinkFilter_get
    if _newclass:uplinkFilter = _swig_property(_libvswitch.DVMirrorSession_uplinkFilter_get, _libvswitch.DVMirrorSession_uplinkFilter_set)
    __swig_setmethods__["stack"] = _libvswitch.DVMirrorSession_stack_set
    __swig_getmethods__["stack"] = _libvswitch.DVMirrorSession_stack_get
    if _newclass:stack = _swig_property(_libvswitch.DVMirrorSession_stack_get, _libvswitch.DVMirrorSession_stack_set)
    __swig_setmethods__["encapType"] = _libvswitch.DVMirrorSession_encapType_set
    __swig_getmethods__["encapType"] = _libvswitch.DVMirrorSession_encapType_get
    if _newclass:encapType = _swig_property(_libvswitch.DVMirrorSession_encapType_get, _libvswitch.DVMirrorSession_encapType_set)
    __swig_setmethods__["erspanID"] = _libvswitch.DVMirrorSession_erspanID_set
    __swig_getmethods__["erspanID"] = _libvswitch.DVMirrorSession_erspanID_get
    if _newclass:erspanID = _swig_property(_libvswitch.DVMirrorSession_erspanID_get, _libvswitch.DVMirrorSession_erspanID_set)
    __swig_setmethods__["erspanCOS"] = _libvswitch.DVMirrorSession_erspanCOS_set
    __swig_getmethods__["erspanCOS"] = _libvswitch.DVMirrorSession_erspanCOS_get
    if _newclass:erspanCOS = _swig_property(_libvswitch.DVMirrorSession_erspanCOS_get, _libvswitch.DVMirrorSession_erspanCOS_set)
    __swig_setmethods__["erspanGra"] = _libvswitch.DVMirrorSession_erspanGra_set
    __swig_getmethods__["erspanGra"] = _libvswitch.DVMirrorSession_erspanGra_get
    if _newclass:erspanGra = _swig_property(_libvswitch.DVMirrorSession_erspanGra_get, _libvswitch.DVMirrorSession_erspanGra_set)
    __swig_setmethods__["pad2"] = _libvswitch.DVMirrorSession_pad2_set
    __swig_getmethods__["pad2"] = _libvswitch.DVMirrorSession_pad2_get
    if _newclass:pad2 = _swig_property(_libvswitch.DVMirrorSession_pad2_get, _libvswitch.DVMirrorSession_pad2_set)
    __swig_setmethods__["numDstEntities"] = _libvswitch.DVMirrorSession_numDstEntities_set
    __swig_getmethods__["numDstEntities"] = _libvswitch.DVMirrorSession_numDstEntities_get
    if _newclass:numDstEntities = _swig_property(_libvswitch.DVMirrorSession_numDstEntities_get, _libvswitch.DVMirrorSession_numDstEntities_set)
    __swig_setmethods__["numSrcInEntities"] = _libvswitch.DVMirrorSession_numSrcInEntities_set
    __swig_getmethods__["numSrcInEntities"] = _libvswitch.DVMirrorSession_numSrcInEntities_get
    if _newclass:numSrcInEntities = _swig_property(_libvswitch.DVMirrorSession_numSrcInEntities_get, _libvswitch.DVMirrorSession_numSrcInEntities_set)
    __swig_setmethods__["numSrcOutEntities"] = _libvswitch.DVMirrorSession_numSrcOutEntities_set
    __swig_getmethods__["numSrcOutEntities"] = _libvswitch.DVMirrorSession_numSrcOutEntities_get
    if _newclass:numSrcOutEntities = _swig_property(_libvswitch.DVMirrorSession_numSrcOutEntities_get, _libvswitch.DVMirrorSession_numSrcOutEntities_set)
    __swig_setmethods__["startIdx"] = _libvswitch.DVMirrorSession_startIdx_set
    __swig_getmethods__["startIdx"] = _libvswitch.DVMirrorSession_startIdx_get
    if _newclass:startIdx = _swig_property(_libvswitch.DVMirrorSession_startIdx_get, _libvswitch.DVMirrorSession_startIdx_set)
    def __init__(self): 
        this = _libvswitch.new_DVMirrorSession()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_DVMirrorSession
    __del__ = lambda self : None;
DVMirrorSession_swigregister = _libvswitch.DVMirrorSession_swigregister
DVMirrorSession_swigregister(DVMirrorSession)

class DVMirrorSessionTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVMirrorSessionTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVMirrorSessionTable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["magicNum"] = _libvswitch.DVMirrorSessionTable_magicNum_set
    __swig_getmethods__["magicNum"] = _libvswitch.DVMirrorSessionTable_magicNum_get
    if _newclass:magicNum = _swig_property(_libvswitch.DVMirrorSessionTable_magicNum_get, _libvswitch.DVMirrorSessionTable_magicNum_set)
    __swig_setmethods__["version"] = _libvswitch.DVMirrorSessionTable_version_set
    __swig_getmethods__["version"] = _libvswitch.DVMirrorSessionTable_version_get
    if _newclass:version = _swig_property(_libvswitch.DVMirrorSessionTable_version_get, _libvswitch.DVMirrorSessionTable_version_set)
    __swig_setmethods__["numSessions"] = _libvswitch.DVMirrorSessionTable_numSessions_set
    __swig_getmethods__["numSessions"] = _libvswitch.DVMirrorSessionTable_numSessions_get
    if _newclass:numSessions = _swig_property(_libvswitch.DVMirrorSessionTable_numSessions_get, _libvswitch.DVMirrorSessionTable_numSessions_set)
    __swig_setmethods__["numEntities"] = _libvswitch.DVMirrorSessionTable_numEntities_set
    __swig_getmethods__["numEntities"] = _libvswitch.DVMirrorSessionTable_numEntities_get
    if _newclass:numEntities = _swig_property(_libvswitch.DVMirrorSessionTable_numEntities_get, _libvswitch.DVMirrorSessionTable_numEntities_set)
    __swig_setmethods__["pad"] = _libvswitch.DVMirrorSessionTable_pad_set
    __swig_getmethods__["pad"] = _libvswitch.DVMirrorSessionTable_pad_get
    if _newclass:pad = _swig_property(_libvswitch.DVMirrorSessionTable_pad_get, _libvswitch.DVMirrorSessionTable_pad_set)
    __swig_setmethods__["sessions"] = _libvswitch.DVMirrorSessionTable_sessions_set
    __swig_getmethods__["sessions"] = _libvswitch.DVMirrorSessionTable_sessions_get
    if _newclass:sessions = _swig_property(_libvswitch.DVMirrorSessionTable_sessions_get, _libvswitch.DVMirrorSessionTable_sessions_set)
    def get_first_session_entity(self, *args) -> "DVMirrorEntity *" : return _libvswitch.DVMirrorSessionTable_get_first_session_entity(self, *args)
    def get_first_session(self) -> "DVMirrorSession *" : return _libvswitch.DVMirrorSessionTable_get_first_session(self)
    def __getitem__(self, *args) -> "DVMirrorSession const *" : return _libvswitch.DVMirrorSessionTable___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _libvswitch.DVMirrorSessionTable___setitem__(self, *args)
    def __init__(self): 
        this = _libvswitch.new_DVMirrorSessionTable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_DVMirrorSessionTable
    __del__ = lambda self : None;
DVMirrorSessionTable_swigregister = _libvswitch.DVMirrorSessionTable_swigregister
DVMirrorSessionTable_swigregister(DVMirrorSessionTable)

VSPORT_PVLAN_TYPE_PROMISC = _libvswitch.VSPORT_PVLAN_TYPE_PROMISC
VSPORT_PVLAN_TYPE_ISOLATED = _libvswitch.VSPORT_PVLAN_TYPE_ISOLATED
VSPORT_PVLAN_TYPE_COMMUNITY = _libvswitch.VSPORT_PVLAN_TYPE_COMMUNITY
class VSPvlanMapEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSPvlanMapEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSPvlanMapEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["primaryVID"] = _libvswitch.VSPvlanMapEntry_primaryVID_set
    __swig_getmethods__["primaryVID"] = _libvswitch.VSPvlanMapEntry_primaryVID_get
    if _newclass:primaryVID = _swig_property(_libvswitch.VSPvlanMapEntry_primaryVID_get, _libvswitch.VSPvlanMapEntry_primaryVID_set)
    __swig_setmethods__["secondaryVID"] = _libvswitch.VSPvlanMapEntry_secondaryVID_set
    __swig_getmethods__["secondaryVID"] = _libvswitch.VSPvlanMapEntry_secondaryVID_get
    if _newclass:secondaryVID = _swig_property(_libvswitch.VSPvlanMapEntry_secondaryVID_get, _libvswitch.VSPvlanMapEntry_secondaryVID_set)
    __swig_setmethods__["pvlanType"] = _libvswitch.VSPvlanMapEntry_pvlanType_set
    __swig_getmethods__["pvlanType"] = _libvswitch.VSPvlanMapEntry_pvlanType_get
    if _newclass:pvlanType = _swig_property(_libvswitch.VSPvlanMapEntry_pvlanType_get, _libvswitch.VSPvlanMapEntry_pvlanType_set)
    __swig_setmethods__["pad"] = _libvswitch.VSPvlanMapEntry_pad_set
    __swig_getmethods__["pad"] = _libvswitch.VSPvlanMapEntry_pad_get
    if _newclass:pad = _swig_property(_libvswitch.VSPvlanMapEntry_pad_get, _libvswitch.VSPvlanMapEntry_pad_set)
    def __getitem__(self, *args) -> "VSPvlanMapEntry const" : return _libvswitch.VSPvlanMapEntry___getitem__(self, *args)
    def __init__(self): 
        this = _libvswitch.new_VSPvlanMapEntry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSPvlanMapEntry
    __del__ = lambda self : None;
VSPvlanMapEntry_swigregister = _libvswitch.VSPvlanMapEntry_swigregister
VSPvlanMapEntry_swigregister(VSPvlanMapEntry)

VS_MAC_LEARNING_AGING_TIME_DEFAULT = _libvswitch.VS_MAC_LEARNING_AGING_TIME_DEFAULT
VS_MAC_LEARNING_AGING_TIME_MAX = _libvswitch.VS_MAC_LEARNING_AGING_TIME_MAX
TEAM_MAC_LEARNING_LIMIT_ENTRIES_DEFAULT = _libvswitch.TEAM_MAC_LEARNING_LIMIT_ENTRIES_DEFAULT
VS_MAC_LEARNING_LIMIT_ENTRIES_DEFAULT = _libvswitch.VS_MAC_LEARNING_LIMIT_ENTRIES_DEFAULT
class VSMACLearning(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSMACLearning, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSMACLearning, name)
    __repr__ = _swig_repr
    __swig_setmethods__["agingTime"] = _libvswitch.VSMACLearning_agingTime_set
    __swig_getmethods__["agingTime"] = _libvswitch.VSMACLearning_agingTime_get
    if _newclass:agingTime = _swig_property(_libvswitch.VSMACLearning_agingTime_get, _libvswitch.VSMACLearning_agingTime_set)
    __swig_setmethods__["macLimit"] = _libvswitch.VSMACLearning_macLimit_set
    __swig_getmethods__["macLimit"] = _libvswitch.VSMACLearning_macLimit_get
    if _newclass:macLimit = _swig_property(_libvswitch.VSMACLearning_macLimit_get, _libvswitch.VSMACLearning_macLimit_set)
    def __init__(self): 
        this = _libvswitch.new_VSMACLearning()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSMACLearning
    __del__ = lambda self : None;
VSMACLearning_swigregister = _libvswitch.VSMACLearning_swigregister
VSMACLearning_swigregister(VSMACLearning)

VSPORT_VLAN_GUEST_TAGGING = _libvswitch.VSPORT_VLAN_GUEST_TAGGING
VSPORT_VLAN_PVLAN_ENABLED = _libvswitch.VSPORT_VLAN_PVLAN_ENABLED
VSPORT_VLAN_SET_PRIORITY = _libvswitch.VSPORT_VLAN_SET_PRIORITY
class VSPortVlanPolicy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSPortVlanPolicy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSPortVlanPolicy, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flags"] = _libvswitch.VSPortVlanPolicy_flags_set
    __swig_getmethods__["flags"] = _libvswitch.VSPortVlanPolicy_flags_get
    if _newclass:flags = _swig_property(_libvswitch.VSPortVlanPolicy_flags_get, _libvswitch.VSPortVlanPolicy_flags_set)
    __swig_setmethods__["vlanID"] = _libvswitch.VSPortVlanPolicy_vlanID_set
    __swig_getmethods__["vlanID"] = _libvswitch.VSPortVlanPolicy_vlanID_get
    if _newclass:vlanID = _swig_property(_libvswitch.VSPortVlanPolicy_vlanID_get, _libvswitch.VSPortVlanPolicy_vlanID_set)
    __swig_setmethods__["pad"] = _libvswitch.VSPortVlanPolicy_pad_set
    __swig_getmethods__["pad"] = _libvswitch.VSPortVlanPolicy_pad_get
    if _newclass:pad = _swig_property(_libvswitch.VSPortVlanPolicy_pad_get, _libvswitch.VSPortVlanPolicy_pad_set)
    __swig_setmethods__["numRanges"] = _libvswitch.VSPortVlanPolicy_numRanges_set
    __swig_getmethods__["numRanges"] = _libvswitch.VSPortVlanPolicy_numRanges_get
    if _newclass:numRanges = _swig_property(_libvswitch.VSPortVlanPolicy_numRanges_get, _libvswitch.VSPortVlanPolicy_numRanges_set)
    __swig_setmethods__["vidRanges"] = _libvswitch.VSPortVlanPolicy_vidRanges_set
    __swig_getmethods__["vidRanges"] = _libvswitch.VSPortVlanPolicy_vidRanges_get
    if _newclass:vidRanges = _swig_property(_libvswitch.VSPortVlanPolicy_vidRanges_get, _libvswitch.VSPortVlanPolicy_vidRanges_set)
    def get_vid_range(self, *args) -> "vmk_VDSPortVIDRange" : return _libvswitch.VSPortVlanPolicy_get_vid_range(self, *args)
    def __init__(self): 
        this = _libvswitch.new_VSPortVlanPolicy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSPortVlanPolicy
    __del__ = lambda self : None;
VSPortVlanPolicy_swigregister = _libvswitch.VSPortVlanPolicy_swigregister
VSPortVlanPolicy_swigregister(VSPortVlanPolicy)

class VSPropSecurity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSPropSecurity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSPropSecurity, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flags"] = _libvswitch.VSPropSecurity_flags_set
    __swig_getmethods__["flags"] = _libvswitch.VSPropSecurity_flags_get
    if _newclass:flags = _swig_property(_libvswitch.VSPropSecurity_flags_get, _libvswitch.VSPropSecurity_flags_set)
    def __init__(self): 
        this = _libvswitch.new_VSPropSecurity()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSPropSecurity
    __del__ = lambda self : None;
VSPropSecurity_swigregister = _libvswitch.VSPropSecurity_swigregister
VSPropSecurity_swigregister(VSPropSecurity)

VSPORT_SECURITY_DISALLOW_PROMISC = _libvswitch.VSPORT_SECURITY_DISALLOW_PROMISC
VSPORT_SECURITY_DISALLOW_MAC_CHANGE = _libvswitch.VSPORT_SECURITY_DISALLOW_MAC_CHANGE
VSPORT_SECURITY_DISALLOW_FORGED_SRC = _libvswitch.VSPORT_SECURITY_DISALLOW_FORGED_SRC
VSWITCH_ETH_MAX_EXACT_MULTICAST_ADDRS = _libvswitch.VSWITCH_ETH_MAX_EXACT_MULTICAST_ADDRS
VMK_ETH_FILTER_UNICAST = _libvswitch.VMK_ETH_FILTER_UNICAST
VMK_ETH_FILTER_MULTICAST = _libvswitch.VMK_ETH_FILTER_MULTICAST
VMK_ETH_FILTER_ALLMULTI = _libvswitch.VMK_ETH_FILTER_ALLMULTI
VMK_ETH_FILTER_BROADCAST = _libvswitch.VMK_ETH_FILTER_BROADCAST
VMK_ETH_FILTER_PROMISC = _libvswitch.VMK_ETH_FILTER_PROMISC
VMK_ETH_FILTER_USE_LADRF = _libvswitch.VMK_ETH_FILTER_USE_LADRF
VMK_ETH_FILTER_SINK = _libvswitch.VMK_ETH_FILTER_SINK
class VSExtraEthFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSExtraEthFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSExtraEthFilter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flags"] = _libvswitch.VSExtraEthFilter_flags_set
    __swig_getmethods__["flags"] = _libvswitch.VSExtraEthFilter_flags_get
    if _newclass:flags = _swig_property(_libvswitch.VSExtraEthFilter_flags_get, _libvswitch.VSExtraEthFilter_flags_set)
    __swig_setmethods__["numMulticastAddrs"] = _libvswitch.VSExtraEthFilter_numMulticastAddrs_set
    __swig_getmethods__["numMulticastAddrs"] = _libvswitch.VSExtraEthFilter_numMulticastAddrs_get
    if _newclass:numMulticastAddrs = _swig_property(_libvswitch.VSExtraEthFilter_numMulticastAddrs_get, _libvswitch.VSExtraEthFilter_numMulticastAddrs_set)
    __swig_setmethods__["multicastAddrs"] = _libvswitch.VSExtraEthFilter_multicastAddrs_set
    __swig_getmethods__["multicastAddrs"] = _libvswitch.VSExtraEthFilter_multicastAddrs_get
    if _newclass:multicastAddrs = _swig_property(_libvswitch.VSExtraEthFilter_multicastAddrs_get, _libvswitch.VSExtraEthFilter_multicastAddrs_set)
    __swig_setmethods__["pad"] = _libvswitch.VSExtraEthFilter_pad_set
    __swig_getmethods__["pad"] = _libvswitch.VSExtraEthFilter_pad_get
    if _newclass:pad = _swig_property(_libvswitch.VSExtraEthFilter_pad_get, _libvswitch.VSExtraEthFilter_pad_set)
    def __init__(self): 
        this = _libvswitch.new_VSExtraEthFilter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSExtraEthFilter
    __del__ = lambda self : None;
VSExtraEthFilter_swigregister = _libvswitch.VSExtraEthFilter_swigregister
VSExtraEthFilter_swigregister(VSExtraEthFilter)

VMK_TEAM_MAX_UPLINKS = _libvswitch.VMK_TEAM_MAX_UPLINKS
TEAM_FRP_TYPE_NONE = _libvswitch.TEAM_FRP_TYPE_NONE
TEAM_FRP_TYPE_LB_IP = _libvswitch.TEAM_FRP_TYPE_LB_IP
TEAM_FRP_TYPE_LB_SRCMAC = _libvswitch.TEAM_FRP_TYPE_LB_SRCMAC
TEAM_FRP_TYPE_LB_SRCID = _libvswitch.TEAM_FRP_TYPE_LB_SRCID
TEAM_FRP_TYPE_FO_EXPLICIT = _libvswitch.TEAM_FRP_TYPE_FO_EXPLICIT
TEAM_FRP_TYPE_LB_LBT = _libvswitch.TEAM_FRP_TYPE_LB_LBT
TEAM_FRP_CRIT_LINK_SPEED = _libvswitch.TEAM_FRP_CRIT_LINK_SPEED
TEAM_FRP_CRIT_LINK_SPEED_GTE = _libvswitch.TEAM_FRP_CRIT_LINK_SPEED_GTE
TEAM_FRP_CRIT_LINK_DUPLEX = _libvswitch.TEAM_FRP_CRIT_LINK_DUPLEX
TEAM_FRP_CRIT_LACP_PORT_DOWN = _libvswitch.TEAM_FRP_CRIT_LACP_PORT_DOWN
TEAM_FRP_CRIT_BEACON_STATE = _libvswitch.TEAM_FRP_CRIT_BEACON_STATE
TEAM_FRP_CRIT_LINK_ERR = _libvswitch.TEAM_FRP_CRIT_LINK_ERR
TEAM_FRP_CRIT_LINK_STATE = _libvswitch.TEAM_FRP_CRIT_LINK_STATE
TEAM_FRP_CRIT_PORT_BLOCKED = _libvswitch.TEAM_FRP_CRIT_PORT_BLOCKED
TEAM_FRP_CRIT_DRV_PRESENT = _libvswitch.TEAM_FRP_CRIT_DRV_PRESENT
class VSUplinkPorts(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSUplinkPorts, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSUplinkPorts, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nUplinkPorts"] = _libvswitch.VSUplinkPorts_nUplinkPorts_set
    __swig_getmethods__["nUplinkPorts"] = _libvswitch.VSUplinkPorts_nUplinkPorts_get
    if _newclass:nUplinkPorts = _swig_property(_libvswitch.VSUplinkPorts_nUplinkPorts_get, _libvswitch.VSUplinkPorts_nUplinkPorts_set)
    __swig_setmethods__["uplinkPortName"] = _libvswitch.VSUplinkPorts_uplinkPortName_set
    __swig_getmethods__["uplinkPortName"] = _libvswitch.VSUplinkPorts_uplinkPortName_get
    if _newclass:uplinkPortName = _swig_property(_libvswitch.VSUplinkPorts_uplinkPortName_get, _libvswitch.VSUplinkPorts_uplinkPortName_set)
    def __init__(self, *args): 
        this = _libvswitch.new_VSUplinkPorts(*args)
        try: self.this.append(this)
        except: self.this = this
    def __len__(self) -> "int" : return _libvswitch.VSUplinkPorts___len__(self)
    def __getitem__(self, *args) -> "char const *" : return _libvswitch.VSUplinkPorts___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _libvswitch.VSUplinkPorts___setitem__(self, *args)
    __swig_destroy__ = _libvswitch.delete_VSUplinkPorts
    __del__ = lambda self : None;
VSUplinkPorts_swigregister = _libvswitch.VSUplinkPorts_swigregister
VSUplinkPorts_swigregister(VSUplinkPorts)

class VSUplinkPortIds(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSUplinkPortIds, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSUplinkPortIds, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nUplinkPorts"] = _libvswitch.VSUplinkPortIds_nUplinkPorts_set
    __swig_getmethods__["nUplinkPorts"] = _libvswitch.VSUplinkPortIds_nUplinkPorts_get
    if _newclass:nUplinkPorts = _swig_property(_libvswitch.VSUplinkPortIds_nUplinkPorts_get, _libvswitch.VSUplinkPortIds_nUplinkPorts_set)
    __swig_setmethods__["uplinkPortId"] = _libvswitch.VSUplinkPortIds_uplinkPortId_set
    __swig_getmethods__["uplinkPortId"] = _libvswitch.VSUplinkPortIds_uplinkPortId_get
    if _newclass:uplinkPortId = _swig_property(_libvswitch.VSUplinkPortIds_uplinkPortId_get, _libvswitch.VSUplinkPortIds_uplinkPortId_set)
    def __init__(self, *args): 
        this = _libvswitch.new_VSUplinkPortIds(*args)
        try: self.this.append(this)
        except: self.this = this
    def __len__(self) -> "int" : return _libvswitch.VSUplinkPortIds___len__(self)
    def __getitem__(self, *args) -> "char const *" : return _libvswitch.VSUplinkPortIds___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _libvswitch.VSUplinkPortIds___setitem__(self, *args)
    __swig_destroy__ = _libvswitch.delete_VSUplinkPortIds
    __del__ = lambda self : None;
VSUplinkPortIds_swigregister = _libvswitch.VSUplinkPortIds_swigregister
VSUplinkPortIds_swigregister(VSUplinkPortIds)

TEAM_FRP_FLAG_ALL_AVAILABLE = _libvswitch.TEAM_FRP_FLAG_ALL_AVAILABLE
TEAM_FRP_FLAG_REVERSE = _libvswitch.TEAM_FRP_FLAG_REVERSE
TEAM_FRP_FLAG_BEST_EFFORT = _libvswitch.TEAM_FRP_FLAG_BEST_EFFORT
TEAM_FRP_FLAG_ROLLING = _libvswitch.TEAM_FRP_FLAG_ROLLING
TEAM_FRP_FLAG_SHOTGUN = _libvswitch.TEAM_FRP_FLAG_SHOTGUN
TEAM_FRP_FLAG_NOTIFY_SWITCH = _libvswitch.TEAM_FRP_FLAG_NOTIFY_SWITCH
TEAM_FRP_FLAG_BLOCK_OUTPUT = _libvswitch.TEAM_FRP_FLAG_BLOCK_OUTPUT
TEAM_FRP_FLAG_LACP_CLIENT = _libvswitch.TEAM_FRP_FLAG_LACP_CLIENT
TEAM_FRP_FLAG_LST = _libvswitch.TEAM_FRP_FLAG_LST
class VSTeamPolicy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSTeamPolicy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSTeamPolicy, name)
    __repr__ = _swig_repr
    __swig_setmethods__["loadBalance"] = _libvswitch.VSTeamPolicy_loadBalance_set
    __swig_getmethods__["loadBalance"] = _libvswitch.VSTeamPolicy_loadBalance_get
    if _newclass:loadBalance = _swig_property(_libvswitch.VSTeamPolicy_loadBalance_get, _libvswitch.VSTeamPolicy_loadBalance_set)
    __swig_setmethods__["linkCriteria"] = _libvswitch.VSTeamPolicy_linkCriteria_set
    __swig_getmethods__["linkCriteria"] = _libvswitch.VSTeamPolicy_linkCriteria_get
    if _newclass:linkCriteria = _swig_property(_libvswitch.VSTeamPolicy_linkCriteria_get, _libvswitch.VSTeamPolicy_linkCriteria_set)
    __swig_setmethods__["percentError"] = _libvswitch.VSTeamPolicy_percentError_set
    __swig_getmethods__["percentError"] = _libvswitch.VSTeamPolicy_percentError_get
    if _newclass:percentError = _swig_property(_libvswitch.VSTeamPolicy_percentError_get, _libvswitch.VSTeamPolicy_percentError_set)
    __swig_setmethods__["fullDuplex"] = _libvswitch.VSTeamPolicy_fullDuplex_set
    __swig_getmethods__["fullDuplex"] = _libvswitch.VSTeamPolicy_fullDuplex_get
    if _newclass:fullDuplex = _swig_property(_libvswitch.VSTeamPolicy_fullDuplex_get, _libvswitch.VSTeamPolicy_fullDuplex_set)
    __swig_setmethods__["speed"] = _libvswitch.VSTeamPolicy_speed_set
    __swig_getmethods__["speed"] = _libvswitch.VSTeamPolicy_speed_get
    if _newclass:speed = _swig_property(_libvswitch.VSTeamPolicy_speed_get, _libvswitch.VSTeamPolicy_speed_set)
    __swig_setmethods__["flags"] = _libvswitch.VSTeamPolicy_flags_set
    __swig_getmethods__["flags"] = _libvswitch.VSTeamPolicy_flags_get
    if _newclass:flags = _swig_property(_libvswitch.VSTeamPolicy_flags_get, _libvswitch.VSTeamPolicy_flags_set)
    __swig_setmethods__["numActive"] = _libvswitch.VSTeamPolicy_numActive_set
    __swig_getmethods__["numActive"] = _libvswitch.VSTeamPolicy_numActive_get
    if _newclass:numActive = _swig_property(_libvswitch.VSTeamPolicy_numActive_get, _libvswitch.VSTeamPolicy_numActive_set)
    __swig_setmethods__["numStandby"] = _libvswitch.VSTeamPolicy_numStandby_set
    __swig_getmethods__["numStandby"] = _libvswitch.VSTeamPolicy_numStandby_get
    if _newclass:numStandby = _swig_property(_libvswitch.VSTeamPolicy_numStandby_get, _libvswitch.VSTeamPolicy_numStandby_set)
    __swig_setmethods__["uplinkPortName"] = _libvswitch.VSTeamPolicy_uplinkPortName_set
    __swig_getmethods__["uplinkPortName"] = _libvswitch.VSTeamPolicy_uplinkPortName_get
    if _newclass:uplinkPortName = _swig_property(_libvswitch.VSTeamPolicy_uplinkPortName_get, _libvswitch.VSTeamPolicy_uplinkPortName_set)
    def __getitem__(self, *args) -> "char const *" : return _libvswitch.VSTeamPolicy___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _libvswitch.VSTeamPolicy___setitem__(self, *args)
    def __init__(self): 
        this = _libvswitch.new_VSTeamPolicy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSTeamPolicy
    __del__ = lambda self : None;
VSTeamPolicy_swigregister = _libvswitch.VSTeamPolicy_swigregister
VSTeamPolicy_swigregister(VSTeamPolicy)

VSPORT_MAC_LEARNING_LIMIT_ENTRIES_DEFAULT = _libvswitch.VSPORT_MAC_LEARNING_LIMIT_ENTRIES_DEFAULT
VSPORT_MAC_LEARNING_LIMIT_ENTRIES_MAX = _libvswitch.VSPORT_MAC_LEARNING_LIMIT_ENTRIES_MAX
VSPORT_MAC_LEARNING_LIMIT_POLICY_ALLOW = _libvswitch.VSPORT_MAC_LEARNING_LIMIT_POLICY_ALLOW
VSPORT_MAC_LEARNING_LIMIT_POLICY_DROP = _libvswitch.VSPORT_MAC_LEARNING_LIMIT_POLICY_DROP
class VSPMACLearning(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSPMACLearning, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSPMACLearning, name)
    __repr__ = _swig_repr
    __swig_setmethods__["learning"] = _libvswitch.VSPMACLearning_learning_set
    __swig_getmethods__["learning"] = _libvswitch.VSPMACLearning_learning_get
    if _newclass:learning = _swig_property(_libvswitch.VSPMACLearning_learning_get, _libvswitch.VSPMACLearning_learning_set)
    __swig_setmethods__["flooding"] = _libvswitch.VSPMACLearning_flooding_set
    __swig_getmethods__["flooding"] = _libvswitch.VSPMACLearning_flooding_get
    if _newclass:flooding = _swig_property(_libvswitch.VSPMACLearning_flooding_get, _libvswitch.VSPMACLearning_flooding_set)
    __swig_setmethods__["macLimit"] = _libvswitch.VSPMACLearning_macLimit_set
    __swig_getmethods__["macLimit"] = _libvswitch.VSPMACLearning_macLimit_get
    if _newclass:macLimit = _swig_property(_libvswitch.VSPMACLearning_macLimit_get, _libvswitch.VSPMACLearning_macLimit_set)
    __swig_setmethods__["macLimitPolicy"] = _libvswitch.VSPMACLearning_macLimitPolicy_set
    __swig_getmethods__["macLimitPolicy"] = _libvswitch.VSPMACLearning_macLimitPolicy_get
    if _newclass:macLimitPolicy = _swig_property(_libvswitch.VSPMACLearning_macLimitPolicy_get, _libvswitch.VSPMACLearning_macLimitPolicy_set)
    def __init__(self): 
        this = _libvswitch.new_VSPMACLearning()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSPMACLearning
    __del__ = lambda self : None;
VSPMACLearning_swigregister = _libvswitch.VSPMACLearning_swigregister
VSPMACLearning_swigregister(VSPMACLearning)

class VSPMACManagement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSPMACManagement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSPMACManagement, name)
    __repr__ = _swig_repr
    __swig_setmethods__["macChangeAllowed"] = _libvswitch.VSPMACManagement_macChangeAllowed_set
    __swig_getmethods__["macChangeAllowed"] = _libvswitch.VSPMACManagement_macChangeAllowed_get
    if _newclass:macChangeAllowed = _swig_property(_libvswitch.VSPMACManagement_macChangeAllowed_get, _libvswitch.VSPMACManagement_macChangeAllowed_set)
    __swig_setmethods__["portMACLearning"] = _libvswitch.VSPMACManagement_portMACLearning_set
    __swig_getmethods__["portMACLearning"] = _libvswitch.VSPMACManagement_portMACLearning_get
    if _newclass:portMACLearning = _swig_property(_libvswitch.VSPMACManagement_portMACLearning_get, _libvswitch.VSPMACManagement_portMACLearning_set)
    def __init__(self): 
        this = _libvswitch.new_VSPMACManagement()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvswitch.delete_VSPMACManagement
    __del__ = lambda self : None;
VSPMACManagement_swigregister = _libvswitch.VSPMACManagement_swigregister
VSPMACManagement_swigregister(VSPMACManagement)


def VSVMK_GetRARPStats(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSVMK_GetRARPStats(*args)
VSVMK_GetRARPStats = _libvswitch.VSVMK_GetRARPStats

def VSVMK_GetServicePortTeamingStats(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSVMK_GetServicePortTeamingStats(*args)
VSVMK_GetServicePortTeamingStats = _libvswitch.VSVMK_GetServicePortTeamingStats

def VSVMK_GetRuntimeOptions(*args) -> "VSRuntimeOptions **" :
  return _libvswitch.VSVMK_GetRuntimeOptions(*args)
VSVMK_GetRuntimeOptions = _libvswitch.VSVMK_GetRuntimeOptions

def VSVMK_SetRuntimeOptions(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSVMK_SetRuntimeOptions(*args)
VSVMK_SetRuntimeOptions = _libvswitch.VSVMK_SetRuntimeOptions

def VSVMK_GetPromiscSessionActiveDsts(*args) -> "VSPromiscSessionActiveDsts **" :
  return _libvswitch.VSVMK_GetPromiscSessionActiveDsts(*args)
VSVMK_GetPromiscSessionActiveDsts = _libvswitch.VSVMK_GetPromiscSessionActiveDsts

def VSVMK_GetDVMirrorSessionIDs(*args) -> "VSDVMirrorSessionIDs **" :
  return _libvswitch.VSVMK_GetDVMirrorSessionIDs(*args)
VSVMK_GetDVMirrorSessionIDs = _libvswitch.VSVMK_GetDVMirrorSessionIDs

def VSVMK_GetDVMirrorSessionStats(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSVMK_GetDVMirrorSessionStats(*args)
VSVMK_GetDVMirrorSessionStats = _libvswitch.VSVMK_GetDVMirrorSessionStats

def VSVMK_GetMcastFilterMode(*args) -> "VSMcastFilterMode *" :
  return _libvswitch.VSVMK_GetMcastFilterMode(*args)
VSVMK_GetMcastFilterMode = _libvswitch.VSVMK_GetMcastFilterMode

def VSVMK_GetMcastFilters(*args) -> "VSMcastFilters **" :
  return _libvswitch.VSVMK_GetMcastFilters(*args)
VSVMK_GetMcastFilters = _libvswitch.VSVMK_GetMcastFilters

def VSVMK_GetMcastFilterStats(*args) -> "VSMcastFilterStats **" :
  return _libvswitch.VSVMK_GetMcastFilterStats(*args)
VSVMK_GetMcastFilterStats = _libvswitch.VSVMK_GetMcastFilterStats

def VSVMK_GetUplinks(*args) -> "VSUplinks **" :
  return _libvswitch.VSVMK_GetUplinks(*args)
VSVMK_GetUplinks = _libvswitch.VSVMK_GetUplinks

def VSVMK_GetUplinkLinkState(*args) -> "vmk_LinkState *" :
  return _libvswitch.VSVMK_GetUplinkLinkState(*args)
VSVMK_GetUplinkLinkState = _libvswitch.VSVMK_GetUplinkLinkState

def VSVMK_GetUplinkLACPLinkState(*args) -> "vmk_LinkState *" :
  return _libvswitch.VSVMK_GetUplinkLACPLinkState(*args)
VSVMK_GetUplinkLACPLinkState = _libvswitch.VSVMK_GetUplinkLACPLinkState

def VSVMK_SetUplinkAdminLinkState(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSVMK_SetUplinkAdminLinkState(*args)
VSVMK_SetUplinkAdminLinkState = _libvswitch.VSVMK_SetUplinkAdminLinkState

def VSVMK_GetLAGTable(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSVMK_GetLAGTable(*args)
VSVMK_GetLAGTable = _libvswitch.VSVMK_GetLAGTable

def VSVMK_GetPortMACTable(*args) -> "VSMACTable **" :
  return _libvswitch.VSVMK_GetPortMACTable(*args)
VSVMK_GetPortMACTable = _libvswitch.VSVMK_GetPortMACTable

def VSVMK_SetPortMACTable(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSVMK_SetPortMACTable(*args)
VSVMK_SetPortMACTable = _libvswitch.VSVMK_SetPortMACTable

def VSVMK_ClearPortMACTable(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSVMK_ClearPortMACTable(*args)
VSVMK_ClearPortMACTable = _libvswitch.VSVMK_ClearPortMACTable

def VSVMK_GetTeamMACTable(*args) -> "VSMACTable **" :
  return _libvswitch.VSVMK_GetTeamMACTable(*args)
VSVMK_GetTeamMACTable = _libvswitch.VSVMK_GetTeamMACTable

def VSVMK_GetPortMACLearningStats(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSVMK_GetPortMACLearningStats(*args)
VSVMK_GetPortMACLearningStats = _libvswitch.VSVMK_GetPortMACLearningStats

def VSVMK_GetGlobalMACLearningProps(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSVMK_GetGlobalMACLearningProps(*args)
VSVMK_GetGlobalMACLearningProps = _libvswitch.VSVMK_GetGlobalMACLearningProps

def VSVMK_SetGlobalMACLearningProps(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSVMK_SetGlobalMACLearningProps(*args)
VSVMK_SetGlobalMACLearningProps = _libvswitch.VSVMK_SetGlobalMACLearningProps

def VSVMK_PortGetTeamUplinkHint(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSVMK_PortGetTeamUplinkHint(*args)
VSVMK_PortGetTeamUplinkHint = _libvswitch.VSVMK_PortGetTeamUplinkHint

def VSVMK_GetVSInfo(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSVMK_GetVSInfo(*args)
VSVMK_GetVSInfo = _libvswitch.VSVMK_GetVSInfo

def VSVMK_FreeMemory(*args) -> "void" :
  return _libvswitch.VSVMK_FreeMemory(*args)
VSVMK_FreeMemory = _libvswitch.VSVMK_FreeMemory

def VSDVS_GetTeamingPolicyFromDVSID(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_GetTeamingPolicyFromDVSID(*args)
VSDVS_GetTeamingPolicyFromDVSID = _libvswitch.VSDVS_GetTeamingPolicyFromDVSID

def VSDVS_DvPortIDToPortIDFromDVSID(*args) -> "vmk_SwitchPortID *" :
  return _libvswitch.VSDVS_DvPortIDToPortIDFromDVSID(*args)
VSDVS_DvPortIDToPortIDFromDVSID = _libvswitch.VSDVS_DvPortIDToPortIDFromDVSID

def VSDVS_GetMcastFilterMode(*args) -> "VSMcastFilterMode *" :
  return _libvswitch.VSDVS_GetMcastFilterMode(*args)
VSDVS_GetMcastFilterMode = _libvswitch.VSDVS_GetMcastFilterMode

def VSDVS_SetMcastFilterMode(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_SetMcastFilterMode(*args)
VSDVS_SetMcastFilterMode = _libvswitch.VSDVS_SetMcastFilterMode

def VSDVS_GetDVMirrorSessions(*args) -> "DVMirrorSessionTable **" :
  return _libvswitch.VSDVS_GetDVMirrorSessions(*args)
VSDVS_GetDVMirrorSessions = _libvswitch.VSDVS_GetDVMirrorSessions

def VSDVS_AppendDVMirrorSessions(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_AppendDVMirrorSessions(*args)
VSDVS_AppendDVMirrorSessions = _libvswitch.VSDVS_AppendDVMirrorSessions

def VSDVS_RemoveDVMirrorSession(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_RemoveDVMirrorSession(*args)
VSDVS_RemoveDVMirrorSession = _libvswitch.VSDVS_RemoveDVMirrorSession

def VSDVS_ClearDVMirrorSessions(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_ClearDVMirrorSessions(*args)
VSDVS_ClearDVMirrorSessions = _libvswitch.VSDVS_ClearDVMirrorSessions

def VSDVS_SetPrivateVLANMap(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_SetPrivateVLANMap(*args)
VSDVS_SetPrivateVLANMap = _libvswitch.VSDVS_SetPrivateVLANMap

def VSDVS_GetPortVLANPolicy(*args) -> "VSPortVlanPolicy **, vmk_uint32 *" :
  return _libvswitch.VSDVS_GetPortVLANPolicy(*args)
VSDVS_GetPortVLANPolicy = _libvswitch.VSDVS_GetPortVLANPolicy

def VSDVS_SetPortVLANPolicy(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_SetPortVLANPolicy(*args)
VSDVS_SetPortVLANPolicy = _libvswitch.VSDVS_SetPortVLANPolicy

def VSDVS_ClearPortVLANPolicy(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_ClearPortVLANPolicy(*args)
VSDVS_ClearPortVLANPolicy = _libvswitch.VSDVS_ClearPortVLANPolicy

def VSDVS_GetPortNestedVLANTagging(*args) -> "vmk_Bool *" :
  return _libvswitch.VSDVS_GetPortNestedVLANTagging(*args)
VSDVS_GetPortNestedVLANTagging = _libvswitch.VSDVS_GetPortNestedVLANTagging

def VSDVS_SetPortNestedVLANTagging(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_SetPortNestedVLANTagging(*args)
VSDVS_SetPortNestedVLANTagging = _libvswitch.VSDVS_SetPortNestedVLANTagging

def VSDVS_GetPortSecurity(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_GetPortSecurity(*args)
VSDVS_GetPortSecurity = _libvswitch.VSDVS_GetPortSecurity

def VSDVS_SetPortSecurity(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_SetPortSecurity(*args)
VSDVS_SetPortSecurity = _libvswitch.VSDVS_SetPortSecurity

def VSDVS_GetExtraEthFilter(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_GetExtraEthFilter(*args)
VSDVS_GetExtraEthFilter = _libvswitch.VSDVS_GetExtraEthFilter

def VSDVS_SetExtraEthFilter(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_SetExtraEthFilter(*args)
VSDVS_SetExtraEthFilter = _libvswitch.VSDVS_SetExtraEthFilter

def VSDVS_ClearExtraEthFilter(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_ClearExtraEthFilter(*args)
VSDVS_ClearExtraEthFilter = _libvswitch.VSDVS_ClearExtraEthFilter

def VSDVS_IsSinkPortEnabled(*args) -> "vmk_Bool *" :
  return _libvswitch.VSDVS_IsSinkPortEnabled(*args)
VSDVS_IsSinkPortEnabled = _libvswitch.VSDVS_IsSinkPortEnabled

def VSDVS_ConfigureSinkPort(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_ConfigureSinkPort(*args)
VSDVS_ConfigureSinkPort = _libvswitch.VSDVS_ConfigureSinkPort

def VSDVS_GetTeamingPolicy(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_GetTeamingPolicy(*args)
VSDVS_GetTeamingPolicy = _libvswitch.VSDVS_GetTeamingPolicy

def VSDVS_SetTeamingPolicy(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_SetTeamingPolicy(*args)
VSDVS_SetTeamingPolicy = _libvswitch.VSDVS_SetTeamingPolicy

def VSDVS_ClearTeamingPolicy(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_ClearTeamingPolicy(*args)
VSDVS_ClearTeamingPolicy = _libvswitch.VSDVS_ClearTeamingPolicy

def VSDVS_GetTxUplinkAlways(*args) -> "vmk_Bool *" :
  return _libvswitch.VSDVS_GetTxUplinkAlways(*args)
VSDVS_GetTxUplinkAlways = _libvswitch.VSDVS_GetTxUplinkAlways

def VSDVS_SetTxUplinkAlways(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_SetTxUplinkAlways(*args)
VSDVS_SetTxUplinkAlways = _libvswitch.VSDVS_SetTxUplinkAlways

def VSDVS_GetPortTeamingPolicy(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_GetPortTeamingPolicy(*args)
VSDVS_GetPortTeamingPolicy = _libvswitch.VSDVS_GetPortTeamingPolicy

def VSDVS_SetPortTeamingPolicy(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_SetPortTeamingPolicy(*args)
VSDVS_SetPortTeamingPolicy = _libvswitch.VSDVS_SetPortTeamingPolicy

def VSDVS_ClearPortTeamingPolicy(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_ClearPortTeamingPolicy(*args)
VSDVS_ClearPortTeamingPolicy = _libvswitch.VSDVS_ClearPortTeamingPolicy

def VSDVS_SetPortTeamingOverride(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_SetPortTeamingOverride(*args)
VSDVS_SetPortTeamingOverride = _libvswitch.VSDVS_SetPortTeamingOverride

def VSDVS_ClearPortTeamingOverride(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_ClearPortTeamingOverride(*args)
VSDVS_ClearPortTeamingOverride = _libvswitch.VSDVS_ClearPortTeamingOverride

def VSDVS_GetMTU(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_GetMTU(*args)
VSDVS_GetMTU = _libvswitch.VSDVS_GetMTU

def VSDVS_SetMTU(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_SetMTU(*args)
VSDVS_SetMTU = _libvswitch.VSDVS_SetMTU

def VSDVS_GetSwitchUplinkPorts(*args) -> "VSUplinkPorts **, VSUplinkPortIds **" :
  return _libvswitch.VSDVS_GetSwitchUplinkPorts(*args)
VSDVS_GetSwitchUplinkPorts = _libvswitch.VSDVS_GetSwitchUplinkPorts

def VSDVS_SetSwitchUplinkPorts(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_SetSwitchUplinkPorts(*args)
VSDVS_SetSwitchUplinkPorts = _libvswitch.VSDVS_SetSwitchUplinkPorts

def VSDVS_AddSwitchUplinkPort(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_AddSwitchUplinkPort(*args)
VSDVS_AddSwitchUplinkPort = _libvswitch.VSDVS_AddSwitchUplinkPort

def VSDVS_RemoveSwitchUplinkPort(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_RemoveSwitchUplinkPort(*args)
VSDVS_RemoveSwitchUplinkPort = _libvswitch.VSDVS_RemoveSwitchUplinkPort

def VSDVS_ClearSwitchUplinkPorts(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_ClearSwitchUplinkPorts(*args)
VSDVS_ClearSwitchUplinkPorts = _libvswitch.VSDVS_ClearSwitchUplinkPorts

def VSDVS_CreateVSwitch(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_CreateVSwitch(*args)
VSDVS_CreateVSwitch = _libvswitch.VSDVS_CreateVSwitch

def VSDVS_DestroyVSwitch(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_DestroyVSwitch(*args)
VSDVS_DestroyVSwitch = _libvswitch.VSDVS_DestroyVSwitch

def VSDVS_AddDVPort(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_AddDVPort(*args)
VSDVS_AddDVPort = _libvswitch.VSDVS_AddDVPort

def VSDVS_AddOpaqueDVPort(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_AddOpaqueDVPort(*args)
VSDVS_AddOpaqueDVPort = _libvswitch.VSDVS_AddOpaqueDVPort

def VSDVS_RemoveDVPort(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_RemoveDVPort(*args)
VSDVS_RemoveDVPort = _libvswitch.VSDVS_RemoveDVPort

def VSDVS_GetPortMACLearning(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_GetPortMACLearning(*args)
VSDVS_GetPortMACLearning = _libvswitch.VSDVS_GetPortMACLearning

def VSDVS_SetPortMACLearning(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_SetPortMACLearning(*args)
VSDVS_SetPortMACLearning = _libvswitch.VSDVS_SetPortMACLearning

def VSDVS_GetMACLearning(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_GetMACLearning(*args)
VSDVS_GetMACLearning = _libvswitch.VSDVS_GetMACLearning

def VSDVS_SetMACLearning(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_SetMACLearning(*args)
VSDVS_SetMACLearning = _libvswitch.VSDVS_SetMACLearning

def VSDVS_ClearMACLearning(*args) -> "VMK_ReturnStatus" :
  return _libvswitch.VSDVS_ClearMACLearning(*args)
VSDVS_ClearMACLearning = _libvswitch.VSDVS_ClearMACLearning

def VSDVS_DvPortIDToPortID(*args) -> "vmk_SwitchPortID *" :
  return _libvswitch.VSDVS_DvPortIDToPortID(*args)
VSDVS_DvPortIDToPortID = _libvswitch.VSDVS_DvPortIDToPortID

def VSDVS_FreeMemory(*args) -> "void" :
  return _libvswitch.VSDVS_FreeMemory(*args)
VSDVS_FreeMemory = _libvswitch.VSDVS_FreeMemory
# **********************************************************************
# Copyright 2017 VMware, Inc.  All rights reserved. VMware Confidential.
# **********************************************************************


""" All exceptions that can be raised by NSX DP libraries.
"""

class DPException(Exception):
    """ Base class for all DP exceptions.
    """
    def __init__(self, msg, dvs=None, dvport=None,
                 port=None, portset=None, status=None):
        self.msg = msg
        self.port = port
        self.portset = portset
        self.dvs = dvs
        self.dvport = dvport
        self.status = status

class DvsFailure(DPException):
   """ Generic DVS Exception
   """
   def __init__(self, msg, dvs, status):
      self.msg = msg
      self.dvs = dvs
      self.status = status

   def __str__(self):
      return 'DVS Failure {dvs}:{status}::{msg}.'.format(dvs=self.dvs, msg=self.msg,
                                                         status=self.status)

class VmkernelFailure(DPException):
   """ Generic VMKernel failure.
   """
   def __str__(self):
      return 'vmkernel failure:{status}::{msg}'.format(msg=self.msg,
                                                       status=self.status)

class DVPortFailure(DPException):
   """ DVPort Exception
   """
   def __init__(self, msg, dvs, dvport, status):
      super(DVPortFailure, self).__init__(msg, dvs=dvs, status=status)
      self.dvport = dvport

   def __str__(self):
      return '{dvs}:{dvport}:{status}::fail to {msg} failed'.format(dvs=self.dvs, dvport=self.dvport,msg=self.msg,
                                                                    status=self.status)

class DvsPropFailure(DPException):
   """ DVS property returned error.
   """
   def __init__(self, msg, output):
      self.msg = msg
      self.output = output

   def __str__(self):
      return 'net-dvs:{output}::failed to {msg}'.format(output=self.output, msg=self.msg)

class ConfigurationWriteFailure(DPException):
    """ Raised when applying a configuration on port/portset failed.
    """
    def __str__(self):
       return 'ConfigWriteFailure: Port {port}::{msg}'.format(port=self.port,
                                                              msg=self.msg)

class ConfigurationReadFailure(DPException):
    """ Raised when a configuration is read but it is not configured yet.
    """
    def __str__(self):
       return 'ConfigReadFailure:DVS-{dvs},Port-{port}::{msg}'.format(port=self.port,
                                                                      dvs=self.dvs,
                                                                      msg=self.msg)

class StatsReadFailure(DPException):
    """ Raised when reading stats failed.
    """
    def __str__(self):
       return 'Stats Read Failure::{msg}'.format(msg=self.msg)

dvmirror_flags = {
   VS_DVMIRROR_FLAG_DST_NO_OUTPUT: "DST_NO_OUTPUT",
   VS_DVMIRROR_FLAG_DST_NO_INPUT: "DST_NO_INPUT",
   VS_DVMIRROR_FLAG_DST_ORIG_VLAN: "DST_ORIG_VLAN",
   VS_DVMIRROR_FLAG_DST_ENCAP: "DST_ENCAP",
   VS_DVMIRROR_FLAG_LEGACY: "DST_LEGACY",
   VS_DVMIRROR_FLAG_DISABLED: "DISABLED"
}

session_type_str = ["MIXDST", "DVPORT", "RMIRROR_SRC","RMIRROR_DST", "ERMIRROR_SRC"]
uplink_filter_type_str = [
   "MIRROR_UPLINK_FILTER_NONE",
   "MIRROR_UPLINK_FILTER_NORMAL",
   "MIRROR_UPLINK_FILTER_STT",
   "MIRROR_UPLINK_FILTER_VXLAN",
   "MIRROR_UPLINK_FILTER_GENEVE",
   "MIRROR_UPLINK_FILTER_ALL_ENCAP"
]
entity_type_str = ["DVPORT", "UPLINK", "VLAN", "IP", "PORT"]

def GetDVMirrorSessions(dvs_alias, dvport):
   status, session_table = VSDVS_GetDVMirrorSessions(dvs_alias, dvport)
   if status != VMK_OK:
      raise DVPortFailure('Get DVMirror sessions', dvs_alias, dvport, status)
   num_sessions = session_table.numSessions
   session_list = []
   for i in range(0, num_sessions):
      session = session_table[i]
      entity = session_table.get_first_session_entity(session.startIdx)
      this_map = {}
      this_map['sid'] = session.sid
      this_map['dname'] = session.dname
      this_map['type'] = session_type_str[session.type]
      this_map['snapLen'] = session.snapLen
      this_map['flags'] = []
      for flag in dvmirror_flags:
         if session.flags & flag:
            this_map['flags'].append(dvmirror_flags[flag])
      this_map['encapVlan'] = session.encapVlan
      this_map['wildIn'] = session.wildIn
      this_map['wildOut'] = session.wildOut
      this_map['samplingRate'] = session.samplingRate
      this_map['greKey'] = session.greKey
      this_map['uplinkFilter'] = uplink_filter_type_str[session.uplinkFilter]
      this_map['dstEntities'] = []
      for i in range(0, session.numDstEntities):
         this_map['dstEntities'].append(entity.get_entity())
         entity = entity.next()
      this_map['srcInEntities'] = []
      for i in range(0, session.numSrcInEntities):
         this_map['srcInEntities'].append(entity.get_entity())
         entity = entity.next()
      this_map['srcOutEntities'] = []
      for i in range(0, session.numSrcOutEntities):
         this_map['srcOutEntities'].append(entity.get_entity())
         entity = entity.next()
      session_list.append(this_map)
   out_map = {}
   out_map['version'] = session_table.version
   out_map['sessions'] = session_list
   return out_map

def GetDVMirrorSessionIDs(dvs_alias):
   status, sids = VSVMK_GetDVMirrorSessionIDs(dvs_alias)
   sids_list = []
   for i in range(0, sids.numEntries):
      sids_list.append(sids[i])
   return sids_list

def GetDVMirrorSessionStats(dvs_alias, sid):
   stats = VSDVMirrorSessionStats()
   status = VSVMK_GetDVMirrorSessionStats(dvs_alias, sid, stats)
   if status != VMK_OK:
      raise DvsFailure('Get DVMirrorSessionStats', dvs_alias, status)
   out_map = {}
   out_map["src mirrorPkt"] = stats.mirrorPktCnt
   out_map["src mirrorPktFail"] = stats.mirrorPktFailCnt
   out_map["dst mirroredPkts"] = stats.mirroredPkts
   out_map["dst discardedPkts"] = stats.discardedPkts
   out_map["dst failedPkts"] = stats.failedPkts
   out_map["Name"] = stats.name
   return out_map

def AppendDVMirrorSession(dvs_alias, dvport, in_map):
   dstEntities = in_map["dstEntities"]
   srcInEntities = in_map["srcInEntities"]
   srcOutEntities = in_map["srcOutEntities"]

   numSessions = 1
   numEntities = len(dstEntities) + len(srcInEntities) + len(srcOutEntities)
   table = alloc_dvmirror_session_table(numSessions, numEntities)
   table.version = VS_DVMIRROR_VERSION_V2
   session = table.get_first_session();

   for key in in_map:
      if key == "sid":
         session.sid = in_map[key]
      elif key == "dname":
         session.dname = in_map[key]
      elif key == "type":
         session.type = session_type_str.index(in_map[key])
      elif key == "snapLen":
         session.snapLen = in_map[key]
      elif key == "flags":
         flags = in_map[key]
         for flag in dvmirror_flags:
            if dvmirror_flags[flag] in flags:
               session.flags |= flag
      elif key == "encapVlan":
         session.encapVlan = in_map[key]
      elif key == "wildIn":
         session.wildIn = in_map[key]
      elif key == "wildOut":
         session.wildOut = in_map[key]
      elif key == "samplingRate":
         session.samplingRate = in_map[key]
      elif key == "greKey":
         session.greKey = in_map[key]
      elif key == "uplinkFilter":
         session.uplinkFilter = uplink_filter_type_str.index(in_map[key])

   session.startIdx = 0
   entity = table.get_first_session_entity(session.startIdx)
   session.numDstEntities = len(dstEntities)
   for dstEntitiy in dstEntities:
      entity.type = entity_type_str.index(dstEntitiy['type'])
      entity.set_entity(dstEntitiy['entity'])
      entity = entity.next()
   session.numSrcInEntities = len(srcInEntities)
   for srcInEntitiy in srcInEntities:
      entity.type = entity_type_str.index(srcInEntitiy['type'])
      entity.set_entity(srcInEntitiy['entity'])
      entity = entity.next()
   session.numSrcOutEntities = len(srcOutEntities)
   for srcOutEntitiy in srcOutEntities:
      entity.type = entity_type_str.index(srcOutEntitiy['type'])
      entity.set_entity(srcOutEntitiy['entity'])
      entity = entity.next()

   status = VSDVS_AppendDVMirrorSessions(dvs_alias, dvport, table)
   if status != VMK_OK:
      free_dvmirror_session_table(table)
      raise DVPortFailure('Append DVMirrorSessions', dvs_alias, dvport, status)

   free_dvmirror_session_table(table)

def RemoveDVMirrorSession(dvs_alias, dvport, sid):
   status = VSDVS_RemoveDVMirrorSession(dvs_alias, dvport, sid)
   if status != VMK_OK:
      raise DVPortFailure('Remove DVMirrorSessions', dvs_alias, dvport, status)

def ClearDVMirrorSessions(dvs_alias, dvport):
   status = VSDVS_ClearDVMirrorSessions(dvs_alias, dvport)
   if status != VMK_OK:
      raise DVPortFailure('Clear DVMirrorSessions', dvs_alias, dvport, status)

def GetPortMACLearning(dvs_alias, dvport):
   """ Get the MAC learning config associated with a DVPort.

   Helper function that invokes the  SWIG generated python wrapper function
   for C function VSDVS_GetPortMACLearning.

   Args:
      dvs_alias (string): DVS Alias name
      dvport (string): DVPort ID

   Returns:
      VSPMACLearning: MAC learning config of the DVPort

   Raises:
      DVPortFailure
   """
   config = VSPMACLearning()
   status = VSDVS_GetPortMACLearning(dvs_alias, dvport, config)
   if status != VMK_OK:
      raise DVPortFailure('Get MAC learning config', dvs_alias, dvport, status)
   return config

def SetPortMACLearning(dvs_alias, dvport, enable, flooding, mac_limit,
                       mac_limit_policy):
   """ Set the MAC learning config for a DVPort.

   Helper function to set the MAC learning config associated with a port. It
   internally calls the SWIG generated python wrapper function for C function
   VSDVS_GetPortMACLearning.

   Args:
      dvs_alias (string): DVS Alias name
      dvport (string): DVPort ID
      enable (bool): Enable MAC learning on this DVPort
      flooding (bool): Enable unknown unicast flooding on this DVPort
      mac_limit (int): Number of MACs to be learnt on this DVPort
      mac_limit_policy (bool): True for Allow and False for Drop

   Returns:
      None

   Raises:
      DVPortFailure
   """
   config = VSPMACLearning()
   if enable:
      config.learning = True
      config.flooding = flooding
   else:
      # If MAC learning is disabled, flooding also should be considered disabled
      config.learning = False
      config.flooding = False
   config.macLimit = mac_limit
   if mac_limit_policy:
      config.macLimitPolicy = VSPORT_MAC_LEARNING_LIMIT_POLICY_ALLOW
   else:
      config.macLimitPolicy = VSPORT_MAC_LEARNING_LIMIT_POLICY_DROP
   status = VSDVS_SetPortMACLearning(dvs_alias, dvport, config)
   if status != VMK_OK:
      raise DVPortFailure('Set MAC learning config', dvs_alias, dvport, status)

def GetMACLearning(dvs_alias):
   """ Get global MAC learning config or that of a switch.

   Helper function to get the MAC learning config associated with a switch. If
   no switch parameter is provided, it fetches the global MAC learning properties
   It internally calls the SWIG generated python wrapper functions for C functions
   VSDVS_GetMACLearning and VSVMK_GetGlobalMACLearningProps.

   Args:
      dvs_alias (string/None): DVS Alias name / None for global config

   Returns:
      (int, bool): A tuple with configured aging time, MAC limit

   Raises:
      DVPortFailure, VmkernelFailure
   """
   if dvs_alias:
      config = VSMACLearning()
      status = VSDVS_GetMACLearning(dvs_alias, config)
      if status != VMK_OK:
         raise DvsFailure('Get global MAC learning config', dvs_alias, status)
      return (config.agingTime, config.macLimit)
   else:
      globalConfig = VSMACLearningGlobalProps()
      status = VSVMK_GetGlobalMACLearningProps(globalConfig)
      if status != VMK_OK:
         raise VmkernelFailure('Get global MAC learning config', status)
      return (globalConfig.agingTime, globalConfig.macLimit)

def SetMACLearning(dvs_alias, aging_time, mac_limit):
   """ Set global MAC learning config or that of a switch.

   Helper function to set the MAC learning config associated with a switch. If
   no switch parameter is provided, it updates the global MAC learning properties
   which gets applied by default for subsequently created switched. It internally
   calls the SWIG generated python wrapper functions for C functions
   VSDVS_SetMACLearning and VSVMK_SetGlobalMACLearningProps.

   Args:
      dvs_alias (string/None): DVS Alias name / None for global config
      aging_time (int): Number of seconds before a learned entry is deleted
      mac_limit (int): Number of MACs to be learnt on a switch

   Returns:
      None

   Raises:
      DVPortFailure, VmkernelFailure
   """
   if dvs_alias:
      config = VSMACLearning()
      config.agingTime = aging_time
      config.macLimit = mac_limit
      status = VSDVS_SetMACLearning(dvs_alias, config)
      if status != VMK_OK:
         raise DvsFailure('Set global MAC learning config', dvs_alias, status)
   else:
      globalConfig = VSMACLearningGlobalProps()
      globalConfig.agingTime = aging_time
      globalConfig.macLimit = mac_limit
      status = VSVMK_SetGlobalMACLearningProps(globalConfig)
      if status != VMK_OK:
         raise VmkernelFailure('Set global MAC learning config', status)

def ClearMACLearning(dvs_alias):
   """ Clear MAC learning config of a switch

   Helper function to clear the MAC learning config associated with a switch. It
   internally calls the SWIG generated python wrapper functions for C functions
   VSDVS_ClearMACLearning.

   Args:
      dvs_alias (string): DVS Alias name

   Returns:
      None

   Raises:
      DvsFailure
   """
   status = VSDVS_ClearMACLearning(dvs_alias)
   if status != VMK_OK:
      raise DvsFailure('Clear MAC learning config', dvs_alias, status)

def GetPortMACLearningStats(dvs_alias, dvport):
   """ Get the MAC learning stats associated with a DVPort.

   Helper function that invokes the SWIG generated python wrapper function
   for C function VSVMK_GetPortMACLearningStats.

   Args:
      dvs_alias (string): DVS Alias name
      dvport (string): DVPort ID

   Returns:
      dict: A dictionary containing the stats associated with the DVPort

   Raises:
      DVPortFailure
   """
   stats = VSPMACLearningStats()
   status = VSVMK_GetPortMACLearningStats(dvport, dvs_alias, stats)
   if status != VMK_OK:
      raise DVPortFailure('Get MAC learning stats', dvs_alias, dvport, status)
   out_stats = {}
   out_stats["numMACsLearned"] = stats.numMACsLearned
   out_stats["noLearningAllowedPkts"] = stats.noLearningAllowedPkts
   out_stats["noLearningDroppedPkts"] = stats.noLearningDroppedPkts
   out_stats["numMACsMoved"] = stats.numMACsMoved
   return out_stats

mac_type_usr_to_vmk = {"static" : VS_MAC_ADDR_TYPE_STATIC,
                       "user" : VS_MAC_ADDR_TYPE_USER,
                       "learned" : VS_MAC_ADDR_TYPE_LEARNED,
                       "all" : VS_MAC_ADDR_TYPE_ALL,
}
mac_type_vmk_to_usr = {VS_MAC_ADDR_TYPE_STATIC : "static",
                       VS_MAC_ADDR_TYPE_USER : "user",
                       VS_MAC_ADDR_TYPE_LEARNED : "learned",
                       VS_MAC_ADDR_TYPE_ALL : "all",
}

def FormatMACTable(mac_table):
   """ An helper function to format the MAC table to be displayed in nsxdp-cli

   Args:
      mac_table (VSMACTable): MAC Table to be formatted

   Returns:
      A list of maps containing the MAC table entries

   Raises:
      ValueError
   """
   mac_table_entries = []
   for i in range(0, mac_table.numEntries):
      mac_table_entries.append({})
      mac_table_entries[i]['MAC'] = mac_table.macEntries[i].macAddress

      mac_type = mac_table.macEntries[i].macAddrType
      if mac_type in mac_type_vmk_to_usr:
          mac_table_entries[i]['type'] = mac_type_vmk_to_usr[mac_type]
      else:
         raise ValueError("Invalid value for mac_type[" + mac_type + "]")

      if mac_table.macEntries[i].aging:
         mac_table_entries[i]['aging'] = "yes"
      else:
         mac_table_entries[i]['aging'] = "no"

      mac_table_entries[i]['vid'] = mac_table.macEntries[i].vid
      mac_table_entries[i]['vni'] = mac_table.macEntries[i].vni
      mac_table_entries[i]['elapsed'] = mac_table.macEntries[i].elapsed
   return mac_table_entries

def GetPortMACTable(dvs_alias, dvport, mac_type):
   """ Get the MAC table on a port of a vswitch

   Helper function that invokes the SWIG generated python wrapper function
   for C function VSVMK_GetPortMACTable.

   Args:
      dvs_alias (string): DVS Alias name
      dvport (string): DVPort ID
      mac_type (string): The type of mac addresses to fetch.

   Returns:
      A list of maps containing the MAC table entries

   Raises:
      ValueError, DVPortFailure
   """
   if mac_type.lower() in mac_type_usr_to_vmk:
      mac_type = mac_type_usr_to_vmk[mac_type.lower()]
   else:
      raise ValueError("Invalid value for mac_type. Require static/user/learned/all")

   result = VSVMK_GetPortMACTable(dvs_alias, dvport, mac_type)
   if result[0] != VMK_OK:
      raise DVPortFailure('Get MAC table', dvs_alias, dvport, result[0])
   mac_table = result[1]
   return FormatMACTable(mac_table)

def SetPortMACTable(dvs_alias, dvport, macaddr, vid, vni, aging):
   """ Configure the user MAC address on a port of a vswitch

   Helper function that invokes the SWIG generated python wrapper function
   for C function VSVMK_SetPortMACTable.

   Args:
      dvs_alias (string): DVS Alias name
      dvport (string): DVPort ID
      mac_addr (string): User configured mac address
      vid (int): vlan id for this MAC addr
      vni (int): vni id for this MAC addr
      aging (bool): Enable/Disable aging for this MAC addr

   Returns:
      None

   Raises:
      DVPortFailure
   """
   mac_entry = VSMACEntry()
   mac_addr_list = macaddr.split(":")
   mac_addr_barray = bytearray()
   mac_addr_barray.extend([int(x, 16) for x in mac_addr_list])
   mac_entry.set_mac_address(mac_addr_barray)
   mac_entry.macAddrType = VS_MAC_ADDR_TYPE_USER
   mac_entry.aging = aging
   mac_entry.vid = vid
   mac_entry.vni = vni
   status = VSVMK_SetPortMACTable(dvs_alias, dvport, mac_entry)
   if status != VMK_OK:
      raise DVPortFailure('Set user MAC address on vswitch port', dvs_alias,
                          dvport, status)

def ClearPortMACTable(dvs_alias, dvport, macaddr, vid, vni):
   """ Clear the user MAC address on a port of a vswitch

   Helper function that invokes the SWIG generated python wrapper function
   for C function VSVMK_ClearPortMACTable.

   Args:
      dvs_alias (string): DVS Alias name
      dvport (string): DVPort ID
      mac_addr (string): User configured mac address
      vid (int): vlan id for this MAC addr
      vni (int): vni id for this MAC addr

   Returns:
      None

   Raises:
      DVPortFailure
   """
   mac_entry = VSMACEntry()
   mac_addr_list = macaddr.split(":")
   mac_addr_barray = bytearray()
   mac_addr_barray.extend([int(x, 16) for x in mac_addr_list])
   mac_entry.set_mac_address(mac_addr_barray)
   mac_entry.macAddrType = VS_MAC_ADDR_TYPE_USER
   mac_entry.vid = vid
   mac_entry.vni = vni
   status = VSVMK_ClearPortMACTable(dvs_alias, dvport, mac_entry)
   if status != VMK_OK:
      raise DVPortFailure('Clear user MAC address on vswitch port', dvs_alias,
                          dvport, status)

def GetTeamMACTable(dvs_alias, mac_type):
   """ Get the MAC table on the Team of a vswitch

   Helper function that invokes the SWIG generated python wrapper function
   for C function VSVMK_GetTeamMACTable.

   Args:
      dvs_alias (string): DVS Alias name
      mac_type (string): The type of mac addresses to fetch.

   Returns:
      A list of maps containing the MAC table entries

   Raises:
      ValueError, DvsFailure
   """
   if mac_type.lower() in mac_type_usr_to_vmk:
      mac_type = mac_type_usr_to_vmk[mac_type.lower()]
   else:
      raise ValueError("Invalid value for mac_type. Require static/user/learned/all")

   result = VSVMK_GetTeamMACTable(dvs_alias, mac_type)
   if result[0] != VMK_OK:
      raise DvsFailure('Get Team MAC table', dvs_alias, result[0])
   mac_table = result[1]
   return FormatMACTable(mac_table)

import socket

def _getModeStrFromEnum(mode):
   if mode == VS_MCAST_FILTER_MODE_LEGACY:
      return "Legacy"
   elif mode == VS_MCAST_FILTER_MODE_SNOOPING:
      return "Snooping"
   elif mode == VS_MCAST_FILTER_MODE_IGMP:
      return "IGMP"
   elif mode == VS_MCAST_FILTER_MODE_MLD:
      return "MLD"
   else:
      raise Exception("Unknown mcast filter mode: " + str(mode))

def _getModeEnumFromStr(mode):
   if mode.lower() == "legacy":
      return VS_MCAST_FILTER_MODE_LEGACY
   elif mode.lower() == "snooping":
      return VS_MCAST_FILTER_MODE_SNOOPING
   elif mode.lower() == "igmp":
      return VS_MCAST_FILTER_MODE_IGMP
   elif mode.lower() == "mld":
      return VS_MCAST_FILTER_MODE_MLD
   else:
      raise Exception("Unknown mcast filter mode: " + mode)

def GetMcastFilterMode(dvs_alias):
   """ Get the mcast filter mode (Legacy/Snooping) of a switch """
   status = VSDVS_GetMcastFilterMode(dvs_alias)
   if status[0] != VMK_OK:
      raise DvsFailure('Get MCAST filter mode', dvs_alias, status[0])
   return _getModeStrFromEnum(status[1])

def SetMcastFilterMode(dvs_alias, mode):
   """ Set the mcast filter mode (Legacy/Snooping) of a switch """
   status = VSDVS_SetMcastFilterMode(dvs_alias, _getModeEnumFromStr(mode))
   if status != VMK_OK:
      raise DvsFailure('Set MCAST filter mode', dvs_alias, status)

def GetMcastFilters(dvs_alias, port, mode):
   """ Get mcast filters of a port

       Returns list of MAC addresses (Legacy) / list of IPv4 addresses (IGMP) /
       list of IPv4 addreses (MLD)
   """
   status, psName = DVSAliasToPortsetName(dvs_alias)
   if status != VMK_OK:
      raise DvsFailure('Get portset name', dvs_alias, status)
   mode = _getModeEnumFromStr(mode)
   if mode not in [VS_MCAST_FILTER_MODE_LEGACY, VS_MCAST_FILTER_MODE_IGMP,
                   VS_MCAST_FILTER_MODE_MLD]:
      raise Exception('Expected modes: {Legacy/IGMP/MLD}')

   status = VSVMK_GetMcastFilters(psName, port, mode)
   if status[0] != VMK_OK:
      raise DvsFailure('Get mcast filters', dvs_alias, status[0])

   filters = status[1]
   out_list = []
   for i in range(0, filters.numEntries):
      if mode == VS_MCAST_FILTER_MODE_LEGACY:
         out_list.append(filters.get_mac_entry(i))
      elif mode == VS_MCAST_FILTER_MODE_IGMP:
         out_list.append(filters.get_ip_entry(i))
      else:
         out_list.append(filters.get_ipv6_entry(i))
   return out_list

def GetMcastFilterStats(dvs_alias, port, mode, ip):
   """ Get mcast filter stats of a port

       Returns a dictionary of stats
   """
   status, psName = DVSAliasToPortsetName(dvs_alias)
   if status != VMK_OK:
      raise DvsFailure('Get portset name', dvs_alias, status)
   mode = _getModeEnumFromStr(mode)
   if mode not in [VS_MCAST_FILTER_MODE_IGMP, VS_MCAST_FILTER_MODE_MLD]:
      raise Exception('Expected modes: {IGMP/MLD}')

   if mode == VS_MCAST_FILTER_MODE_IGMP:
      ip_byte_array = socket.inet_aton(ip)
      status = VSVMK_GetMcastFilterStats(psName, port, mode, ip_byte_array)
   else:
      ip_byte_array = socket.inet_pton(socket.AF_INET6, ip)
      status = VSVMK_GetMcastFilterStats(psName, port, mode, ip_byte_array)

   if status[0] != VMK_OK:
      raise DvsFailure('Get mcast filter stats', dvs_alias, status[0])

   stats = status[1]
   out_list = []
   for i in range(0, stats.numEntries):
      if mode == VS_MCAST_FILTER_MODE_IGMP:
         out_list.append(stats.get_ip_entry(i))
      else:
         out_list.append(stats.get_ipv6_entry(i))
   out_map = {}
   out_map['version'] = stats.version
   if stats.srcIPFilterMode == VS_MCAST_SRC_IP_FILTER_MODE_INCLUDE:
      out_map['srcIPFilterMode'] = "INCLUDE"
   else:
      out_map['srcIPFilterMode'] = "EXCLUDE"
   out_map['updateTime'] = stats.updateTime
   out_map['VNI'] = stats.vni
   out_map['srcIPs'] = out_list
   return out_map

import subprocess
import json
import sys
import vmware.vsi as vsi

def GetMTU(dvs_alias):
   """ Get the MTU setting of a vswitch.
   """
   status, ps = DVSAliasToPortsetName(dvs_alias)
   if status != VMK_OK:
      raise DvsFailure('Get portset name', dvs_alias, status)
   out = vsi.get("/net/portsets/" + ps  + "/mtu")
   mtu = out['mtu']
   return mtu

def SetMTU(dvs_alias, mtu):
   """ Set the MTU setting of a vswitch.

   Set the MTU of the portset and of all the uplinks in the portset
   """
   status, ps = DVSAliasToPortsetName(dvs_alias)
   if status != VMK_OK:
      raise DvsFailure('Get portset name', dvs_alias, status)

   # Get the current MTU value
   current_mtu = GetMTU(dvs_alias)

   # Get the uplinks on this switch
   uplinks = GetUplinks(dvs_alias)

   # Set each uplink's MTU
   updated_uplinks = []
   for uplink in uplinks:
      try:
         vsi.set("/net/pNics/" + uplink  + "/mtu", [mtu])
         updated_uplinks.append(uplink)
      except Exception as e:
         # Revert other uplink MTUs that may have been set
         for uplink in updated_uplinks:
            vsi.set("/net/pNics/" + uplink  + "/mtu", [current_mtu])
         raise

   # Set the portset MTU
   try:
      vsi.set("/net/portsets/" + ps  + "/mtu", [mtu])
   except Exception as e:
      # Revert uplink MTUs that have been set
      for uplink in updated_uplinks:
         vsi.set("/net/pNics/" + uplink  + "/mtu", [current_mtu])
      raise

   # Update the com.vmware.vswitch.mtu(VSPROP_MTU) DVS property
   try:
      SetDvsProperty(dvs_alias, "globalPropList", VSPROP_MTU, str(mtu))
   except DvsPropFailure as e:
      # Revert the portset MTU
      vsi.set("/net/portsets/" + ps  + "/mtu", [current_mtu])
      # Revert other uplink MTUs that have been set
      for uplink in updated_uplinks:
         vsi.set("/net/pNics/" + uplink  + "/mtu", [current_mtu])
      raise

   # Update the com.vmware.etherswitch.mtu DVS property so that esxcfg-vswitch
   # can display proper MTU
   SetDvsProperty(dvs_alias, "globalPropList", "com.vmware.common.portset.mtu", str(mtu))

def GetPortSecurity(dvs_alias, dvport):
   """ Get L2 security settings of a port on vswitch
   """
   sec = VSPropSecurity()
   out = {}
   status = VSDVS_GetPortSecurity(dvs_alias, dvport, sec)
   if status != VMK_OK:
      raise DvsFailure('Get port security info',dvs_alias, status)
   out['disallowPromisc'] = bool(sec.flags & VSPORT_SECURITY_DISALLOW_PROMISC)
   out['disallowMacChange'] = bool(sec.flags & VSPORT_SECURITY_DISALLOW_MAC_CHANGE)
   out['disallowForgedSrc'] = bool(sec.flags & VSPORT_SECURITY_DISALLOW_FORGED_SRC)
   return out

def SetPortSecurity(dvs_alias, dvport, promisc, mac_change, forge_src):
   """ Set L2 security settings of a port on vswitch
   """
   sec = VSPropSecurity()
   sec.flags = 0

   if not promisc:
      sec.flags |= VSPORT_SECURITY_DISALLOW_PROMISC
   if not mac_change:
      sec.flags |= VSPORT_SECURITY_DISALLOW_MAC_CHANGE
   if not forge_src:
      sec.flags |= VSPORT_SECURITY_DISALLOW_FORGED_SRC

   status = VSDVS_SetPortSecurity(dvs_alias, dvport, sec)
   if status != VMK_OK:
      raise DvsFailure('Get port security info',dvs_alias, status)

def GetPortVLANPolicy(dvs_alias, dvport):
   """ Retrieve the VLAN policy of a DVPort on a switch """
   status = VSDVS_GetPortVLANPolicy(dvs_alias, dvport)
   if status[0] != VMK_OK:
      raise DVPortFailure('Get port VLAN policy', dvs_alias, dvport, status[0])
   policy = status[1]
   priority = status[2]

   return (policy, priority)

def SetPortVLANPolicy(dvs_alias, dvport, guest_tagging, #pvlan,
                      priority, vlan, vid_ranges):
   """ Configure VLAN policy of a DVPort on a switch """
   num_ranges = len(vid_ranges)
   vid_range_array = None
   if num_ranges > 0:
      vid_range_array = new_vidrangeArray(num_ranges)
      for i in range(0, num_ranges):
         vid_range = vmk_VDSPortVIDRange()
         vid_range.minVID = vid_ranges[i][0]
         vid_range.maxVID = vid_ranges[i][1]
         vidrangeArray_setitem(vid_range_array,i,vid_range)
   status = VMK_OK
   if priority:
      status = VSDVS_SetPortVLANPolicy(dvs_alias, dvport, vlan, priority, guest_tagging,
                                       False, vid_range_array, num_ranges)
   else:
      status = VSDVS_SetPortVLANPolicy(dvs_alias, dvport, vlan, ~0, guest_tagging,
                                       False, vid_range_array, num_ranges)
   if status != VMK_OK:
      raise DVPortFailure('Set port VLAN policy', dvs_alias, dvport, status)
   if vid_range_array:
      delete_vidrangeArray(vid_range_array)

def ClearPortVLANPolicy(dvs_alias, dvport):
   """ Clear VLAN policy of a DVPort on a switch """
   status = VSDVS_ClearPortVLANPolicy(dvs_alias, dvport)
   if status != VMK_OK:
      raise DVPortFailure('Clear port VLAN policy', dvs_alias, dvport, status)

def GetPortNestedVLANTagging(dvs_alias, dvport):
   """ Get nested VLAN tagging setting of a DVPort on a vswitch """
   status = VSDVS_GetPortNestedVLANTagging(dvs_alias, dvport)
   if status[0] != VMK_OK:
      raise DVPortFailure('Get Port Nested VLAN tagging', dvs_alias, dvport, status[0])
   return status[1]

def SetPortNestedVLANTagging(dvs_alias, dvport, allow):
   """ Configure nested VLAN tagging setting of a DVPort on a vswitch """
   status = VSDVS_SetPortNestedVLANTagging(dvs_alias, dvport, allow)
   if status != VMK_OK:
      raise DVPortFailure('Set port VLAN policy', dvs_alias, dvport, status)

pvlan_type_str = ["", "PROMISC", "ISOLATED", "COMMUNITY"] 

def GetPrivateVLANMap(dvs_alias):
   status, vlanMapEntry, numEntries = VSDVS_GetPrivateVLANMap(dvs_alias)
   if status != VMK_OK:
      raise DvsFailure('Get private VLAN map', dvs_alias, status)
   out_list = []
   for i in range(0, numEntries):
      this_map = {}
      this_map['primaryVID'] = vlanMapEntry[i].primaryVID
      this_map['secondaryVID'] = vlanMapEntry[i].secondaryVID
      this_map['pvlanType'] = vlanMapEntry[i].pvlanType
      out_list.append(this_map)
   return out_list

def SetPrivateVLANMap(dvs_alias, pvlan_list):
   num_entries = len(pvlan_list)
   if num_entries == 0:
      status = VSDVS_SetPrivateVLANMap(dvs_alias, None, 0)
      if status != VMK_OK:
         raise DvsFailure('Clear private VLAN map', dvs_alias, status)
   else:
      pvlan_map_entry_array = new_pvlanmapentryArray(num_entries)
      for i in range (0, num_entries):
         pvlan_map_entry = VSPvlanMapEntry()
         pvlan_map_entry.primaryVID = pvlan_list[i]['primaryVID']
         pvlan_map_entry.secondaryVID = pvlan_list[i]['secondaryVID']
         if pvlan_list[i]['pvlanType'] in pvlan_type_str:
            pvlan_map_entry.pvlanType = pvlan_type_str.index(pvlan_list[i]['pvlanType'])
         else:
            pvlan_map_entry.pvlanType = VSPORT_PVLAN_TYPE_PROMISC 
         pvlanmapentryArray_setitem(pvlan_map_entry_array, i, pvlan_map_entry)
      status = VSDVS_SetPrivateVLANMap(dvs_alias, pvlan_map_entry_array, num_entries)
      if status != VMK_OK:
          raise DvsFailure('Set private VLAN map', dvs_alias, status)
      delete_pvlanmapentryArray(pvlan_map_entry_array)

def GetPromiscSessionActiveDsts(dvs_alias):
   status, dsts = VSVMK_GetPromiscSessionActiveDsts(dvs_alias)
   if status != VMK_OK:
      raise DvsFailure('Get promiscuous session active destinations', dvs_alias, status)
   out_list = []
   for i in range(0, dsts.numEntries):
      out_list.append(dsts.entries[i])
   return out_list

def GetRuntimeOptions(opt_list = []):
   status, options = VSVMK_GetRuntimeOptions(None, 0)
   if status != VMK_OK:
      raise Exception('Get Runtime options = ' + VMK_ReturnStatusToString(status))
   in_list_len = len(opt_list)
   out_map = {}
   option = options.get_first_option()
   while option != None:
      opt_name = option.get_option_name()
      if in_list_len == 0 or (opt_name in opt_list):
         out_map[opt_name] = option.get_option_value()
      option = options.get_next_option(option)
   return out_map

def SetRuntimeOptions(in_map):
   # Allocate maximum buffer. This constructor is generated from helper_ais.i.
   options = VSRuntimeOptions(VS_CHARDEV_MAX_RUNTIME_OPTIONS_LENGTH)
   cur_opt = options.get_first_option()
   total_opt_len = 0
   for in_opt_name in in_map:
      in_opt_val_raw = in_map[in_opt_name]
      in_opt_type = get_runtime_option_type_from_name(in_opt_name)
      if in_opt_type == -1:
         raise Exception('Invalid option name = ' + in_opt_name)
      next_opt = None
      if in_opt_type < NUM_RUNTIME_INT_OPTIONS:
         next_opt = options.add_int_option(cur_opt, in_opt_name, in_opt_type, int(in_opt_val_raw))
      else:
         next_opt = options.add_str_option(cur_opt, in_opt_name, in_opt_type, in_opt_val_raw)
      if next_opt == None:
         raise Exception('Insufficient buffer to hold the provided runtime options')
      total_opt_len += cur_opt.length
      cur_opt = next_opt
   options.set_options_length(total_opt_len)

   status = VSVMK_SetRuntimeOptions(options)
   if status != VMK_OK:
      raise Exception('Unable to Set Runtime options = ' + VMK_ReturnStatusToString(status))

team_link_criteria_enum_to_str = {
   TEAM_FRP_CRIT_LINK_SPEED: "LINK_SPEED",
   TEAM_FRP_CRIT_LINK_SPEED_GTE: "LINK_SPEED_GTE",
   TEAM_FRP_CRIT_LINK_DUPLEX: "LINK_DUPLEX",
   TEAM_FRP_CRIT_LACP_PORT_DOWN: "LACP_PORT_DOWN",
   TEAM_FRP_CRIT_BEACON_STATE: "BEACON_STATE",
   TEAM_FRP_CRIT_LINK_ERR: "LINK_ERR",
   TEAM_FRP_CRIT_LINK_STATE: "LINK_STATE",
   TEAM_FRP_CRIT_PORT_BLOCKED: "PORT_BLOCKED",
   TEAM_FRP_CRIT_DRV_PRESENT: "DRV_PRESENT"
}

team_frp_flags_enum_to_str = {
   TEAM_FRP_FLAG_ALL_AVAILABLE: "ALL_AVAILABLE",
   TEAM_FRP_FLAG_REVERSE: "REVERSE",
   TEAM_FRP_FLAG_BEST_EFFORT: "BEST_EFFORT",
   TEAM_FRP_FLAG_ROLLING: "ROLLING",
   TEAM_FRP_FLAG_SHOTGUN: "SHOTGUN",
   TEAM_FRP_FLAG_NOTIFY_SWITCH: "NOTIFY_SWITCH",
   TEAM_FRP_FLAG_BLOCK_OUTPUT: "BLOCK_OUTPUT",
   TEAM_FRP_FLAG_LACP_CLIENT: "LACP_CLIENT",
   TEAM_FRP_FLAG_LST: "LST"
}

team_policy_lb_str = ["NONE", "LB_IP", "LB_SRCMAC", "LB_SRCID","FO_EXPLICIT","LB_LBT"]

def _GetTeamingPolicyDict(policy):
   out_map = {}
   out_map['loadBalance'] = team_policy_lb_str[policy.loadBalance]
   out_map['linkCriteria'] = []
   for link_criteria in team_link_criteria_enum_to_str:
      if policy.linkCriteria & link_criteria:
         out_map['linkCriteria'].append(team_link_criteria_enum_to_str[link_criteria])
   out_map['percentError'] = policy.percentError
   out_map['fullDuplex'] = bool(policy.fullDuplex)
   out_map['speed'] = policy.speed
   out_map['flags'] = []
   for flag in team_frp_flags_enum_to_str:
      if policy.flags & flag:
         out_map['flags'].append(team_frp_flags_enum_to_str[flag])
   active_uplink_list = []
   standby_uplink_list = []
   for i in range(0, policy.numActive):
      active_uplink_list.append(policy[i])
   for i in range(policy.numActive, policy.numActive + policy.numStandby):
      standby_uplink_list.append(policy[i])
   out_map['activeUplinkPorts'] = active_uplink_list
   out_map['standbyUplinkPorts'] = standby_uplink_list
   return out_map

def _GetTeamingPolicyFromDict(policy):
   out_policy = VSTeamPolicy()

   loadBalance = policy['loadBalance']
   if loadBalance == team_policy_lb_str[0]:
      raise Exception("Invalid teaming load balance: " + loadBalance)
   for i in range(1, len(team_policy_lb_str)):
      if team_policy_lb_str[i] == loadBalance:
         out_policy.loadBalance = i
         break

   linkCriteria = policy['linkCriteria']
   for criteria in team_link_criteria_enum_to_str:
      if team_link_criteria_enum_to_str[criteria] in linkCriteria:
         out_policy.linkCriteria |= criteria

   if 'percentError' in policy:
      out_policy.percentError = policy['percentError']

   if 'fullDuplex' in policy:
      out_policy.fullDuplex = policy['fullDuplex']

   if 'speed' in policy:
      out_policy.speed = policy['speed']

   flags = policy['flags']
   for flag in team_frp_flags_enum_to_str:
      if team_frp_flags_enum_to_str[flag] in flags:
         out_policy.flags |= flag

   out_policy.numActive = len(policy['activeUplinkPorts'])
   out_policy.numStandby = len(policy['standbyUplinkPorts'])
   total_uplinks = out_policy.numActive + out_policy.numStandby
   if total_uplinks > VMK_TEAM_MAX_UPLINKS:
      raise Exception("Uplink number " + str(total_uplinks) + " is above the maximum " + str(VMK_TEAM_MAX_UPLINKS))
   for i in range(0, out_policy.numActive):
      out_policy[i] = policy['activeUplinkPorts'][i]
   for i in range(out_policy.numActive, total_uplinks):
      out_policy[i] = policy['standbyUplinkPorts'][i-out_policy.numActive]

   return out_policy

def GetPortTeamingPolicy(dvs_alias, dvport):
   policy = VSTeamPolicy()
   status = VSDVS_GetPortTeamingPolicy(dvs_alias, dvport, policy)
   if status != VMK_OK:
      raise DVPortFailure("Get Port Teaming Policy", dvs_alias, dvport, status)
   return _GetTeamingPolicyDict(policy)

def SetPortTeamingPolicy(dvs_alias, dvport, policy):
   in_policy = _GetTeamingPolicyFromDict(policy)
   status = VSDVS_SetPortTeamingPolicy(dvs_alias, dvport, in_policy)
   if status != VMK_OK:
      raise DVPortFailure("Set Port Teaming Policy", dvs_alias, dvport, status)

def ClearPortTeamingPolicy(dvs_alias, dvport):
   status = VSDVS_ClearPortTeamingPolicy(dvs_alias, dvport)
   if status != VMK_OK:
      raise DVPortFailure("Clear Port Teaming Policy", dvs_alias, dvport, status)

def GetTeamingPolicy(dvs_alias):
   policy = VSTeamPolicy()
   status = VSDVS_GetTeamingPolicy(dvs_alias, policy)
   if status != VMK_OK:
      raise DvsFailure("Get Teaming Policy", dvs_alias, status)
   return _GetTeamingPolicyDict(policy)

def SetTeamingPolicy(dvs_alias, policy):
   in_policy = _GetTeamingPolicyFromDict(policy)
   status = VSDVS_SetTeamingPolicy(dvs_alias, in_policy)
   if status != VMK_OK:
      raise DvsFailure("Set Teaming Policy", dvs_alias, status)

def ClearTeamingPolicy(dvs_alias):
   status = VSDVS_ClearTeamingPolicy(dvs_alias)
   if status != VMK_OK:
      raise DvsFailure("Clear Teaming Policy", dvs_alias, status)

def GetTxUplinkAlways(dvs_alias, dvport):
   status, always = VSDVS_GetTxUplinkAlways(dvs_alias, dvport)
   if status != VMK_OK:
      raise DVPortFailure("Get TX uplink always", dvs_alias, dvport, status)
   return always

def SetTxUplinkAlways(dvs_alias, dvport, always):
   status = VSDVS_SetTxUplinkAlways(dvs_alias, dvport, always)
   if status != VMK_OK:
      raise DVPortFailure("Set TX uplink always", dvs_alias, dvport, status)

def GetPortTeamingOverride(dvs_alias, dvport):
   status, uplink = VSDVS_GetPortTeamingOverride(dvs_alias, dvport)
   if status != VMK_OK:
      raise DVPortFailure("Get port teaming override", dvs_alias, dvport, status)
   return uplink

def SetPortTeamingOverride(dvs_alias, dvport, uplink_name):
   status = VSDVS_SetPortTeamingOverride(dvs_alias, dvport, uplink_name)
   if status != VMK_OK:
      raise DVPortFailure("Set port teaming override", dvs_alias, dvport, status)

def ClearPortTeamingOverride(dvs_alias, dvport):
   status = VSDVS_ClearPortTeamingOverride(dvs_alias, dvport)
   if status != VMK_OK:
      raise DVPortFailure("Clear port teaming override", dvs_alias, dvport, status)

def AddSwitchUplinkPort(dvs, dvport):
   """ Add a uplink DVPort to the DVS.
   """
   status = VSDVS_AddSwitchUplinkPort(dvs, dvport)
   if status != VMK_OK:
      raise DvsFailure('add uplink dvport', dvs, status)


def RemoveSwitchUplinkPort(dvs, dvport):
   """ Remove given uplink DVPort from the DVS.
   """
   status = VSDVS_RemoveSwitchUplinkPort(dvs, dvport)
   if status != VMK_OK:
      raise DvsFailure('remove uplink dvport', dvs, status)


def ClearSwitchUplinkPorts(dvs):
   """ Removee all uplink DVPorts from the DVS.
   """
   status = VSDVS_ClearSwitchUplinkPorts(dvs)
   if status != VMK_OK:
      raise DvsFailure('clear uplink dvports', dvs, status)


def GetSwitchUplinkPorts(dvs):
   """ Returns all uplink DVPorts in the DVS as a list.
   """
   result = VSDVS_GetSwitchUplinkPorts(dvs)
   status = result[0]
   uplinkPorts = result[1]
   uplinkPortIds = result[2]

   if status != VMK_OK:
      raise DvsFailure('get uplink dvports', dvs, status)

   names = []
   for i in range(uplinkPorts.nUplinkPorts):
      names.append(uplinkPorts[i])

   ids = []
   for i in range(uplinkPortIds.nUplinkPorts):
      ids.append(uplinkPortIds[i])

   VSDVS_FreeMemory(uplinkPorts)
   VSDVS_FreeMemory(uplinkPortIds)

   return {'names':names, 'ids':ids}

def SetSwitchUplinkPorts(dvs, ids):
   """ Sets given DVS's uplink ports.
   """
   count = len(ids)
   uplinkPorts = VSUplinkPorts(count)
   uplinkPortIds = VSUplinkPortIds(count)

   for i in range(count):
      uplinkPorts[i] = ids[i]
      uplinkPortIds[i] = ids[i]

   status = VSDVS_SetSwitchUplinkPorts(dvs, uplinkPorts, uplinkPortIds)
   if status != VMK_OK:
      raise DvsFailure('set uplink dvports', dvs, status)

def GetUplinks(dvs):
   """ Returns uplinks on the given DVS.
   """
   status, psName = DVSAliasToPortsetName(dvs)
   if status != VMK_OK:
      raise DvsFailure('find portset', dvs, status)

   result = VSVMK_GetUplinks(psName)
   status = result[0]
   vsUplinks = result[1]
   if status != VMK_OK:
      raise VmkernelFailure('get uplinks', status)

   uplinks = []
   for i in range(vsUplinks.numEntries):
      uplinks.append(vsUplinks[i])

   VSVMK_FreeMemory(vsUplinks)

   return uplinks

def GetUplinkLinkState(dvs, uplink):
   """ Returns state of the given uplink.
   """
   status, psName = DVSAliasToPortsetName(dvs)
   if status != VMK_OK:
      raise DvsFailure('find portset', dvs, status)

   result = VSVMK_GetUplinkLinkState(psName, uplink)
   status = result[0]
   state = result[1]
   if status != VMK_OK:
      raise VmkernelFailure('get uplink state', status)

   return "OK" if state == VMK_LINK_STATE_UP else "DOWN"

def GetUplinkLACPLinkState(dvs, uplink):
   """ Returns state of the given LACP uplink.
   """
   status, psName = DVSAliasToPortsetName(dvs)
   if status != VMK_OK:
      raise DvsFailure('find portset', dvs, status)

   result = VSVMK_GetUplinkLACPLinkState(psName, uplink)
   status = result[0]
   state = result[1]
   if status != VMK_OK:
      raise VmkernelFailure('get lacp uplink state', status)

   return "OK" if state == VMK_LINK_STATE_UP else "DOWN"

def SetUplinkAdminLinkState(dvs, uplink, state):
   """ Sets admin state of the given uplink.
   """
   status, psName = DVSAliasToPortsetName(dvs)
   if status != VMK_OK:
      raise DvsFailure('find portset', dvs, status)

   state = VMK_LINK_STATE_UP if state == 'OK' else VMK_LINK_STATE_DOWN
   status = VSVMK_SetUplinkAdminLinkState(psName, uplink, state)
   if status != VMK_OK:
      raise VmkernelFailure('get uplink state', status)

import collections

def SetDvsProperty(dvs_alias,dvport,prop_name,prop_value):
   cmd = ["net-dvs","-s",prop_name + "=" + prop_value,"-p", dvport, dvs_alias]
   try:
      out = subprocess.check_output(cmd, stderr=subprocess.STDOUT)
   except subprocess.CalledProcessError as e:
      msg = "set DVS property " + prop_name + " with value " + prop_value
      raise DvsPropFailure(msg, e.output)

def GetPortsetNameFromDVSAlias(dvs):
   """ Handy function to get portset name from given DVS name.
   """
   status, ps = DVSAliasToPortsetName(dvs)
   if status != VMK_OK:
      raise DvsFailure('find portset', dvs, status)
   return ps

def GetAliasNameFromPortset(ps):
   """ Handy function to get alias name from given portset name.
   """
   status, alias = VSDVS_GetAliasFromPortset(ps)
   if status != VMK_OK:
      raise DvsFailure('find alias', ps, status)
   return alias


def CreateVSwitch(dvs, num_ports, num_uplink_dvports, num_dvports,
                  uuid, portset_name, version,
                  is_opaque):
   """ Create virtual switch with given number of ports.
   """
   status = VSDVS_CreateVSwitch(dvs, uuid, portset_name, version, is_opaque,
                                num_ports, num_uplink_dvports, num_dvports)
   if status != VMK_OK:
      raise DvsFailure('create vswitch', dvs, status)


def DestroyVSwitch(dvs):
   """ Destroy given dvs.
   """
   status = VSDVS_DestroyVSwitch(dvs)
   if status != VMK_OK:
      raise DvsFailure('destroy dvs', dvs, status)


def AddDVPort(dvs, dvport, connect_id):
   """ Add DVPort to the DVS.
   """
   status = VSDVS_AddDVPort(dvs, dvport, int(connect_id))
   if status != VMK_OK:
      raise DvsFailure('create dvport', dvs, status)


def AddOpaqueDVPort(dvs, dvport, external_id):
   """ Add opaque DVPort to the DVS.
   """
   status = VSDVS_AddOpaqueDVPort(dvs, dvport, external_id)
   if status != VMK_OK:
      raise DvsFailure('create opaque dvport', dvs, status)


def RemoveDVPort(dvs, dvport):
   """ Remove given DVPort from the DVS.
   """
   status = VSDVS_RemoveDVPort(dvs, dvport);
   if status != VMK_OK:
      raise DvsFailure('remove dvport', dvs, status)


def GetTeamUplinkHint(dvs, dvport):
   """ Returns uplink to be used for given dvport
   """
   result = VSDVS_DvPortIDToPortID(dvs, dvport)
   status = result[0]
   portID = result[1]
   if status != VMK_OK:
      raise DvsFailure('get portId', dvs, status)

   uplink = vmk_Name()
   status = VSVMK_PortGetTeamUplinkHint(portID, uplink)
   if status != VMK_OK:
      raise  VmkernelFailure('get port uplink hint', status)

   return portID, uplink.name

def GetRARPStats(dvs):
   """ Returns RARP stats for given DVS.
   """
   stats = VSRARPStats()
   ps = GetPortsetNameFromDVSAlias(dvs)
   status = VSVMK_GetRARPStats(ps, stats)

   if status != VMK_OK:
      raise DvsFailure('get RARP stats', dvs, status)

   return stats


def GetServicePortStats(dvs):
   """ Returns Service Port stats for given DVS.
   """
   stats = VSServicePortTeamingStats()
   ps = GetPortsetNameFromDVSAlias(dvs)
   status = VSVMK_GetServicePortTeamingStats(ps, stats)

   if status != VMK_OK:
      raise DvsFailure('get service ports teaming stats', dvs, status)

   return stats


def IsSinkPortEnabled(dvs, dvport):
   """ Checks whether given dvport is sink port or not.
   """
   result =  VSDVS_IsSinkPortEnabled(dvs, dvport)
   status = result[0]
   if status != VMK_OK:
      raise DvsFailure('check is sink port?', dvs, status)
   return result[1]


def ConfigureSinkPort(dvs, dvport, enable):
   """ Sets/unsets given port as sink port.
   """
   status = VSDVS_ConfigureSinkPort(dvs, dvport, enable)
   if status != VMK_OK:
      raise DvsFailure('configure sink port', dvs, status)


def GetExtraEthFilter(dvs, dvport):
   """ Returns ExtraEthFilter of given dvport.
   """
   ethFilter = VSExtraEthFilter()
   status = VSDVS_GetExtraEthFilter(dvs, dvport, ethFilter)
   if status != VMK_OK:
      raise DvsFailure('get ethfilter', dvs, status)

   return ethFilter


def SetExtraEthFilter(dvs, dvport, ethFilter):
   """ Returns ExtraEthFilter of given dvport.
   """
   status = VSDVS_SetExtraEthFilter(dvs, dvport, ethFilter)
   if status != VMK_OK:
      raise DvsFailure('set ethfilter', dvs, status)


def ClearExtraEthFilter(dvs, dvport):
   """ Returns clears ExtraEthFilter of given dvport.
   """
   status = VSDVS_ClearExtraEthFilter(dvs, dvport)
   if status != VMK_OK:
      raise DvsFailure('clear ethfilter', dvs, status)

def DVPortIDToPortID(dvs, dvport):
   status, portid = VSDVS_DvPortIDToPortID(dvs, dvport)
   if status != VMK_OK:
      raise DVPortFailure('Get portid from dvportid', dvs, dvport, status)
   return portid

def GetUplinkDVPortID(uplink_name):
   status, dvport = VSVMK_GetUplinkDVPortID(uplink_name)
   if status != VMK_OK:
      raise DPException('Get dvportid of ' + uplink_name)
   return dvport

# This file is compatible with both classic and new-style classes.


