#!/bin/python

#
# Copyright 2011, 2016 VMware, Inc.  All rights reserved. -- VMware Confidential
#
# very simple chsh/chfn/chuid for hostd
#

from optparse import OptionParser
import sys
import os
import fileinput
import fcntl

#
# Workaround when none of environment variables LANG or LC_ALL are set.
# This happens when the current script is called from within hostd process,
# e.g. when calling VIM API LocalAccountManger.updateUser().
#
# This is needed for correct handling of UTF-8 characters.
#

LANG = 'en_US.UTF-8'
if os.environ.get('LANG') != LANG and os.environ.get('LC_ALL') != LANG:
   os.environ['LANG'] = LANG
   os.execve(__file__, sys.argv, os.environ)


usage = {
    "chsh" : "<login> <new shell>",
    "chfn" : "<login> <new name>",
    "chuid" : "<login> <new uid>",
}

def main():

    util = os.path.basename(sys.argv[0])

    if not util in usage:
        sys.stderr.write("Do not run directly!\n")
        sys.exit(1)

    parser = OptionParser(usage[util], version = ".1")
    (options, args) = parser.parse_args()

    if len(args) != 2:
        parser.print_help()
        return 1

    user = args[0]
    newArg = args[1]

    # basic sanity checking...
    if ':' in newArg:
        sys.stderr.write("%s: invalid charcter in input\n", util)
        return 1
    if util == 'chuid':
        try:
            uid = int(newArg)
        except ValueError:
            sys.stderr.write("chuid: input must be an int\n")
            return 1

    # FileInput helpfully backs-up and redirects stdout from this
    # point to the file.  It also locks it
    try:
        f = fileinput.FileInput('/etc/passwd', inplace=1)
    except Exception as e:
        sys.stderr.write("chsh: unable to open passwd file (%s)\n" % e)
        return 1

    found = False

    for n, line in enumerate(f):
        line = line.rstrip()

        fields = line.split(':')

        if fields[0] == user:
            found = True

            if util == 'chsh':
                fields[6] = newArg

            elif util == 'chfn':
                fields[4] = newArg

            elif util == 'chuid':
                fields[2] = newArg

            else:
                assert False

            line = ':'.join(fields)

        print(line)

    # implictily releases lock...
    f.close()

    if not found:
        sys.stderr.write("%s: user '%s' does not exist\n" % (util, args[0]))
        return 1

if __name__ == '__main__':
    sys.exit(main())
